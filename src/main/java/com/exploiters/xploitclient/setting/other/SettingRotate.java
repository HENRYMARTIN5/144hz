package com.exploiters.xploitclient.setting.other;

import com.exploiters.xploitclient.setting.base.SettingToggle;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class SettingRotate extends SettingToggle {
  public int getRotateMode() {
    return (getChild(lIlIIIIIIl[0]).asMode()).mode;
  }
  
  private static boolean IlllIllIIll(float IlllllIIllIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String llIlIllIIll(String lIIlIIlIllIlIl, String llIlIIlIllIlIl) {
    try {
      SecretKeySpec lIlIIIlIllIlIl = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIIIIIIl[0]]]).digest(llIlIIlIllIlIl.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIIIIIIl[1]]]);
      Cipher IllIIIlIllIlIl = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIIIIIIl[2]]]);
      IllIIIlIllIlIl.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIIIIIIl[2]], lIlIIIlIllIlIl);
      return new String(IllIIIlIllIlIl.doFinal(Base64.getDecoder().decode(lIIlIIlIllIlIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception IIIlIIlIllIlIl) {
      lllIIIlIllIlIl.printStackTrace();
      return null;
    } 
  }
  
  private static String IlIlIllIIll(boolean IIlIlIlIllIlIl, String IIIllIlIllIlIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/setting/other/SettingRotate.lIlIIIIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/setting/other/SettingRotate.lIlIIIIIIl : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/setting/other/SettingRotate.lIlIIIIIIl : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/setting/other/SettingRotate.lIlIIIIIIl : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/setting/other/SettingRotate.lIlIIIIIIl : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	1	llIIlIlIllIlIl	J
    //   76	42	3	IllIlIlIllIlIl	Ljavax/crypto/Cipher;
    //   0	125	0	llIllIlIllIlIl	J
    //   0	125	0	IIlIlIlIllIlIl	Z
    //   0	125	1	IIIllIlIllIlIl	Ljava/lang/String;
    //   0	125	3	lIIIlIlIllIlIl	F
    //   119	4	2	lIIllIlIllIlIl	Ljava/lang/Exception;
    //   0	125	3	lIlllIlIllIlIl	I
    //   0	125	1	IIlllIlIllIlIl	F
    //   59	59	2	IlIllIlIllIlIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	0	lIlIlIlIllIlIl	Ljava/lang/String;
    //   0	125	2	lllIlIlIllIlIl	C
    //   0	125	2	IlIIlIlIllIlIl	S
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static String lIIlIllIIll(String IIllIllIllIlIl, String lIllIllIllIlIl) {
    llIlIllIllIlIl = new String(Base64.getDecoder().decode(IIllIllIllIlIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder IIIllllIllIlIl = new StringBuilder();
    char[] lIIIlllIllIlIl = lIllIllIllIlIl.toCharArray();
    int IIIIlllIllIlIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIlIIIIIIl[0]];
    char[] arrayOfChar1 = llIlIllIllIlIl.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIlIIIIIIl[0]];
    while (IlllIllIIll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char IIlIlllIllIlIl = arrayOfChar1[j];
      "".length();
      IIIIlllIllIlIl++;
      j++;
      "".length();
      if (IlllIllIIll((lIlIIIIIIl[0] + lIlIIIIIIl[6] - lIlIIIIIIl[7] + lIlIIIIIIl[8] ^ lIlIIIIIIl[9] ^ lIlIIIIIIl[10]) & (lIlIIIIIIl[11] + lIlIIIIIIl[12] - lIlIIIIIIl[13] + lIlIIIIIIl[14] ^ lIlIIIIIIl[15] + lIlIIIIIIl[16] - lIlIIIIIIl[17] + lIlIIIIIIl[18] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(IIIllllIllIlIl);
  }
  
  static {
    lIllIllIIll();
    IIllIllIIll();
  }
  
  private static void IIllIllIIll() {
    IIlIIIIIIl = new String[lIlIIIIIIl[5]];
    IIlIIIIIIl[lIlIIIIIIl[0]] = lIIlIllIIll("MT8kDgAG", "cPPot");
    IIlIIIIIIl[lIlIIIIIIl[1]] = lIIlIllIIll("OygwPw==", "vGTZM");
    IIlIIIIIIl[lIlIIIIIIl[2]] = IlIlIllIIll("BIBuNyhY2CE=", "mSlkt");
    IIlIIIIIIl[lIlIIIIIIl[3]] = llIlIllIIll("t6VuDg9+7l4=", "rYltr");
    IIlIIIIIIl[lIlIIIIIIl[4]] = llIlIllIIll("z8svHgCmNRlShcpl2aWjzg==", "tqxab");
  }
  
  private static void lIllIllIIll() {
    lIlIIIIIIl = new int[19];
    lIlIIIIIIl[0] = (0x52 ^ 0x59) & (0xA3 ^ 0xA8 ^ 0xFFFFFFFF);
    lIlIIIIIIl[1] = " ".length();
    lIlIIIIIIl[2] = "  ".length();
    lIlIIIIIIl[3] = "   ".length();
    lIlIIIIIIl[4] = 0x92 ^ 0xB9 ^ 0x11 ^ 0x3E;
    lIlIIIIIIl[5] = 28 + 45 - -62 + 56 ^ 24 + 89 - 36 + 109;
    lIlIIIIIIl[6] = 0x41 ^ 0x12;
    lIlIIIIIIl[7] = -(0x61 ^ 0xC ^ 0x29 ^ 0x5B);
    lIlIIIIIIl[8] = 0xFE ^ 0x94 ^ 0xF5 ^ 0x92;
    lIlIIIIIIl[9] = 45 + 53 - -30 + 68;
    lIlIIIIIIl[10] = (0x4A ^ 0x5B) + (0xD ^ 0x1A) - (0xD4 ^ 0xC7) + 120 + 42 - 153 + 125;
    lIlIIIIIIl[11] = (0xFF ^ 0xC7) + (0xF5 ^ 0x9B) - (0x50 ^ 0x5F) + ((0x56 ^ 0x46) & (0xD1 ^ 0xC1 ^ 0xFFFFFFFF));
    lIlIIIIIIl[12] = 0x5B ^ 0x16;
    lIlIIIIIIl[13] = 75 + 18 - 43 + 148 + 55 + 133 - 174 + 194 - (0xFFFFB5BB & 0x4B7E) + (0x6A ^ 0x1F);
    lIlIIIIIIl[14] = 143 + 104 - 194 + 104 + (0x54 ^ 0x62) - 107 + 56 - 44 + 42 + (0x7 ^ 0x6A);
    lIlIIIIIIl[15] = 0x35 ^ 0x3C;
    lIlIIIIIIl[16] = 0xE8 ^ 0x86;
    lIlIIIIIIl[17] = 0xE4 ^ 0xB3 ^ 0x8F ^ 0x9B;
    lIlIIIIIIl[18] = 0x7C ^ 0x22;
  }
  
  public SettingRotate(double IllIIIIlllIlIl) {
    super(IIlIIIIIIl[lIlIIIIIIl[0]], IllIIIIlllIlIl);
    (new String[lIlIIIIIIl[2]])[lIlIIIIIIl[0]] = IIlIIIIIIl[lIlIIIIIIl[2]];
    (new String[lIlIIIIIIl[2]])[lIlIIIIIIl[1]] = IIlIIIIIIl[lIlIIIIIIl[3]];
    "".length();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\setting\other\SettingRotate.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */