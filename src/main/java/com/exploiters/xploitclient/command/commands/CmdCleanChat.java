package com.exploiters.xploitclient.command.commands;

import com.exploiters.xploitclient.command.Command;
import com.exploiters.xploitclient.utils.ExploitLogger;
import com.exploiters.xploitclient.utils.file.ExploitHackFileMang;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.Iterator;
import java.util.List;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class CmdCleanChat extends Command {
  private static String IIIlllIll(long IIlllIlIIIlIIll, char IIIllIlIIIlIIll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/command/commands/CmdCleanChat.lIllIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/command/commands/CmdCleanChat.lIllIIIl : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/command/commands/CmdCleanChat.lIllIIIl : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/command/commands/CmdCleanChat.lIllIIIl : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/command/commands/CmdCleanChat.lIllIIIl : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	3	IllllIlIIIlIIll	I
    //   0	125	0	lIlIlIlIIIlIIll	I
    //   76	42	3	lllIlIlIIIlIIll	Ljavax/crypto/Cipher;
    //   0	125	3	IlIIlIlIIIlIIll	B
    //   0	125	2	IIIllIlIIIlIIll	C
    //   0	125	0	IIlllIlIIIlIIll	J
    //   0	125	1	IIlIlIlIIIlIIll	Ljava/lang/Exception;
    //   119	4	2	IlIllIlIIIlIIll	Ljava/lang/Exception;
    //   0	125	1	lIIllIlIIIlIIll	Ljava/lang/String;
    //   0	125	2	llIIlIlIIIlIIll	F
    //   0	125	1	lIlllIlIIIlIIll	F
    //   0	125	0	IllIlIlIIIlIIll	Ljava/lang/String;
    //   59	59	2	llIllIlIIIlIIll	Ljavax/crypto/spec/SecretKeySpec;
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  public String getDescription() {
    return IIllIIIl[lIllIIIl[1]];
  }
  
  private static void IlIlllIll() {
    IIllIIIl = new String[lIllIIIl[14]];
    IIllIIIl[lIllIIIl[0]] = lllIllIll("BTw2JT0FODIw", "fPSDS");
    IIllIIIl[lIllIIIl[1]] = IIIlllIll("ymGwtgq3kYy1tMCVoDUsGVjB6M5oHJC+Pbr0Je0pbvY5pi++swAqL+TlSvabK/fk", "yKVLM");
    IIllIIIl[lIllIIIl[2]] = lIIlllIll("jGiG5eUsi53eTJP+5CMKzFbRNrf+uasG+mbEcr9LLEo=", "YLnIJ");
    IIllIIIl[lIllIIIl[3]] = lllIllIll("FTwlIwckITFmBTQgdSkWcCAwKko=", "PDUFd");
    IIllIIIl[lIllIIIl[4]] = lIIlllIll("mNeqAYZ6E8E=", "KjmZm");
    IIllIIIl[lIllIIIl[5]] = IIIlllIll("WcRcKlukq+uoYEhL2oNHUg==", "MZcjp");
    IIllIIIl[lIllIIIl[6]] = IIIlllIll("baOvv8mEWnY=", "wyJCI");
    IIllIIIl[lIllIIIl[7]] = lllIllIll("Q3ojBidBOC4COkE7LwMxBXo/CHQVMi5HOAgpP0c7B3opCzUCMScOJxU/L0cjDigvFA==", "aZKgT");
    IIllIIIl[lIllIIIl[8]] = lIIlllIll("E+ezZBQL8lE=", "PETqL");
    IIllIIIl[lIllIIIl[9]] = lIIlllIll("V8AXfx7eT4R1jVK/iN8fgw==", "EUJfq");
    IIllIIIl[lIllIIIl[10]] = lIIlllIll("t+t6k4nOQgOvz9OsLagVWw==", "gTFAK");
    IIllIIIl[lIllIIIl[11]] = lIIlllIll("rtmxwIiFgmxNSFReUvMdqw==", "zSHnH");
    IIllIIIl[lIllIIIl[12]] = IIIlllIll("0z2ecY7iuaE=", "HnnAr");
    IIllIIIl[lIllIIIl[13]] = IIIlllIll("cNE05rYgE204jhPKsnraLA9Z4hqd50OYKoAZhY9riraK2D9/Tv64l1c9mYxQc3ZNa4dLxq2T6dw=", "TNQat");
  }
  
  private static void llIlllIll() {
    lIllIIIl = new int[26];
    lIllIIIl[0] = (0x2C ^ 0x72) & (0x69 ^ 0x37 ^ 0xFFFFFFFF);
    lIllIIIl[1] = " ".length();
    lIllIIIl[2] = "  ".length();
    lIllIIIl[3] = "   ".length();
    lIllIIIl[4] = 0xA3 ^ 0xA7;
    lIllIIIl[5] = 0x26 ^ 0x23;
    lIllIIIl[6] = 0xB ^ 0x63 ^ 0x31 ^ 0x5F;
    lIllIIIl[7] = 0x65 ^ 0x62;
    lIllIIIl[8] = 0xB7 ^ 0xC6 ^ 0x6C ^ 0x15;
    lIllIIIl[9] = 0x9 ^ 0x0;
    lIllIIIl[10] = 0x50 ^ 0x8 ^ 0xE1 ^ 0xB3;
    lIllIIIl[11] = 0x44 ^ 0x4F;
    lIllIIIl[12] = 0x9B ^ 0x97;
    lIllIIIl[13] = 0xCD ^ 0xC0;
    lIllIIIl[14] = 0xA4 ^ 0xAD ^ 0xA2 ^ 0xA5;
    lIllIIIl[15] = 0x68 ^ 0x5 ^ 0x13 ^ 0x2D;
    lIllIIIl[16] = -(0xAB ^ 0xBC ^ 0xA4 ^ 0xAC);
    lIllIIIl[17] = 51 + 100 - 56 + 83 + (0xF ^ 0x71) - (0xC3 ^ 0xB3) + (0x81 ^ 0x85);
    lIllIIIl[18] = (0x0 ^ 0x7D) + (0x1B ^ 0x36) - (0x60 ^ 0x7A) + (0x1A ^ 0x11);
    lIllIIIl[19] = 60 + 25 - -64 + 2;
    lIllIIIl[20] = 24 + 65 - 41 + 166 ^ 9 + 147 - 105 + 104;
    lIllIIIl[21] = 184 + 124 - 230 + 114 + (0x77 ^ 0x1F) - (0x62 ^ 0x3B) + "  ".length();
    lIllIIIl[22] = (0x16 ^ 0x63) + (0xA1 ^ 0x8F) - (0x6F ^ 0x4B) + (0x5B ^ 0x7B);
    lIllIIIl[23] = 145 + 201 - 261 + 145 ^ 105 + 70 - 106 + 67;
    lIllIIIl[24] = 0xD2 ^ 0x91;
    lIllIIIl[25] = 0x92 ^ 0x97 ^ 0x66 ^ 0x3D;
  }
  
  private static boolean IIllllIll(short IIIIlIlIIIlIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  static {
    llIlllIll();
    IlIlllIll();
  }
  
  private static String lIIlllIll(String IIllIllIIIlIIll, Exception lllIIllIIIlIIll) {
    try {
      SecretKeySpec IIIlIllIIIlIIll = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIllIIIl[0]]]).digest(lllIIllIIIlIIll.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIllIIIl[1]]]);
      Cipher lIIlIllIIIlIIll = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIllIIIl[2]]]);
      lIIlIllIIIlIIll.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIllIIIl[2]], IIIlIllIIIlIIll);
      return new String(lIIlIllIIIlIIll.doFinal(Base64.getDecoder().decode(IIllIllIIIlIIll.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception llIlIllIIIlIIll) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
  
  public String getAlias() {
    return IIllIIIl[lIllIIIl[0]];
  }
  
  private static boolean lIllllIll(String IlllIIlIIIlIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String lllIllIll(String lIlllllIIIlIIll, String IIIIIIIlIIlIIll) {
    IllllllIIIlIIll = new String(Base64.getDecoder().decode(lIlllllIIIlIIll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder IlIlIIIlIIlIIll = new StringBuilder();
    char[] llIIIIIlIIlIIll = IIIIIIIlIIlIIll.toCharArray();
    int IlIIIIIlIIlIIll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIllIIIl[0]];
    char[] arrayOfChar1 = IllllllIIIlIIll.toCharArray();
    int i = arrayOfChar1.length;
    lIlIlllIIIlIIll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIllIIIl[0]];
    while (lIllllIll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(lIlIlllIIIlIIll, i))) {
      char IllIIIIlIIlIIll = arrayOfChar1[lIlIlllIIIlIIll];
      "".length();
      IlIIIIIlIIlIIll++;
      lIlIlllIIIlIIll++;
      "".length();
      if (lIllllIll((lIllIIIl[0] + lIllIIIl[15] - lIllIIIl[16] + lIllIIIl[13] ^ lIllIIIl[17] ^ lIllIIIl[18]) & (lIllIIIl[19] + lIllIIIl[20] - lIllIIIl[21] + lIllIIIl[22] ^ lIllIIIl[9] + lIllIIIl[23] - lIllIIIl[24] + lIllIIIl[25] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(IlIlIIIlIIlIIll);
  }
  
  public void onCommand(String IIIIIlIlIIlIIll, String[] lllllIIlIIlIIll) throws Exception {
    if (IIllllIll(lllllIIlIIlIIll[lIllIIIl[0]])) {
      ExploitLogger.errorMessage(IIllIIIl[lIllIIIl[3]]);
      return;
    } 
    if (lIllllIll(lllllIIlIIlIIll[lIllIIIl[0]].toLowerCase().contains(IIllIIIl[lIllIIIl[4]]))) {
      (new String[lIllIIIl[1]])[lIllIIIl[0]] = IIllIIIl[lIllIIIl[5]];
      ExploitHackFileMang.appendFile(lllllIIlIIlIIll[lIllIIIl[1]].toLowerCase(), new String[lIllIIIl[1]]);
      ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(IIllIIIl[lIllIIIl[6]]).append(lllllIIlIIlIIll[lIllIIIl[1]]).append(IIllIIIl[lIllIIIl[7]])));
      "".length();
      if (-" ".length() >= "   ".length())
        return; 
    } else if (lIllllIll(lllllIIlIIlIIll[lIllIIIl[0]].toLowerCase().contains(IIllIIIl[lIllIIIl[8]]))) {
      (new String[lIllIIIl[1]])[lIllIIIl[0]] = IIllIIIl[lIllIIIl[9]];
      List<String> IlIIIlIlIIlIIll = ExploitHackFileMang.readFileLines(new String[lIllIIIl[1]]);
      "".length();
      (new String[lIllIIIl[1]])[lIllIIIl[0]] = IIllIIIl[lIllIIIl[10]];
      ExploitHackFileMang.createEmptyFile(new String[lIllIIIl[1]]);
      Iterator<String> iterator = IlIIIlIlIIlIIll.iterator();
      while (lIllllIll(iterator.hasNext())) {
        String llIIIlIlIIlIIll = iterator.next();
        (new String[lIllIIIl[1]])[lIllIIIl[0]] = IIllIIIl[lIllIIIl[11]];
        ExploitHackFileMang.appendFile(llIIIlIlIIlIIll.toLowerCase(), new String[lIllIIIl[1]]);
        "".length();
        if (((0x4F ^ 0x7D) & (0x69 ^ 0x5B ^ 0xFFFFFFFF)) < 0)
          return; 
      } 
      ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(IIllIIIl[lIllIIIl[12]]).append(lllllIIlIIlIIll[lIllIIIl[1]]).append(IIllIIIl[lIllIIIl[13]])));
    } 
  }
  
  public String getSyntax() {
    return IIllIIIl[lIllIIIl[2]];
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\command\commands\CmdCleanChat.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */