package com.exploiters.xploitclient.command.commands;

import com.exploiters.xploitclient.command.Command;
import com.exploiters.xploitclient.utils.ExploitLogger;
import com.exploiters.xploitclient.utils.LoginManager;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;
import net.minecraft.class_2561;
import net.minecraft.class_2585;
import net.minecraft.class_2661;

public class CmdLogin extends Command {
  static {
    lIlIlllIIl();
    IIlIlllIIl();
  }
  
  private static String IlIIlllIIl(String IlIlllIlIlIllIl, Exception lIlIllIlIlIllIl) {
    try {
      SecretKeySpec IllIllIlIlIllIl = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIll[0]]]).digest(lIlIllIlIlIllIl.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIll[1]]]);
      Cipher lllIllIlIlIllIl = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIll[2]]]);
      lllIllIlIlIllIl.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIll[2]], IllIllIlIlIllIl);
      return new String(lllIllIlIlIllIl.doFinal(Base64.getDecoder().decode(IlIlllIlIlIllIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception lIIlllIlIlIllIl) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
  
  private static boolean IllIlllIIl(float IllllIIlIlIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public void onCommand(String lIIlIlllIlIllIl, String[] IIIlIlllIlIllIl) throws Exception {
    if (!IllIlllIIl(IIIlIlllIlIllIl[lllIlIll[0]]) || lllIlllIIl(IIIlIlllIlIllIl[lllIlIll[1]])) {
      ExploitLogger.errorMessage(IllIlIll[lllIlIll[3]]);
      return;
    } 
    String lllIIlllIlIllIl = LoginManager.login(IIIlIlllIlIllIl[lllIlIll[0]], IIIlIlllIlIllIl[lllIlIll[1]]);
    try {
      if (IIIllllIIl(lllIIlllIlIllIl.equals(IllIlIll[lllIlIll[4]]))) {
        this.mc.field_1724.field_3944.method_11083(new class_2661((class_2561)new class_2585(String.valueOf((new StringBuilder()).append(IllIlIll[lllIlIll[5]]).append(this.mc.method_1548().method_1676()).append(IllIlIll[lllIlIll[6]])))));
        "".length();
        if (-(0x47 ^ 0x6C ^ 0xEB ^ 0xC5) >= 0)
          return; 
      } else {
        ExploitLogger.errorMessage(lllIIlllIlIllIl);
      } 
      "".length();
      if (-" ".length() >= ((0x28 ^ 0x71) & (0xFB ^ 0xA2 ^ 0xFFFFFFFF)))
        return; 
    } catch (Exception llIlIlllIlIllIl) {
      llIlIlllIlIllIl.printStackTrace();
      return;
    } 
  }
  
  public String getAlias() {
    return IllIlIll[lllIlIll[0]];
  }
  
  private static boolean lllIlllIIl(String IIlllIIlIlIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  public String getSyntax() {
    return IllIlIll[lllIlIll[2]];
  }
  
  private static String llIIlllIIl(long IlIlIlIlIlIllIl, int lIIIIlIlIlIllIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/command/commands/CmdLogin.lllIlIll : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/command/commands/CmdLogin.lllIlIll : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/command/commands/CmdLogin.lllIlIll : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/command/commands/CmdLogin.lllIlIll : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/command/commands/CmdLogin.lllIlIll : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	2	lIIIIlIlIlIllIl	I
    //   0	125	3	IIllIlIlIlIllIl	I
    //   0	125	0	IIlIIlIlIlIllIl	Ljava/lang/String;
    //   0	125	0	IlIlIlIlIlIllIl	J
    //   0	125	3	IIIIIlIlIlIllIl	Ljava/lang/String;
    //   76	42	3	lIlIIlIlIlIllIl	Ljavax/crypto/Cipher;
    //   119	4	2	IIIlIlIlIlIllIl	Ljava/lang/Exception;
    //   0	125	1	lllIIlIlIlIllIl	Ljava/lang/String;
    //   59	59	2	lIIlIlIlIlIllIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	1	llIlIlIlIlIllIl	F
    //   0	125	2	IllIIlIlIlIllIl	C
    //   0	125	0	llIIIlIlIlIllIl	D
    //   0	125	1	IlIIIlIlIlIllIl	C
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static void IIlIlllIIl() {
    IllIlIll = new String[lllIlIll[7]];
    IllIlIll[lllIlIll[0]] = lIIIlllIIl("Kg03Bx0=", "FbPns");
    IllIlIll[lllIlIll[1]] = IlIIlllIIl("Owx0gkYQgT4OoR4REZVH+Ihfmk1BA1Z0", "VgdjV");
    IllIlIll[lllIlIll[2]] = IlIIlllIIl("iYVEklrHUilw2qyWEYDbK21tTV4dO/mSpHRcM8wzwQI=", "iBFJR");
    IllIlIll[lllIlIll[3]] = llIIlllIIl("Rt/d0Xiil8HW0skx1uImh8CShjBhaSH34UEodzFOSOA=", "oSTQu");
    IllIlIll[lllIlIll[4]] = lIIIlllIIl("w7EgGiUfPy92GQ01IjM5CzA0Og==", "VAVJx");
    IllIlIll[lllIlIll[5]] = lIIIlllIIl("GxMbBDQ7FR4SPSQfWAs+LwEdA3EhCFgGImhE", "HfxgQ");
    IllIlIll[lllIlIll[6]] = IlIIlllIIl("BcKn/1hibl9a6HuFIkSXyZidMPmfxVct", "pygGC");
  }
  
  public String getDescription() {
    return IllIlIll[lllIlIll[1]];
  }
  
  private static void lIlIlllIIl() {
    lllIlIll = new int[21];
    lllIlIll[0] = (18 + 92 - -21 + 11 ^ 118 + 62 - 173 + 181) & (0x46 ^ 0x74 ^ (0xBD ^ 0x99) & (0x6F ^ 0x4B ^ 0xFFFFFFFF) ^ -" ".length());
    lllIlIll[1] = " ".length();
    lllIlIll[2] = "  ".length();
    lllIlIll[3] = "   ".length();
    lllIlIll[4] = 0x78 ^ 0x4E ^ 0x8A ^ 0xB8;
    lllIlIll[5] = 0x7E ^ 0x7B;
    lllIlIll[6] = 0x21 ^ 0x27;
    lllIlIll[7] = 0x51 ^ 0x56;
    lllIlIll[8] = 188 + 135 - 276 + 184 ^ 75 + 69 - -13 + 23;
    lllIlIll[9] = -(0x78 ^ 0x15 ^ 0xE8 ^ 0x9A);
    lllIlIll[10] = 0x85 ^ 0x88;
    lllIlIll[11] = (0x6 ^ 0x0) + (0x9C ^ 0xA5) - -(0xAE ^ 0xA6) + (0xEA ^ 0x97);
    lllIlIll[12] = 126 + 121 - 203 + 111;
    lllIlIll[13] = 82 + 134 - 112 + 47;
    lllIlIll[14] = 0x1E ^ 0x49 ^ 0x48 ^ 0x52;
    lllIlIll[15] = 85 + 59 - 0 + 65;
    lllIlIll[16] = (0xD3 ^ 0x85) + (0x10 ^ 0x44) - 50 + 84 - 19 + 27 + 43 + 52 - 61 + 97;
    lllIlIll[17] = 0x16 ^ 0x2E ^ 0x5D ^ 0x6C;
    lllIlIll[18] = 0xD ^ 0x63;
    lllIlIll[19] = 0xCE ^ 0x8D;
    lllIlIll[20] = 0x7B ^ 0x25;
  }
  
  private static boolean IIIllllIIl(Exception IlIllIIlIlIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String lIIIlllIIl(String IIllIIllIlIllIl, String lIIlIIllIlIllIl) {
    llIlIIllIlIllIl = new String(Base64.getDecoder().decode(IIllIIllIlIllIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder IIIllIllIlIllIl = new StringBuilder();
    char[] lIIIlIllIlIllIl = lIIlIIllIlIllIl.toCharArray();
    int IIIIlIllIlIllIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIlIll[0]];
    char[] arrayOfChar1 = llIlIIllIlIllIl.toCharArray();
    IIlIIIllIlIllIl = arrayOfChar1.length;
    int i = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIlIll[0]];
    while (IIIllllIIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(i, IIlIIIllIlIllIl))) {
      char IIlIlIllIlIllIl = arrayOfChar1[i];
      "".length();
      IIIIlIllIlIllIl++;
      i++;
      "".length();
      if (IIIllllIIl((lllIlIll[0] + lllIlIll[8] - lllIlIll[9] + lllIlIll[10] ^ lllIlIll[11] ^ lllIlIll[12]) & (lllIlIll[13] + lllIlIll[14] - lllIlIll[15] + lllIlIll[16] ^ lllIlIll[17] + lllIlIll[18] - lllIlIll[19] + lllIlIll[20] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(IIIllIllIlIllIl);
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\command\commands\CmdLogin.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */