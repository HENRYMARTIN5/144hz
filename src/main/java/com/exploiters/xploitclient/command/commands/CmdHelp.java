package com.exploiters.xploitclient.command.commands;

import com.exploiters.xploitclient.command.Command;
import com.exploiters.xploitclient.command.CommandManager;
import com.exploiters.xploitclient.utils.ExploitLogger;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Iterator;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;
import net.minecraft.class_2561;
import net.minecraft.class_2585;

public class CmdHelp extends Command {
  public String getDescription() {
    return lIlIlIl[lllIlIl[1]];
  }
  
  public void onCommand(String lllIlIIIIIllIll, String[] lIlIlIIIIIllIll) throws Exception {
    String llIIlIIIIIllIll = null;
    try {
      llIIlIIIIIllIll = lIlIlIIIIIllIll[lllIlIl[0]];
      "".length();
      if (-" ".length() >= (0xAF ^ 0xC0 ^ 0xC0 ^ 0xAB))
        return; 
    } catch (Exception exception) {}
    Iterator<Command> iterator = CommandManager.getCommands().iterator();
    while (lIlIlIIIl(iterator.hasNext())) {
      Command lIIllIIIIIllIll = iterator.next();
      if (IllIlIIIl(llIIlIIIIIllIll.isEmpty()) && IllIlIIIl(llIIlIIIIIllIll.equalsIgnoreCase(lIIllIIIIIllIll.getAlias()))) {
        "".length();
        if ("  ".length() <= ((54 + 246 - 99 + 48 ^ 126 + 114 - 202 + 131) & (213 + 161 - 241 + 99 ^ 122 + 6 - -25 + 31 ^ -" ".length())))
          return; 
        continue;
      } 
      class_2585 llIllIIIIIllIll = new class_2585(String.valueOf((new StringBuilder()).append(lIlIlIl[lllIlIl[3]]).append(Command.PREFIX).append(lIIllIIIIIllIll.getAlias()).append(lIlIlIl[lllIlIl[4]]).append(lIIllIIIIIllIll.getSyntax())));
      "".length();
      ExploitLogger.noPrefixMessage((class_2561)llIllIIIIIllIll);
      "".length();
      if ("   ".length() == " ".length())
        return; 
    } 
  }
  
  public String getSyntax() {
    return lIlIlIl[lllIlIl[2]];
  }
  
  private static void IlllIIIIl() {
    lIlIlIl = new String[lllIlIl[8]];
    lIlIlIl[lllIlIl[0]] = IlIlIIIIl("DhIIBw==", "fwdwM");
    lIlIlIl[lllIlIl[1]] = llIlIIIIl("JVMw43l/O1NfS6je99tUn2mommp0V7HVMOZhFWgKz08=", "wlPRw");
    lIlIlIl[lllIlIl[2]] = llIlIIIIl("f42fvUf4Nbol0/M0hWrclLIw2D+QBAKo", "DJvMu");
    lIlIlIl[lllIlIl[3]] = llIlIIIIl("wR2nchamkYQ=", "DtSBm");
    lIlIlIl[lllIlIl[4]] = IIllIIIIl("VFiTqlX8067Ao9JJ5lquAA==", "ZMCgG");
    lIlIlIl[lllIlIl[5]] = llIlIIIIl("AoHV26Hbdys=", "shXUQ");
    lIlIlIl[lllIlIl[6]] = IlIlIIIIl("ZA==", "nZIiK");
    lIlIlIl[lllIlIl[7]] = llIlIIIIl("Ry4VkBwYKxA=", "skehF");
  }
  
  private static boolean lIlIlIIIl(Exception llIIllIlllIlIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static boolean IllIlIIIl(char lIIIllIlllIlIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static String IIllIIIIl(double llIIIlllllIlIll, long lIIIIlllllIlIll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	0	IIlIIlllllIlIll	Ljava/lang/String;
    //   0	125	1	llIlIlllllIlIll	F
    //   0	125	0	llIIIlllllIlIll	D
    //   0	125	2	lIIIIlllllIlIll	J
    //   0	125	3	IIIIIlllllIlIll	I
    //   0	125	1	lllIIlllllIlIll	Ljava/lang/String;
    //   119	4	2	IIIlIlllllIlIll	Ljava/lang/Exception;
    //   0	125	1	IlIIIlllllIlIll	S
    //   59	59	2	lIIlIlllllIlIll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	3	IIllIlllllIlIll	I
    //   76	42	3	lIlIIlllllIlIll	Ljavax/crypto/Cipher;
    //   0	125	2	IllIIlllllIlIll	C
    //   0	125	0	IlIlIlllllIlIll	J
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static void IIlIlIIIl() {
    lllIlIl = new int[22];
    lllIlIl[0] = "   ".length() & ("   ".length() ^ -" ".length());
    lllIlIl[1] = " ".length();
    lllIlIl[2] = "  ".length();
    lllIlIl[3] = "   ".length();
    lllIlIl[4] = 0x74 ^ 0x54 ^ 0x63 ^ 0x47;
    lllIlIl[5] = 6 + 4 - -9 + 165 ^ 122 + 160 - 152 + 59;
    lllIlIl[6] = 0x15 ^ 0x7E ^ 0x29 ^ 0x44;
    lllIlIl[7] = 0xC3 ^ 0xC4;
    lllIlIl[8] = 0x93 ^ 0x9B;
    lllIlIl[9] = 0x1A ^ 0x49;
    lllIlIl[10] = -(75 + 158 - 202 + 153 ^ 4 + 41 - -37 + 85);
    lllIlIl[11] = 0xA1 ^ 0xAC;
    lllIlIl[12] = (0xDE ^ 0xBD) + (0x4F ^ 0x34) - (0x36 ^ 0x4F) + (0xE5 ^ 0xBA);
    lllIlIl[13] = 106 + 92 - 171 + 128;
    lllIlIl[14] = 131 + 77 - 157 + 100;
    lllIlIl[15] = 0x3D ^ 0x17 ^ 0x32 ^ 0x55;
    lllIlIl[16] = 139 + 126 - 81 + 25;
    lllIlIl[17] = 7 + 114 - 86 + 124;
    lllIlIl[18] = 0x50 ^ 0x59;
    lllIlIl[19] = 0x23 ^ 0x7B ^ 0x71 ^ 0x47;
    lllIlIl[20] = 0x6C ^ 0x2F;
    lllIlIl[21] = 0xD4 ^ 0x8A;
  }
  
  private static String IlIlIIIIl(String IlllllIlllIlIll, String IIIIIIllllIlIll) {
    String str = new String(Base64.getDecoder().decode(IlllllIlllIlIll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder llIlIIllllIlIll = new StringBuilder();
    char[] IIlIIIllllIlIll = IIIIIIllllIlIll.toCharArray();
    int llIIIIllllIlIll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIlIl[0]];
    char[] arrayOfChar1 = str.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIlIl[0]];
    while (lIlIlIIIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lllIIIllllIlIll = arrayOfChar1[j];
      "".length();
      llIIIIllllIlIll++;
      j++;
      "".length();
      if (lIlIlIIIl((lllIlIl[0] + lllIlIl[9] - lllIlIl[10] + lllIlIl[11] ^ lllIlIl[12] ^ lllIlIl[13]) & (lllIlIl[14] + lllIlIl[15] - lllIlIl[16] + lllIlIl[17] ^ lllIlIl[18] + lllIlIl[19] - lllIlIl[20] + lllIlIl[21] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(llIlIIllllIlIll);
  }
  
  private static String llIlIIIIl(short lIllllllllIlIll, Exception lIlIllllllIlIll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   39: iconst_1
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   56: iconst_2
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/command/commands/CmdHelp.lllIlIl : [I
    //   71: iconst_2
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	1	IIllllllllIlIll	Ljava/lang/String;
    //   0	113	0	IIlIllllllIlIll	Ljava/lang/String;
    //   107	4	2	lIIlllllllIlIll	Ljava/lang/Exception;
    //   64	42	3	lllIllllllIlIll	Ljavax/crypto/Cipher;
    //   0	113	0	lIllllllllIlIll	S
    //   47	59	2	IllIllllllIlIll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	3	llIlllllllIlIll	I
    //   0	113	2	IIIlllllllIlIll	Ljava/lang/Exception;
    //   0	113	2	IlIIllllllIlIll	J
    //   0	113	0	IlIlllllllIlIll	Ljava/lang/String;
    //   0	113	1	lIlIllllllIlIll	Ljava/lang/Exception;
    //   0	113	3	lIIIllllllIlIll	I
    //   0	113	1	llIIllllllIlIll	S
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  public String getAlias() {
    return lIlIlIl[lllIlIl[0]];
  }
  
  static {
    IIlIlIIIl();
    IlllIIIIl();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\command\commands\CmdHelp.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */