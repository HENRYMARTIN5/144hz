package com.exploiters.xploitclient.command.commands;

import com.exploiters.xploitclient.command.Command;
import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.module.ModuleManager;
import com.exploiters.xploitclient.utils.ExploitLogger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Base64;
import java.util.Iterator;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.DESEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;
import net.minecraft.class_3675;

public class CmdBind extends Command {
  static {
    IlIIIlIIll();
    lIIIIlIIll();
  }
  
  private static boolean lllIIlIIll(char lllllIlllIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  public void onCommand(String llIlllIlIlIIlIl, String[] IlIlllIlIlIIlIl) throws Exception {
    if (llIIIlIIll(IlIlllIlIlIIlIl[lllIIIIIl[0]].equalsIgnoreCase(IllIIIIIl[lllIIIIIl[3]]))) {
      int IlIIIIllIlIIlIl = lllIIIIIl[0];
      Iterator<Module> iterator = ModuleManager.getModules().iterator();
      while (llIIIlIIll(iterator.hasNext())) {
        Module llIIIIllIlIIlIl = iterator.next();
        if (IIlIIlIIll(llIIIIllIlIIlIl.getKey(), lllIIIIIl[4])) {
          llIIIIllIlIIlIl.setKey(lllIIIIIl[4]);
          IlIIIIllIlIIlIl++;
        } 
        "".length();
        if ("   ".length() < ((0xEF ^ 0x84 ^ 0x4A ^ 0x37) & (0x50 ^ 0x5E ^ 0xBE ^ 0xA6 ^ -" ".length())))
          return; 
      } 
      ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[5]]).append(IlIIIIllIlIIlIl).append(IllIIIIIl[lllIIIIIl[6]])));
      "".length();
      if ((0x77 ^ 0x72) <= 0)
        return; 
    } else if (lIlIIlIIll(IlIlllIlIlIIlIl.length, lllIIIIIl[2]) && (!IllIIlIIll(IlIlllIlIlIIlIl.length, lllIIIIIl[3]) || lllIIlIIll(IlIlllIlIlIIlIl[lllIIIIIl[1]].equalsIgnoreCase(IllIIIIIl[lllIIIIIl[7]])))) {
      Iterator<Module> iterator = ModuleManager.getModules().iterator();
      while (llIIIlIIll(iterator.hasNext())) {
        Module lIllllIlIlIIlIl = iterator.next();
        if (llIIIlIIll(lIllllIlIlIIlIl.getName().equalsIgnoreCase(IlIlllIlIlIIlIl[lllIIIIIl[1]]))) {
          if (llIIIlIIll(IlIlllIlIlIIlIl[lllIIIIIl[0]].equalsIgnoreCase(IllIIIIIl[lllIIIIIl[8]]))) {
            int IlllllIlIlIIlIl = lllIIIIIl[9];
            try {
              IlllllIlIlIIlIl = class_3675.method_15981(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[10]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]].toLowerCase()))).method_1444();
              "".length();
              if (((0x24 ^ 0x4D ^ 0x6C ^ 0x67) & (191 + 19 - 73 + 97 ^ 98 + 73 - 154 + 119 ^ -" ".length())) > "  ".length())
                return; 
            } catch (IllegalArgumentException llllllIlIlIIlIl) {
              if (llIIIlIIll(IlIlllIlIlIIlIl[lllIIIIIl[2]].toLowerCase().startsWith(IllIIIIIl[lllIIIIIl[11]]))) {
                try {
                  IlllllIlIlIIlIl = class_3675.method_15981(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[12]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]].toLowerCase().replaceFirst(IllIIIIIl[lllIIIIIl[13]], IllIIIIIl[lllIIIIIl[14]])))).method_1444();
                  "".length();
                  if (-" ".length() > "   ".length())
                    return; 
                } catch (IllegalArgumentException lIIIIIllIlIIlIl) {
                  ExploitLogger.errorMessage(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[15]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]]).append(IllIIIIIl[lllIIIIIl[16]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]].toLowerCase().replaceFirst(IllIIIIIl[lllIIIIIl[17]], IllIIIIIl[lllIIIIIl[18]]))));
                  return;
                } 
              } else if (llIIIlIIll(IlIlllIlIlIIlIl[lllIIIIIl[2]].toLowerCase().startsWith(IllIIIIIl[lllIIIIIl[19]]))) {
                try {
                  IlllllIlIlIIlIl = class_3675.method_15981(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[20]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]].toLowerCase().replaceFirst(IllIIIIIl[lllIIIIIl[21]], IllIIIIIl[lllIIIIIl[22]])))).method_1444();
                  "".length();
                  if (null != null)
                    return; 
                } catch (IllegalArgumentException IIIIIIllIlIIlIl) {
                  ExploitLogger.errorMessage(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[23]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]]).append(IllIIIIIl[lllIIIIIl[24]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]].toLowerCase().replaceFirst(IllIIIIIl[lllIIIIIl[25]], IllIIIIIl[lllIIIIIl[26]]))));
                  return;
                } 
              } else {
                ExploitLogger.errorMessage(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[27]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]])));
                return;
              } 
            } 
            lIllllIlIlIIlIl.setKey(IlllllIlIlIIlIl);
            ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[28]]).append(lIllllIlIlIIlIl.getName()).append(IllIIIIIl[lllIIIIIl[29]]).append(IlIlllIlIlIIlIl[lllIIIIIl[2]]).append(IllIIIIIl[lllIIIIIl[30]]).append(IlllllIlIlIIlIl).append(IllIIIIIl[lllIIIIIl[31]])));
            "".length();
            if ("  ".length() <= 0)
              return; 
          } else if (llIIIlIIll(IlIlllIlIlIIlIl[lllIIIIIl[0]].equalsIgnoreCase(IllIIIIIl[lllIIIIIl[32]]))) {
            lIllllIlIlIIlIl.setKey(lllIIIIIl[4]);
            ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[33]]).append(lIllllIlIlIIlIl.getName())));
          } 
          return;
        } 
        "".length();
        if ("  ".length() <= ((0x5A ^ 0x4D) & (0x59 ^ 0x4E ^ 0xFFFFFFFF)))
          return; 
      } 
      ExploitLogger.errorMessage(String.valueOf((new StringBuilder()).append(IllIIIIIl[lllIIIIIl[34]]).append(IlIlllIlIlIIlIl[lllIIIIIl[1]]).append(IllIIIIIl[lllIIIIIl[35]])));
      "".length();
      if ((0x17 ^ 0x13) != (0x27 ^ 0x23))
        return; 
    } else {
      ExploitLogger.errorMessage(IllIIIIIl[lllIIIIIl[36]]);
      ExploitLogger.infoMessage(getSyntax());
    } 
  }
  
  private static boolean llIIIlIIll(char lIIIIllllIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public String getSyntax() {
    return IllIIIIIl[lllIIIIIl[2]];
  }
  
  private static String lllllIIIll(int lIlIIlIlIlIIlIl, String lIllIlIlIlIIlIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/command/commands/CmdBind.lllIIIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/command/commands/CmdBind.lllIIIIIl : [I
    //   39: iconst_1
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/command/commands/CmdBind.lllIIIIIl : [I
    //   56: iconst_2
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/command/commands/CmdBind.lllIIIIIl : [I
    //   71: iconst_2
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	1	IllIIlIlIlIIlIl	Ljava/lang/Exception;
    //   0	113	0	IlllIlIlIlIIlIl	S
    //   0	113	0	lIlIIlIlIlIIlIl	I
    //   0	113	2	llIIIlIlIlIIlIl	I
    //   0	113	2	lIIlIlIlIlIIlIl	Ljava/lang/Exception;
    //   0	113	3	IIllIlIlIlIIlIl	I
    //   0	113	1	lIllIlIlIlIIlIl	Ljava/lang/String;
    //   64	42	3	IIIlIlIlIlIIlIl	Ljavax/crypto/Cipher;
    //   107	4	2	IlIlIlIlIlIIlIl	Ljava/lang/Exception;
    //   47	59	2	lllIIlIlIlIIlIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	0	llIlIlIlIlIIlIl	Ljava/lang/String;
    //   0	113	3	IlIIIlIlIlIIlIl	Z
    //   0	113	1	IIlIIlIlIlIIlIl	B
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static boolean IllIIlIIll(char IIlIIllllIIIlIl, Exception llIIIllllIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 < SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  private static String IIIIIlIIll(String llIlIIIlIlIIlIl, String IIllIIIlIlIIlIl) {
    lIIlIIIlIlIIlIl = new String(Base64.getDecoder().decode(llIlIIIlIlIIlIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder lllIlIIlIlIIlIl = new StringBuilder();
    char[] IIIIlIIlIlIIlIl = IIllIIIlIlIIlIl.toCharArray();
    int llllIIIlIlIIlIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIIIIIl[0]];
    char[] arrayOfChar1 = lIIlIIIlIlIIlIl.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIIIIIl[0]];
    while (llIIIlIIll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char llIIlIIlIlIIlIl = arrayOfChar1[j];
      "".length();
      llllIIIlIlIIlIl++;
      j++;
      "".length();
      if (llIIIlIIll((lllIIIIIl[0] + lllIIIIIl[38] - lllIIIIIl[39] + lllIIIIIl[15] ^ lllIIIIIl[40] ^ lllIIIIIl[41]) & (lllIIIIIl[42] + lllIIIIIl[43] - lllIIIIIl[44] + lllIIIIIl[45] ^ lllIIIIIl[11] + lllIIIIIl[46] - lllIIIIIl[47] + lllIIIIIl[48] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(lllIlIIlIlIIlIl);
  }
  
  private static void lIIIIlIIll() {
    IllIIIIIl = new String[lllIIIIIl[37]];
    IllIIIIIl[lllIIIIIl[0]] = IllllIIIll("vjxMDwGDZu0=", "pffLr");
    IllIIIIIl[lllIIIIIl[1]] = lllllIIIll("zQ2PrdvjtiYFDirn5eJe8Q==", "dubNp");
    IllIIIIIl[lllIIIIIl[2]] = IllllIIIll("eVKkii9gqzsgPz1CaZefLpSel1C7aP9PaKoDVjIrYX5NURPQ4AyAA54UasY40YRQC1QOjpGEOK+PEvw5tbSF2g==", "eiSdi");
    IllIIIIIl[lllIIIIIl[3]] = IIIIIlIIll("NCIrEQI=", "WNNpp");
    IllIIIIIl[lllIIIIIl[5]] = lllllIIIll("yqI3PMKCBfe/AcbXTrGvQg==", "dswWk");
    IllIIIIIl[lllIIIIIl[6]] = lllllIIIll("ZTljMVizoUM=", "VZSPv");
    IllIIIIIl[lllIIIIIl[7]] = lllllIIIll("ixiWSqFUz84=", "sSAvQ");
    IllIIIIIl[lllIIIIIl[8]] = IllllIIIll("1W5ZVFczLDc=", "jLDCB");
    IllIIIIIl[lllIIIIIl[10]] = lllllIIIll("k3Up22dgd2xcrGsUHYvA7A==", "MSmRm");
    IllIIIIIl[lllIIIIIl[11]] = lllllIIIll("w1DjtS/hSHE=", "XwNbZ");
    IllIIIIIl[lllIIIIIl[12]] = lllllIIIll("QV43BbRB4lUXGBC5aXSgmQ==", "hmzsC");
    IllIIIIIl[lllIIIIIl[13]] = IIIIIlIIll("NicVERM=", "DNryg");
    IllIIIIIl[lllIIIIIl[14]] = lllllIIIll("1Gs0Vv8czhE=", "GzMmx");
    IllIIIIIl[lllIIIIIl[15]] = IIIIIlIIll("DzcfPDctN1Q5PSNjVA==", "ZYtRX");
    IllIIIIIl[lllIIIIIl[16]] = IIIIIlIIll("RkNE", "fldvY");
    IllIIIIIl[lllIIIIIl[17]] = IIIIIlIIll("KjMLGTg=", "XZlqL");
    IllIIIIIl[lllIIIIIl[18]] = IIIIIlIIll("KiwzOQR2", "XETQp");
    IllIIIIIl[lllIIIIIl[19]] = lllllIIIll("ezshF7KGsdg=", "JDSPd");
    IllIIIIIl[lllIIIIIl[20]] = IIIIIlIIll("HygAeDMRNBs5OQYpVw==", "tMyVX");
    IllIIIIIl[lllIIIIIl[21]] = IIIIIlIIll("OQ==", "KWrmr");
    IllIIIIIl[lllIIIIIl[22]] = lllllIIIll("aN93wRTblHg=", "AuVxQ");
    IllIIIIIl[lllIIIIIl[23]] = lllllIIIll("Exfn5rlPiiHWeij/0lwP0Q==", "mGhPr");
    IllIIIIIl[lllIIIIIl[24]] = lllllIIIll("hT628UY4m88=", "LHuiY");
    IllIIIIIl[lllIIIIIl[25]] = lllllIIIll("ZJySiJKIwV8=", "efXrw");
    IllIIIIIl[lllIIIIIl[26]] = lllllIIIll("0CwYS3lhv8Y=", "kGslu");
    IllIIIIIl[lllIIIIIl[27]] = IIIIIlIIll("BCUdGT0mJVYcNyhxVg==", "QKvwR");
    IllIIIIIl[lllIIIIIl[28]] = IIIIIlIIll("ICczPyFC", "bHFQE");
    IllIIIIIl[lllIIIIIl[29]] = IIIIIlIIll("STweTQ==", "ihqmn");
    IllIIIIIl[lllIIIIIl[30]] = IIIIIlIIll("bGIuPTo=", "LJexc");
    IllIIIIIl[lllIIIIIl[31]] = lllllIIIll("/eLzacpQ4MU=", "aDxkT");
    IllIIIIIl[lllIIIIIl[32]] = IIIIIlIIll("FC4n", "pKKqe");
    IllIIIIIl[lllIIIIIl[33]] = IllllIIIll("rzmPFU4Yqi4JXMJJ01NQ9+hhhU4snAR5", "xKVVT");
    IllIIIIIl[lllIIIIIl[34]] = IIIIIlIIll("Gzc0DRN4Fi4VVx4xLwVXFTclFBs9eGM=", "XXAaw");
    IllIIIIIl[lllIIIIIl[35]] = lllllIIIll("pO2BZVLqRWs=", "FvZMc");
    IllIIIIIl[lllIIIIIl[36]] = IllllIIIll("rtXmkr3uusjOwUJmmE0QIw==", "IUlXy");
  }
  
  private static void IlIIIlIIll() {
    lllIIIIIl = new int[49];
    lllIIIIIl[0] = (0x96 ^ 0xAA ^ 0x48 ^ 0x4D) & (0xB ^ 0xD ^ 0xF9 ^ 0xC6 ^ -" ".length());
    lllIIIIIl[1] = " ".length();
    lllIIIIIl[2] = "  ".length();
    lllIIIIIl[3] = "   ".length();
    lllIIIIIl[4] = -"  ".length();
    lllIIIIIl[5] = 0x25 ^ 0x14 ^ 0x7 ^ 0x32;
    lllIIIIIl[6] = 0x2 ^ 0x50 ^ 0xF6 ^ 0xA1;
    lllIIIIIl[7] = "  ".length() ^ 0x7A ^ 0x7E;
    lllIIIIIl[8] = 0x87 ^ 0x80;
    lllIIIIIl[9] = -" ".length();
    lllIIIIIl[10] = 0x4F ^ 0x47;
    lllIIIIIl[11] = 19 + 178 - 180 + 187 ^ 64 + 166 - 141 + 108;
    lllIIIIIl[12] = 0x66 ^ 0x6C;
    lllIIIIIl[13] = 0x3 ^ 0x8;
    lllIIIIIl[14] = 0x75 ^ 0x79;
    lllIIIIIl[15] = 0xD ^ 0x2D ^ 0xAA ^ 0x87;
    lllIIIIIl[16] = 30 + 127 - 64 + 81 ^ 150 + 75 - 110 + 45;
    lllIIIIIl[17] = 0xE6 ^ 0x95 ^ 0x10 ^ 0x6C;
    lllIIIIIl[18] = 0xD0 ^ 0xC0;
    lllIIIIIl[19] = 0x1B ^ 0xA;
    lllIIIIIl[20] = 0xA ^ 0x6D ^ 0xDE ^ 0xAB;
    lllIIIIIl[21] = 0x6E ^ 0x51 ^ 0x35 ^ 0x19;
    lllIIIIIl[22] = 0x69 ^ 0x7D;
    lllIIIIIl[23] = 0x5D ^ 0x48;
    lllIIIIIl[24] = 0x83 ^ 0x95;
    lllIIIIIl[25] = 0xD ^ 0x42 ^ 0xF2 ^ 0xAA;
    lllIIIIIl[26] = 3 + 33 - 24 + 176 ^ 91 + 4 - 11 + 80;
    lllIIIIIl[27] = 0xD6 ^ 0xA1 ^ 0x56 ^ 0x38;
    lllIIIIIl[28] = 0x3A ^ 0x20 ^ (0x95 ^ 0x9F) & (0x88 ^ 0x82 ^ 0xFFFFFFFF);
    lllIIIIIl[29] = 79 + 108 - 87 + 28 ^ 21 + 30 - -100 + 4;
    lllIIIIIl[30] = 17 + 88 - -17 + 24 ^ 116 + 72 - 118 + 72;
    lllIIIIIl[31] = 0x66 ^ 0x16 ^ 0x50 ^ 0x3D;
    lllIIIIIl[32] = 0x25 ^ 0x5C ^ 0x6 ^ 0x61;
    lllIIIIIl[33] = 125 + 42 - -11 + 3 ^ 67 + 19 - 34 + 118;
    lllIIIIIl[34] = 0x74 ^ 0x59 ^ 0x20 ^ 0x2D;
    lllIIIIIl[35] = 0xF8 ^ 0xA3 ^ 0x54 ^ 0x2E;
    lllIIIIIl[36] = 0x80 ^ 0xA2;
    lllIIIIIl[37] = 0x23 ^ 0x0;
    lllIIIIIl[38] = 0xE0 ^ 0xB3;
    lllIIIIIl[39] = -(0xB7 ^ 0x87 ^ 0x61 ^ 0x4E);
    lllIIIIIl[40] = (0xD ^ 0x4E) + (0x25 ^ 0x70) - (0x70 ^ 0x6E) + (0xF8 ^ 0xB2);
    lllIIIIIl[41] = (0xE8 ^ 0xB3) + (0xD ^ 0x5B) - (0xC7 ^ 0xBE) + (0xFD ^ 0x9E);
    lllIIIIIl[42] = (0xCC ^ 0x8E) + (0x4C ^ 0x3E) - 126 + 126 - 122 + 2 + (0xE0 ^ 0x87);
    lllIIIIIl[43] = 0xFF ^ 0xB2;
    lllIIIIIl[44] = 134 + 75 - 147 + 100 + 8 + 78 - 28 + 77 - 127 + 108 - 219 + 116 + (0x77 ^ 0x5B);
    lllIIIIIl[45] = (0xC7 ^ 0x88) + (0x96 ^ 0x8A) - (0x50 ^ 0x5A) + (0x3D ^ 0x3);
    lllIIIIIl[46] = 0x10 ^ 0x7E;
    lllIIIIIl[47] = 95 + 191 - 83 + 24 ^ 69 + 91 - 134 + 134;
    lllIIIIIl[48] = 92 + 88 - 165 + 197 ^ 24 + 67 - 17 + 64;
  }
  
  public String getAlias() {
    return IllIIIIIl[lllIIIIIl[0]];
  }
  
  private static boolean lIlIIlIIll(Exception IIIlIllllIIIlIl, String lllIIllllIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 >= SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  public String getDescription() {
    return IllIIIIIl[lllIIIIIl[1]];
  }
  
  private static String IllllIIIll(String llllIllllIIIlIl, String IlIIlllllIIIlIl) {
    try {
      SecretKeySpec IIlIlllllIIIlIl = new SecretKeySpec(Arrays.copyOf(MessageDigest.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lllIIIIIl[0]]]).digest(IlIIlllllIIIlIl.getBytes(StandardCharsets.UTF_8)), DESEncryptionAlgorithm.lIlllllIlllII[lllIIIIIl[1]]), DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lllIIIIIl[2]]]);
      Cipher IIIIlllllIIIlIl = Cipher.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lllIIIIIl[3]]]);
      IIIIlllllIIIlIl.init(DESEncryptionAlgorithm.lIlllllIlllII[lllIIIIIl[3]], IIlIlllllIIIlIl);
      return new String(IIIIlllllIIIlIl.doFinal(Base64.getDecoder().decode(llllIllllIIIlIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception llIIlllllIIIlIl) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
  
  private static boolean IIlIIlIIll(float IIlllIlllIIIlIl, int llIllIlllIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != SYNTHETIC_LOCAL_VARIABLE_1);
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\command\commands\CmdBind.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */