package com.exploiters.xploitclient.command.commands;

import com.exploiters.xploitclient.command.Command;
import com.exploiters.xploitclient.utils.ExploitLogger;
import com.exploiters.xploitclient.utils.file.ExploitHackFileMang;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Iterator;
import java.util.List;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;
import net.minecraft.class_2246;
import net.minecraft.class_2378;
import net.minecraft.class_2960;

public class CmdSearch extends Command {
  private static boolean lIIllIll(String lIllIIIIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  public void onCommand(String llIIIllIlIIIlll, String[] IlIIIllIlIIIlll) throws Exception {
    (new String[IllIIIl[1]])[IllIIIl[0]] = lIlIIIl[IllIIIl[3]];
    ExploitHackFileMang.createFile(new String[IllIIIl[1]]);
    (new String[IllIIIl[1]])[IllIIIl[0]] = lIlIIIl[IllIIIl[4]];
    List<String> lIIIIllIlIIIlll = ExploitHackFileMang.readFileLines(new String[IllIIIl[1]]);
    "".length();
    System.out.println(lIIIIllIlIIIlll);
    if (!lIIllIll(IlIIIllIlIIIlll[IllIIIl[0]].equalsIgnoreCase(lIlIIIl[IllIIIl[5]])) || IlIllIll(IlIIIllIlIIIlll[IllIIIl[0]].equalsIgnoreCase(lIlIIIl[IllIIIl[6]]))) {
      if (IlIllIll(IlIIIllIlIIIlll[IllIIIl[1]].contains(lIlIIIl[IllIIIl[7]]))) {
        "".length();
        if ("  ".length() <= ((0x90 ^ 0xB8) & (0x76 ^ 0x5E ^ 0xFFFFFFFF)))
          return; 
      } else {
      
      } 
      String lllIIllIlIIIlll = String.valueOf((new StringBuilder()).append(lIlIIIl[IllIIIl[9]]).append(IlIIIllIlIIIlll[IllIIIl[1]].toLowerCase()));
      if (IlIllIll(IlIIIllIlIIIlll[IllIIIl[0]].equalsIgnoreCase(lIlIIIl[IllIIIl[10]]))) {
        if (llIllIll(class_2378.field_11146.method_10223(new class_2960(lllIIllIlIIIlll)), class_2246.field_10124)) {
          ExploitLogger.errorMessage(String.valueOf((new StringBuilder()).append(lIlIIIl[IllIIIl[11]]).append(IlIIIllIlIIIlll[IllIIIl[1]])));
          return;
        } 
        if (IlIllIll(lIIIIllIlIIIlll.contains(lllIIllIlIIIlll))) {
          ExploitLogger.errorMessage(lIlIIIl[IllIIIl[12]]);
          return;
        } 
        (new String[IllIIIl[1]])[IllIIIl[0]] = lIlIIIl[IllIIIl[13]];
        ExploitHackFileMang.appendFile(lllIIllIlIIIlll, new String[IllIIIl[1]]);
        ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(lIlIIIl[IllIIIl[14]]).append(IlIIIllIlIIIlll[IllIIIl[1]])));
        "".length();
        if (((0x0 ^ 0x5D) & (0x65 ^ 0x38 ^ 0xFFFFFFFF)) != 0)
          return; 
      } else if (IlIllIll(IlIIIllIlIIIlll[IllIIIl[0]].equalsIgnoreCase(lIlIIIl[IllIIIl[15]]))) {
        if (IlIllIll(lIIIIllIlIIIlll.contains(lllIIllIlIIIlll))) {
          "".length();
          String IIIlIllIlIIIlll = lIlIIIl[IllIIIl[16]];
          Iterator<String> iterator = lIIIIllIlIIIlll.iterator();
          while (IlIllIll(iterator.hasNext())) {
            String lIIlIllIlIIIlll = iterator.next();
            IIIlIllIlIIIlll = String.valueOf((new StringBuilder()).append(IIIlIllIlIIIlll).append(lIIlIllIlIIIlll).append(lIlIIIl[IllIIIl[17]]));
            "".length();
            if ((0x3B ^ 0x79 ^ 0x1B ^ 0x5D) != (0x48 ^ 0x58 ^ 0x73 ^ 0x67))
              return; 
          } 
          (new String[IllIIIl[1]])[IllIIIl[0]] = lIlIIIl[IllIIIl[18]];
          ExploitHackFileMang.createEmptyFile(new String[IllIIIl[1]]);
          (new String[IllIIIl[1]])[IllIIIl[0]] = lIlIIIl[IllIIIl[19]];
          ExploitHackFileMang.appendFile(IIIlIllIlIIIlll, new String[IllIIIl[1]]);
          ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(lIlIIIl[IllIIIl[20]]).append(IlIIIllIlIIIlll[IllIIIl[1]])));
          "".length();
          if ((0x13 ^ 0x17) == "   ".length())
            return; 
        } else {
          ExploitLogger.errorMessage(String.valueOf((new StringBuilder()).append(lIlIIIl[IllIIIl[21]]).append(IlIIIllIlIIIlll[IllIIIl[1]])));
        } 
      } 
      "".length();
      if ((("   ".length() ^ 0xA ^ 0x2C) & (0xE8 ^ 0x84 ^ 0x44 ^ 0xD ^ -" ".length())) != 0)
        return; 
    } else if (IlIllIll(IlIIIllIlIIIlll[IllIIIl[0]].equalsIgnoreCase(lIlIIIl[IllIIIl[22]]))) {
      (new String[IllIIIl[1]])[IllIIIl[0]] = lIlIIIl[IllIIIl[23]];
      ExploitHackFileMang.createEmptyFile(new String[IllIIIl[1]]);
      ExploitLogger.infoMessage(lIlIIIl[IllIIIl[24]]);
      "".length();
      if (null != null)
        return; 
    } else if (IlIllIll(IlIIIllIlIIIlll[IllIIIl[0]].equalsIgnoreCase(lIlIIIl[IllIIIl[25]]))) {
      String lIlIIllIlIIIlll = lIlIIIl[IllIIIl[26]];
      Iterator<String> iterator = lIIIIllIlIIIlll.iterator();
      while (IlIllIll(iterator.hasNext())) {
        String IllIIllIlIIIlll = iterator.next();
        lIlIIllIlIIIlll = String.valueOf((new StringBuilder()).append(lIlIIllIlIIIlll).append(lIlIIIl[IllIIIl[27]]).append(IllIIllIlIIIlll));
        "".length();
        if (null != null)
          return; 
      } 
      ExploitLogger.infoMessage(lIlIIllIlIIIlll);
    } 
  }
  
  public String getAlias() {
    return lIlIIIl[IllIIIl[0]];
  }
  
  public String getDescription() {
    return lIlIIIl[IllIIIl[1]];
  }
  
  private static void IIIllIll() {
    IllIIIl = new int[40];
    IllIIIl[0] = (0x77 ^ 0x3C ^ 0xF9 ^ 0x81) & (0x12 ^ 0xA ^ 0x8D ^ 0xA6 ^ -" ".length());
    IllIIIl[1] = " ".length();
    IllIIIl[2] = "  ".length();
    IllIIIl[3] = "   ".length();
    IllIIIl[4] = 0x97 ^ 0x9D ^ 0xA7 ^ 0xA9;
    IllIIIl[5] = 50 + 57 - -32 + 44 ^ 66 + 123 - 170 + 159;
    IllIIIl[6] = 0x30 ^ 0x36;
    IllIIIl[7] = 0xF6 ^ 0xA5 ^ 0x1 ^ 0x55;
    IllIIIl[8] = 187 + 6 - 18 + 30 ^ 35 + 72 - 41 + 131;
    IllIIIl[9] = 0xD8 ^ 0xB6 ^ 0x68 ^ 0xF;
    IllIIIl[10] = 0x35 ^ 0x3F;
    IllIIIl[11] = 0x4E ^ 0x45;
    IllIIIl[12] = 0x2A ^ 0x26;
    IllIIIl[13] = 0x8A ^ 0x87;
    IllIIIl[14] = 0x80 ^ 0x8E;
    IllIIIl[15] = 0x7A ^ 0x75;
    IllIIIl[16] = 0xCC ^ 0xC6 ^ 0x25 ^ 0x3F;
    IllIIIl[17] = 0x73 ^ 0x62;
    IllIIIl[18] = 0x2 ^ 0x10;
    IllIIIl[19] = 0x8F ^ 0x9C;
    IllIIIl[20] = 0xD5 ^ 0xAF ^ 0xEF ^ 0x81;
    IllIIIl[21] = 0x17 ^ 0x2;
    IllIIIl[22] = 0x28 ^ 0x17 ^ 0x5B ^ 0x72;
    IllIIIl[23] = 0x8C ^ 0x9B;
    IllIIIl[24] = 133 + 46 - 12 + 9 ^ 15 + 143 - 11 + 21;
    IllIIIl[25] = 0xF6 ^ 0x9D ^ 0x60 ^ 0x12;
    IllIIIl[26] = 0x7B ^ 0x61;
    IllIIIl[27] = 0x29 ^ 0x32;
    IllIIIl[28] = 0xAC ^ 0xB0;
    IllIIIl[29] = 82 + 55 - 102 + 112 ^ 177 + 46 - 126 + 95;
    IllIIIl[30] = -(114 + 32 - 46 + 71 ^ 20 + 87 - -42 + 31);
    IllIIIl[31] = 20 + 118 - -14 + 7 + (0x40 ^ 0x64) - (0x22 ^ 0x2) + (0xB4 ^ 0x95);
    IllIIIl[32] = 47 + 97 - 74 + 85;
    IllIIIl[33] = (0x2A ^ 0x32) + (0x55 ^ 0x26) - (0x51 ^ 0x2F) + 87 + 23 - 43 + 71;
    IllIIIl[34] = 0x19 ^ 0x48 ^ 0xDC ^ 0xC0;
    IllIIIl[35] = 66 + 70 - -20 + 21 + (0x77 ^ 0x25) - (0xF2 ^ 0xBD) + (0x6D ^ 0x70);
    IllIIIl[36] = 126 + 125 - 142 + 50;
    IllIIIl[37] = 0xE7 ^ 0x89;
    IllIIIl[38] = 240 + 91 - 213 + 134 ^ 174 + 157 - 314 + 174;
    IllIIIl[39] = 99 + 26 - 53 + 168 ^ 106 + 70 - 89 + 87;
  }
  
  static {
    IIIllIll();
    lllIlIll();
  }
  
  private static String lIlIlIll(long lIIIlIlIlIIIlll, String IIIlIIlIlIIIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	2	IIIlIIlIlIIIlll	Ljava/lang/String;
    //   119	4	2	llllIIlIlIIIlll	Ljava/lang/Exception;
    //   0	125	2	lIllIIlIlIIIlll	C
    //   0	125	1	IlIIlIlIlIIIlll	F
    //   76	42	3	IIllIIlIlIIIlll	Ljavax/crypto/Cipher;
    //   0	125	1	lIIlIIlIlIIIlll	J
    //   0	125	0	IlIlIIlIlIIIlll	D
    //   0	125	0	lIIIlIlIlIIIlll	J
    //   59	59	2	IIIIlIlIlIIIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	0	llIlIIlIlIIIlll	Ljava/lang/String;
    //   0	125	3	lllIIIlIlIIIlll	F
    //   0	125	3	llIIlIlIlIIIlll	I
    //   0	125	1	IlllIIlIlIIIlll	Ljava/lang/String;
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static boolean IlIllIll(char llllIIIIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String lIIlIIll(short IlIIIIlIlIIIlll, boolean IIIlllIIlIIIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   39: iconst_1
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   56: iconst_2
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/command/commands/CmdSearch.IllIIIl : [I
    //   71: iconst_2
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   107	4	2	IlllllIIlIIIlll	Ljava/lang/Exception;
    //   0	113	1	IlIlllIIlIIIlll	Ljava/lang/Exception;
    //   0	113	2	lIllllIIlIIIlll	Ljava/lang/Exception;
    //   0	113	2	lllIllIIlIIIlll	B
    //   0	113	0	llllllIIlIIIlll	Ljava/lang/String;
    //   47	59	2	llIlllIIlIIIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	1	IIIlllIIlIIIlll	Z
    //   0	113	0	IlIIIIlIlIIIlll	S
    //   0	113	0	lIIlllIIlIIIlll	B
    //   64	42	3	IIllllIIlIIIlll	Ljavax/crypto/Cipher;
    //   0	113	1	lIIIIIlIlIIIlll	Ljava/lang/String;
    //   0	113	3	IIIIIIlIlIIIlll	I
    //   0	113	3	IllIllIIlIIIlll	C
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static void lllIlIll() {
    lIlIIIl = new String[IllIIIl[28]];
    lIlIIIl[IllIIIl[0]] = lIIlIIll("avgelIuXHC4=", "sEPNr");
    lIlIIIl[IllIIIl[1]] = IlIlIIll("NR0BHm8DHAkYLBhZCgYgExIb", "pyhjO");
    lIlIIIl[IllIIIl[2]] = lIlIlIll("n1GrxDe9DUAM4wn8VGY25GqaAFOv5OLN2Ie1JAwvPBVutrFgF7qEumqaAFOv5OLNzMuGjIQMNSVF+2bwZweMZvMOOZ3THtYC", "MZnyq");
    lIlIIIl[IllIIIl[3]] = lIlIlIll("8RTizpHgmtpA+aBlelC0tYTHX/I2+fmY", "WQtZf");
    lIlIIIl[IllIIIl[4]] = lIIlIIll("oq8ya5y07Nse3jM9Qnd3OO3TuRpEWb03", "hTANp");
    lIlIIIl[IllIIIl[5]] = IlIlIIll("KRQy", "HpVUG");
    lIlIIIl[IllIIIl[6]] = IlIlIIll("EwYEKCEE", "aciGW");
    lIlIIIl[IllIIIl[7]] = IlIlIIll("ew==", "AGArx");
    lIlIIIl[IllIIIl[8]] = lIlIlIll("06jX6V5Lc90=", "WUZzB");
    lIlIIIl[IllIIIl[9]] = IlIlIIll("Hx03BCkAFT8VcA==", "rtYaJ");
    lIlIIIl[IllIIIl[10]] = lIlIlIll("knJhUHBAFPo=", "QmPfd");
    lIlIIIl[IllIIIl[11]] = lIIlIIll("bH5Ejvguju4EHWa0+6+cXQ==", "aSQyI");
    lIlIIIl[IllIIIl[12]] = IlIlIIll("CiECGRNoJB5aGSQ/CBscMW0MHhwtKUw=", "HMmzx");
    lIlIIIl[IllIIIl[13]] = lIlIlIll("a1+AuLJVWyGOU3xlwS9ZUMkfYKVOx0gO", "QUFgx");
    lIlIIIl[IllIIIl[14]] = IlIlIIll("IxMXKwZCNR8hAQlNUw==", "bwsNb");
    lIlIIIl[IllIIIl[15]] = lIlIlIll("+lPmug4EdGU=", "ZfnvS");
    lIlIIIl[IllIIIl[16]] = IlIlIIll("", "XIiaa");
    lIlIIIl[IllIIIl[17]] = IlIlIIll("bw==", "elcEK");
    lIlIIIl[IllIIIl[18]] = IlIlIIll("Hi8ZHy8FKBQCLwY5Vhk0GQ==", "mJxmL");
    lIlIIIl[IllIIIl[19]] = lIlIlIll("ajqgaUDMpvkRpxC54jTar2cwghUvi54e", "MpQiJ");
    lIlIIIl[IllIIIl[20]] = IlIlIIll("HRcrNzoqFmYaICARLWJs", "OrFXL");
    lIlIIIl[IllIIIl[21]] = IlIlIIll("AwU8IAJhJzw3SQgHcw8AMh1pYw==", "AiSCi");
    lIlIIIl[IllIIIl[22]] = lIlIlIll("tROa4whG5TM=", "lPPeZ");
    lIlIIIl[IllIIIl[23]] = lIIlIIll("/LfijIdj9E+h9F9cpJTTeFO6A+kOS0Ci", "LUNxE");
    lIlIIIl[IllIIIl[24]] = lIIlIIll("FXY4JSHE1IXvvf/rIOT1viIZaLy5QXCd", "Dvxca");
    lIlIIIl[IllIIIl[25]] = IlIlIIll("LyYRMA==", "CObDq");
    lIlIIIl[IllIIIl[26]] = lIIlIIll("U0Sxcviogtk=", "rwjHB");
    lIlIIIl[IllIIIl[27]] = lIlIlIll("JDxMiEfCI2w=", "sWtuL");
  }
  
  private static String IlIlIIll(String lllllIIIlIIIlll, String IIIIIlIIlIIIlll) {
    String str = new String(Base64.getDecoder().decode(lllllIIIlIIIlll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder llIlIlIIlIIIlll = new StringBuilder();
    char[] IIlIIlIIlIIIlll = IIIIIlIIlIIIlll.toCharArray();
    int llIIIlIIlIIIlll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IllIIIl[0]];
    char[] arrayOfChar1 = str.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IllIIIl[0]];
    while (IlIllIll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lllIIlIIlIIIlll = arrayOfChar1[j];
      "".length();
      llIIIlIIlIIIlll++;
      j++;
      "".length();
      if (IlIllIll((IllIIIl[0] + IllIIIl[29] - IllIIIl[30] + IllIIIl[13] ^ IllIIIl[31] ^ IllIIIl[32]) & (IllIIIl[33] + IllIIIl[34] - IllIIIl[35] + IllIIIl[36] ^ IllIIIl[9] + IllIIIl[37] - IllIIIl[38] + IllIIIl[39] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(llIlIlIIlIIIlll);
  }
  
  public String getSyntax() {
    return lIlIIIl[IllIIIl[2]];
  }
  
  private static boolean llIllIll(String IlIIlIIIlIIIlll, char lIIIlIIIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == SYNTHETIC_LOCAL_VARIABLE_1);
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\command\commands\CmdSearch.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */