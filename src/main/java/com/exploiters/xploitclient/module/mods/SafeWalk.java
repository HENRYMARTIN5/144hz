package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class SafeWalk extends Module {
  private static String lIlIlllllIl(String IIIlIIIlIIIIll, String llIlIIIlIIIIll) {
    IlIlIIIlIIIIll = new String(Base64.getDecoder().decode(IIIlIIIlIIIIll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder IllIlIIlIIIIll = new StringBuilder();
    char[] llllIIIlIIIIll = llIlIIIlIIIIll.toCharArray();
    int IlllIIIlIIIIll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllllIlll[0]];
    char[] arrayOfChar1 = IlIlIIIlIIIIll.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllllIlll[0]];
    while (lIIllllllIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char IlIIlIIlIIIIll = arrayOfChar1[j];
      "".length();
      IlllIIIlIIIIll++;
      j++;
      "".length();
      if (lIIllllllIl((lllllIlll[0] + lllllIlll[4] - lllllIlll[5] + lllllIlll[6] ^ lllllIlll[7] ^ lllllIlll[8]) & (lllllIlll[9] + lllllIlll[10] - lllllIlll[11] + lllllIlll[12] ^ lllllIlll[13] + lllllIlll[14] - lllllIlll[15] + lllllIlll[16] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(IllIlIIlIIIIll);
  }
  
  private static String IIlIlllllIl(String IlIlIlIlIIIIll, Exception lIlIIlIlIIIIll) {
    try {
      SecretKeySpec IllIIlIlIIIIll = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllllIlll[0]]]).digest(lIlIIlIlIIIIll.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllllIlll[2]]]);
      Cipher lllIIlIlIIIIll = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllllIlll[3]]]);
      lllIIlIlIIIIll.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllllIlll[3]], IllIIlIlIIIIll);
      return new String(lllIIlIlIIIIll.doFinal(Base64.getDecoder().decode(IlIlIlIlIIIIll.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception lIIlIlIlIIIIll) {
      IIIlIlIlIIIIll.printStackTrace();
      return null;
    } 
  }
  
  private static boolean lIIllllllIl(boolean IllllllIIIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public SafeWalk() {
    super(IllllIlll[lllllIlll[0]], lllllIlll[1], Category.MOVEMENT, IllllIlll[lllllIlll[2]], new com.exploiters.xploitclient.setting.base.SettingBase[lllllIlll[0]]);
  }
  
  static {
    IIIllllllIl();
    IllIlllllIl();
  }
  
  private static void IIIllllllIl() {
    lllllIlll = new int[17];
    lllllIlll[0] = (0x4B ^ 0x6E ^ 0x7C ^ 0x69) & (0x1A ^ 0xB ^ 0xAA ^ 0x8B ^ -" ".length());
    lllllIlll[1] = -"  ".length();
    lllllIlll[2] = " ".length();
    lllllIlll[3] = "  ".length();
    lllllIlll[4] = 0x19 ^ 0x69 ^ 0x2A ^ 0x9;
    lllllIlll[5] = -(0xF ^ 0x6A ^ 0x63 ^ 0x19);
    lllllIlll[6] = 0x33 ^ 0x3E;
    lllllIlll[7] = 105 + 149 - 67 + 9;
    lllllIlll[8] = (0x30 ^ 0x50) + (0x76 ^ 0x69) - (0xFE ^ 0x91) + 115 + 81 - 87 + 30;
    lllllIlll[9] = (0x41 ^ 0x18) + (0x4A ^ 0x1B) - 121 + 7 - 112 + 130 + 75 + 72 - 37 + 17;
    lllllIlll[10] = 0x7E ^ 0x6E ^ 0xA ^ 0x57;
    lllllIlll[11] = 208 + 147 - 181 + 35;
    lllllIlll[12] = 63 + 139 - 122 + 79;
    lllllIlll[13] = 0xA2 ^ 0xAB;
    lllllIlll[14] = 0x7D ^ 0x13;
    lllllIlll[15] = 0x1 ^ 0x5E ^ 0x63 ^ 0x7F;
    lllllIlll[16] = 0x9C ^ 0xC2;
  }
  
  private static void IllIlllllIl() {
    IllllIlll = new String[lllllIlll[3]];
    IllllIlll[lllllIlll[0]] = IIlIlllllIl("MzJSue0TMI8x71EZfNeOig==", "ixbAR");
    IllllIlll[lllllIlll[2]] = lIlIlllllIl("ETgcOzRiNRw+ZzUtHyAuLCtTJCEkbBEnKCEnAA==", "BLsKG");
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\SafeWalk.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */