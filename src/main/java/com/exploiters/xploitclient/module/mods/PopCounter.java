package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.event.events.EventTick;
import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.utils.ExploitLogger;
import com.google.common.eventbus.Subscribe;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.HashMap;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;
import net.minecraft.class_1937;
import net.minecraft.class_2663;
import net.minecraft.class_742;

public class PopCounter extends Module {
  public void onDisable() {
    super.onDisable();
    this.pops.clear();
  }
  
  public PopCounter() {
    super(lIlIlllIIl[IllIlllIIl[0]], IllIlllIIl[1], Category.COMBAT, lIlIlllIIl[IllIlllIIl[2]], new com.exploiters.xploitclient.setting.base.SettingBase[IllIlllIIl[0]]);
  }
  
  @Subscribe
  public void onReadPacket(Exception IlllIIIlIIIll) {
    if (llllIllllll(IlllIIIlIIIll.getPacket() instanceof class_2663)) {
      class_2663 IlIIlIIlIIIll = (class_2663)IlllIIIlIIIll.getPacket();
      if (IIIIlllllll(IlIIlIIlIIIll.method_11470(), IllIlllIIl[3]))
        handlePop(IlIIlIIlIIIll.method_11469((class_1937)this.mc.field_1687)); 
    } 
  }
  
  private static void lIllIllllll() {
    lIlIlllIIl = new String[IllIlllIIl[23]];
    lIlIlllIIl[IllIlllIIl[0]] = lIlIIllllll("Gik7FQc/KD8zGg==", "JFKVh");
    lIlIlllIIl[IllIlllIIl[2]] = IllIIllllll("5Wwj6FOUTdezpqguwTckT1UJBJ5ENnIP", "uJthb");
    lIlIlllIIl[IllIlllIIl[5]] = lIlIIllllll("w4wg", "kFYSW");
    lIlIlllIIl[IllIlllIIl[6]] = lIIlIllllll("XXw1FNRPTPw=", "brarj");
    lIlIlllIIl[IllIlllIIl[7]] = lIlIIllllll("YsOPSgktMhgWHWI=", "BhsyB");
    lIlIlllIIl[IllIlllIIl[8]] = lIIlIllllll("dIM1GCTsuhg=", "ndpWq");
    lIlIlllIIl[IllIlllIIl[9]] = IllIIllllll("C8aEMPiKtN8=", "fQrBI");
    lIlIlllIIl[IllIlllIIl[10]] = lIlIIllllll("R0HDo00GGRUhGQ==", "vaDtr");
    lIlIlllIIl[IllIlllIIl[11]] = lIlIIllllll("w78e", "XxzEG");
    lIlIlllIIl[IllIlllIIl[12]] = lIlIIllllll("w61M", "JuKVo");
    lIlIlllIIl[IllIlllIIl[13]] = lIlIIllllll("ZMONdwonNBorHmg=", "DjNzH");
    lIlIlllIIl[IllIlllIIl[14]] = IllIIllllll("HJ65ssbtJws=", "FYabR");
    lIlIlllIIl[IllIlllIIl[15]] = lIIlIllllll("p+PcIhW1+bA=", "rQDPS");
    lIlIlllIIl[IllIlllIIl[16]] = lIlIIllllll("WsOdVTonDh8BPQ==", "zzlNH");
    lIlIlllIIl[IllIlllIIl[17]] = lIlIIllllll("w74M", "YjAje");
    lIlIlllIIl[IllIlllIIl[18]] = lIIlIllllll("DEYT/GDn9uI=", "tDOSm");
    lIlIlllIIl[IllIlllIIl[19]] = lIIlIllllll("NDrG85Jekq6Wld9bZu4Uy6nl2ZszUjpO", "mUkzw");
    lIlIlllIIl[IllIlllIIl[20]] = lIIlIllllll("mg9GJVteOlA=", "ibYHU");
    lIlIlllIIl[IllIlllIIl[21]] = lIIlIllllll("jc8i+1bWTGY=", "QTNGd");
    lIlIlllIIl[IllIlllIIl[22]] = lIIlIllllll("67hsM3O/UNWcDjaNdj9NJA==", "wrmqy");
  }
  
  private static boolean llllIllllll(Exception lIIlIlIIIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static void IlllIllllll() {
    IllIlllIIl = new int[35];
    IllIlllIIl[0] = (19 + 27 - 12 + 150 ^ 116 + 36 - 25 + 39) & (185 + 123 - 301 + 209 ^ 130 + 111 - 214 + 171 ^ -" ".length());
    IllIlllIIl[1] = -"  ".length();
    IllIlllIIl[2] = " ".length();
    IllIlllIIl[3] = 0x2C ^ 0xF;
    IllIlllIIl[4] = 0x1B ^ 0x3;
    IllIlllIIl[5] = "  ".length();
    IllIlllIIl[6] = "   ".length();
    IllIlllIIl[7] = 0x45 ^ 0x3C ^ 0xF5 ^ 0x88;
    IllIlllIIl[8] = 0x1C ^ 0x19;
    IllIlllIIl[9] = 0x95 ^ 0xBF ^ 0x6F ^ 0x43;
    IllIlllIIl[10] = 0xB6 ^ 0xB1;
    IllIlllIIl[11] = 0x90 ^ 0x98;
    IllIlllIIl[12] = 0x28 ^ 0x38 ^ 0x8E ^ 0x97;
    IllIlllIIl[13] = 0x2E ^ 0x19 ^ 0xC ^ 0x31;
    IllIlllIIl[14] = 0x2B ^ 0x20;
    IllIlllIIl[15] = 0xC ^ 0x6 ^ 0x4D ^ 0x4B;
    IllIlllIIl[16] = 0x73 ^ 0x7E;
    IllIlllIIl[17] = 0xC ^ 0x2;
    IllIlllIIl[18] = 0x77 ^ 0x78;
    IllIlllIIl[19] = 168 + 185 - 185 + 42 ^ 173 + 8 - 49 + 62;
    IllIlllIIl[20] = 0xAD ^ 0xBC;
    IllIlllIIl[21] = 0x6C ^ 0x7E;
    IllIlllIIl[22] = 0x34 ^ 0x27;
    IllIlllIIl[23] = 0x88 ^ 0x9C;
    IllIlllIIl[24] = 0x95 ^ 0xC2 ^ 0x5C ^ 0x58;
    IllIlllIIl[25] = -(0x23 ^ 0x1E ^ 0x54 ^ 0x76);
    IllIlllIIl[26] = (0x7 ^ 0x76) + 73 + 94 - 143 + 132 - 83 + 11 - 81 + 235 + 92 + 56 - 83 + 110;
    IllIlllIIl[27] = 26 + 23 - -82 + 24;
    IllIlllIIl[28] = 101 + 104 - 101 + 27 + (0x7C ^ 0x1C) - (0x10 ^ 0x69) + (0x35 ^ 0x18);
    IllIlllIIl[29] = 0x26 ^ 0x72 ^ 0x7F ^ 0x66;
    IllIlllIIl[30] = 3 + 112 - -87 + 7;
    IllIlllIIl[31] = (0xEF ^ 0xB2) + (0x7C ^ 0x67) - -(0x3B ^ 0x3F) + (0x3B ^ 0x18);
    IllIlllIIl[32] = 184 + 143 - 293 + 191 ^ 30 + 120 - 141 + 134;
    IllIlllIIl[33] = 203 + 90 - 268 + 207 ^ 145 + 152 - 166 + 40;
    IllIlllIIl[34] = 0x41 ^ 0x20 ^ 0x7E ^ 0x41;
  }
  
  private static boolean lIlIlllllll(float lllIIlIIIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 <= null);
  }
  
  private static boolean llIIlllllll(short lIllIlIIIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String lIIlIllllll(float IlIlllIIIIIll, int lIIlllIIIIIll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/PopCounter.IllIlllIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/PopCounter.IllIlllIIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/PopCounter.IllIlllIIl : [I
    //   51: iconst_5
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/PopCounter.IllIlllIIl : [I
    //   68: bipush #6
    //   70: iaload
    //   71: iaload
    //   72: aaload
    //   73: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   76: astore_3
    //   77: aload_3
    //   78: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   81: getstatic com/exploiters/xploitclient/module/mods/PopCounter.IllIlllIIl : [I
    //   84: bipush #6
    //   86: iaload
    //   87: iaload
    //   88: aload_2
    //   89: invokevirtual init : (ILjava/security/Key;)V
    //   92: new java/lang/String
    //   95: dup
    //   96: aload_3
    //   97: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   100: aload_0
    //   101: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   104: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   107: invokevirtual decode : ([B)[B
    //   110: invokevirtual doFinal : ([B)[B
    //   113: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   116: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   119: areturn
    //   120: astore_2
    //   121: aload_2
    //   122: invokevirtual printStackTrace : ()V
    //   125: aconst_null
    //   126: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   121	4	2	llllllIIIIIll	Ljava/lang/Exception;
    //   0	127	3	lllIllIIIIIll	I
    //   0	127	1	IlllllIIIIIll	Ljava/lang/String;
    //   0	127	1	lIIlllIIIIIll	I
    //   0	127	2	IIIlllIIIIIll	C
    //   77	43	3	IIllllIIIIIll	Ljavax/crypto/Cipher;
    //   0	127	2	lIllllIIIIIll	C
    //   0	127	1	IlIIIIlIIIIll	F
    //   0	127	0	llIlllIIIIIll	Ljava/lang/String;
    //   0	127	0	IlIlllIIIIIll	F
    //   0	127	3	llIIIIlIIIIll	I
    //   0	127	0	lIIIIIlIIIIll	J
    //   59	61	2	IIIIIIlIIIIll	Ljavax/crypto/spec/SecretKeySpec;
    // Exception table:
    //   from	to	target	type
    //   0	119	120	java/lang/Exception
  }
  
  private void handlePop(long lIIIIIIlIIIll) {
    if (lIIIlllllll(this.pops))
      this.pops = new HashMap<>(); 
    if (IlIIlllllll(lIIIIIIlIIIll, this.mc.field_1724))
      return; 
    if (lIIIlllllll(this.pops.get(lIIIIIIlIIIll.method_5820()))) {
      "".length();
      if (llllIllllll(this.impact_toggle_state)) {
        "".length();
        if (((0xF9 ^ 0xB5) & (0x64 ^ 0x28 ^ 0xFFFFFFFF)) >= "   ".length())
          return; 
      } else {
      
      } 
      if (llllIllllll(this.impact_toggle_state)) {
        "".length();
        if (((0x69 ^ 0x71) & (0x24 ^ 0x3C ^ 0xFFFFFFFF)) > "  ".length())
          return; 
      } else {
      
      } 
      ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(lIlIlllIIl[IllIlllIIl[6]]).append(lIIIIIIlIIIll.method_5820()).append(lIlIlllIIl[IllIlllIIl[7]]).append(lIlIlllIIl[IllIlllIIl[9]]).append(lIlIlllIIl[IllIlllIIl[10]])));
      "".length();
      if (null != null)
        return; 
    } else if (llIIlllllll(this.pops.get(lIIIIIIlIIIll.method_5820()))) {
      int lIlIIIIlIIIll = ((Integer)this.pops.get(lIIIIIIlIIIll.method_5820())).intValue();
      "".length();
      if (llllIllllll(this.impact_toggle_state)) {
        "".length();
        if ("  ".length() > "   ".length())
          return; 
      } else {
      
      } 
      if (llllIllllll(this.impact_toggle_state)) {
        "".length();
        if (((0x4B ^ 0x6) & (0x18 ^ 0x55 ^ 0xFFFFFFFF)) != 0)
          return; 
      } else {
      
      } 
      ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(lIlIlllIIl[IllIlllIIl[12]]).append(lIIIIIIlIIIll.method_5820()).append(lIlIlllIIl[IllIlllIIl[13]]).append(lIlIlllIIl[IllIlllIIl[15]]).append(lIlIIIIlIIIll).append(lIlIlllIIl[IllIlllIIl[16]])));
    } 
  }
  
  @Subscribe
  public void onTick(EventTick IlIlIIIlIIIll) {
    // Byte code:
    //   0: aload_0
    //   1: ldc_w com/exploiters/xploitclient/module/mods/UI
    //   4: invokestatic getModule : (Ljava/lang/Class;)Lcom/exploiters/xploitclient/module/Module;
    //   7: getstatic com/exploiters/xploitclient/module/mods/PopCounter.IllIlllIIl : [I
    //   10: iconst_4
    //   11: iaload
    //   12: invokevirtual getSetting : (I)Lcom/exploiters/xploitclient/setting/base/SettingBase;
    //   15: invokevirtual asToggle : ()Lcom/exploiters/xploitclient/setting/base/SettingToggle;
    //   18: getfield state : Z
    //   21: putfield impact_toggle_state : Z
    //   24: aload_0
    //   25: getfield mc : Lnet/minecraft/class_310;
    //   28: getfield field_1687 : Lnet/minecraft/class_638;
    //   31: invokestatic lIIIlllllll : (Ljava/lang/Object;)Z
    //   34: ifeq -> 38
    //   37: return
    //   38: aload_0
    //   39: getfield mc : Lnet/minecraft/class_310;
    //   42: getfield field_1687 : Lnet/minecraft/class_638;
    //   45: invokevirtual method_18456 : ()Ljava/util/List;
    //   48: aload_0
    //   49: <illegal opcode> accept : (Lcom/exploiters/xploitclient/module/mods/PopCounter;)Ljava/util/function/Consumer;
    //   54: invokeinterface forEach : (Ljava/util/function/Consumer;)V
    //   59: return
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	60	0	llIlIIIlIIIll	Lcom/exploiters/xploitclient/module/mods/PopCounter;
    //   0	60	1	IlIlIIIlIIIll	Lcom/exploiters/xploitclient/event/events/EventTick;
    //   0	60	0	lIIlIIIlIIIll	S
  }
  
  private static String lIlIIllllll(String IlIIlIlIIIIll, String IIlIlIlIIIIll) {
    lIIIlIlIIIIll = new String(Base64.getDecoder().decode(IlIIlIlIIIIll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder IllllIlIIIIll = new StringBuilder();
    char[] lllIlIlIIIIll = IIlIlIlIIIIll.toCharArray();
    int IllIlIlIIIIll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IllIlllIIl[0]];
    char[] arrayOfChar1 = lIIIlIlIIIIll.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IllIlllIIl[0]];
    while (llllIllllll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char IlIllIlIIIIll = arrayOfChar1[j];
      "".length();
      IllIlIlIIIIll++;
      j++;
      "".length();
      if (llllIllllll((IllIlllIIl[0] + IllIlllIIl[24] - IllIlllIIl[25] + IllIlllIIl[16] ^ IllIlllIIl[26] ^ IllIlllIIl[27]) & (IllIlllIIl[28] + IllIlllIIl[29] - IllIlllIIl[30] + IllIlllIIl[31] ^ IllIlllIIl[12] + IllIlllIIl[32] - IllIlllIIl[33] + IllIlllIIl[34] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(IllllIlIIIIll);
  }
  
  private static boolean IlIIlllllll(short IIIIllIIIIIll, double llllIlIIIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  static {
    IlllIllllll();
    lIllIllllll();
  }
  
  private static int IIlIlllllll(float paramFloat1, float paramFloat2) {
    return paramFloat1 cmp paramFloat2;
  }
  
  private static boolean IIIIlllllll(float IIlIllIIIIIll, short llIIllIIIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  private static boolean lIIIlllllll(boolean llIlIlIIIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static String IllIIllllll(String IlIIlllIIIIll, Exception lIllIllIIIIll) {
    try {
      SecretKeySpec IlllIllIIIIll = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IllIlllIIl[0]]]).digest(lIllIllIIIIll.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IllIlllIIl[2]]]);
      Cipher llllIllIIIIll = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IllIlllIIl[5]]]);
      llllIllIIIIll.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IllIlllIIl[5]], IlllIllIIIIll);
      return new String(llllIllIIIIll.doFinal(Base64.getDecoder().decode(IlIIlllIIIIll.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception lIIIlllIIIIll) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\PopCounter.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */