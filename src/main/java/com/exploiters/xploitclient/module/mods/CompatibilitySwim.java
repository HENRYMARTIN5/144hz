package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.event.events.EventTick;
import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.module.ModuleManager;
import com.google.common.eventbus.Subscribe;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class CompatibilitySwim extends Module {
  private static String IlIIlIIllll(String llIIlIlIIIlll, String lIlIlIlIIIlll) {
    try {
      SecretKeySpec llllIIlIIIlll = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIIllIIl[0]]]).digest(lIlIlIlIIIlll.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIIllIIl[2]]]);
      Cipher IIIIlIlIIIlll = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIIllIIl[3]]]);
      IIIIlIlIIIlll.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIIllIIl[3]], llllIIlIIIlll);
      return new String(IIIIlIlIIIlll.doFinal(Base64.getDecoder().decode(llIIlIlIIIlll.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception IlIIlIlIIIlll) {
      llIlIIlIIIlll.printStackTrace();
      return null;
    } 
  }
  
  private static void IllIlIIllll() {
    llIIIllIIl = new int[20];
    llIIIllIIl[0] = (0xE1 ^ 0xC2) & (0x4D ^ 0x6E ^ 0xFFFFFFFF);
    llIIIllIIl[1] = -"  ".length();
    llIIIllIIl[2] = " ".length();
    llIIIllIIl[3] = "  ".length();
    llIIIllIIl[4] = -(0x87 ^ 0x9C ^ 0x18 ^ 0x2E);
    llIIIllIIl[5] = 0x3E ^ 0x13;
    llIIIllIIl[6] = "   ".length();
    llIIIllIIl[7] = 0x13 ^ 0x40;
    llIIIllIIl[8] = -(0x7A ^ 0x65);
    llIIIllIIl[9] = 0x1A ^ 0x17;
    llIIIllIIl[10] = (0x88 ^ 0x80) + (0xF7 ^ 0xB1) - -(0xB7 ^ 0x9F) + (0xDF ^ 0x91);
    llIIIllIIl[11] = 15 + 82 - 1 + 59;
    llIIIllIIl[12] = (0x19 ^ 0x4F) + (0x31 ^ 0x3F) - -" ".length() + (0xAD ^ 0x9F);
    llIIIllIIl[13] = 0x2B ^ 0x2D ^ 0xE3 ^ 0xA8;
    llIIIllIIl[14] = 147 + 84 - 210 + 143 + (0x17 ^ 0x24) - (0x30 ^ 0x46) + (0x47 ^ 0x37);
    llIIIllIIl[15] = 129 + 5 - 64 + 89;
    llIIIllIIl[16] = 0x63 ^ 0x5E ^ 0x64 ^ 0x50;
    llIIIllIIl[17] = 0xD0 ^ 0xB8 ^ 0x3D ^ 0x3B;
    llIIIllIIl[18] = 28 + 83 - 90 + 109 ^ 65 + 88 - 130 + 170;
    llIIIllIIl[19] = 95 + 131 - 156 + 85 ^ 32 + 155 - 4 + 14;
  }
  
  private static boolean IlIllIIllll(long IIIlIIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public CompatibilitySwim() {
    super(IlIIIllIIl[llIIIllIIl[0]], llIIIllIIl[1], Category.MISC, IlIIIllIIl[llIIIllIIl[2]], new com.exploiters.xploitclient.setting.base.SettingBase[llIIIllIIl[2]]);
  }
  
  private static String llIIlIIllll(String IIlIIllIIIlll, String IlIIIllIIIlll) {
    String str = new String(Base64.getDecoder().decode(IIlIIllIIIlll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder lIIIlllIIIlll = new StringBuilder();
    char[] IlIlIllIIIlll = IlIIIllIIIlll.toCharArray();
    int lIIlIllIIIlll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[llIIIllIIl[0]];
    char[] arrayOfChar1 = str.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[llIIIllIIl[0]];
    while (IlIllIIllll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lIllIllIIIlll = arrayOfChar1[j];
      "".length();
      lIIlIllIIIlll++;
      j++;
      "".length();
      if (IlIllIIllll((llIIIllIIl[0] + llIIIllIIl[7] - llIIIllIIl[8] + llIIIllIIl[9] ^ llIIIllIIl[10] ^ llIIIllIIl[11]) & (llIIIllIIl[12] + llIIIllIIl[13] - llIIIllIIl[14] + llIIIllIIl[15] ^ llIIIllIIl[16] + llIIIllIIl[17] - llIIIllIIl[18] + llIIIllIIl[19] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(lIIIlllIIIlll);
  }
  
  private static boolean llIllIIllll(String IllIIIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static String IIlIlIIllll(String IIIIIIIlIIlll, long IllllllIIIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/CompatibilitySwim.llIIIllIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/CompatibilitySwim.llIIIllIIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/CompatibilitySwim.llIIIllIIl : [I
    //   51: iconst_3
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/CompatibilitySwim.llIIIllIIl : [I
    //   68: bipush #6
    //   70: iaload
    //   71: iaload
    //   72: aaload
    //   73: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   76: astore_3
    //   77: aload_3
    //   78: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   81: getstatic com/exploiters/xploitclient/module/mods/CompatibilitySwim.llIIIllIIl : [I
    //   84: bipush #6
    //   86: iaload
    //   87: iaload
    //   88: aload_2
    //   89: invokevirtual init : (ILjava/security/Key;)V
    //   92: new java/lang/String
    //   95: dup
    //   96: aload_3
    //   97: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   100: aload_0
    //   101: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   104: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   107: invokevirtual decode : ([B)[B
    //   110: invokevirtual doFinal : ([B)[B
    //   113: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   116: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   119: areturn
    //   120: astore_2
    //   121: aload_2
    //   122: invokevirtual printStackTrace : ()V
    //   125: aconst_null
    //   126: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	127	3	IIlllllIIIlll	F
    //   121	4	2	IIlIIIIlIIlll	Ljava/lang/Exception;
    //   0	127	2	lIlllllIIIlll	Ljava/lang/Exception;
    //   59	61	2	lIlIIIIlIIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	127	3	IIIlIIIlIIlll	I
    //   0	127	0	lllllllIIIlll	I
    //   0	127	0	IIIIIIIlIIlll	Ljava/lang/String;
    //   0	127	1	llIIIIIlIIlll	Ljava/lang/String;
    //   0	127	1	IllllllIIIlll	J
    //   77	43	3	lIIIIIIlIIlll	Ljavax/crypto/Cipher;
    //   0	127	1	lllIIIIlIIlll	F
    //   0	127	0	IllIIIIlIIlll	J
    //   0	127	2	IlIIIIIlIIlll	C
    // Exception table:
    //   from	to	target	type
    //   0	119	120	java/lang/Exception
  }
  
  static {
    IllIlIIllll();
    lIlIlIIllll();
  }
  
  private static int lIIllIIllll(double paramDouble1, double paramDouble2) {
    return paramDouble1 cmp paramDouble2;
  }
  
  private static int lllIlIIllll(double paramDouble1, double paramDouble2) {
    return paramDouble1 cmp paramDouble2;
  }
  
  private static boolean lIlllIIllll(int IIlIIIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 < null);
  }
  
  private static void lIlIlIIllll() {
    IlIIIllIIl = new String[llIIIllIIl[6]];
    IlIIIllIIl[llIIIllIIl[0]] = IlIIlIIllll("DY48wxdhhMGbnQ6QrtvFmw==", "Vnkki");
    IlIIIllIIl[llIIIllIIl[2]] = llIIlIIllll("GBETFAZrFRYWAi4UWhAba1dUSEdrFggWASQFFRVVPwlaFxo/Rg4LHCwBHwtVKggOEBYjAxsN", "Kfzyu");
    IlIIIllIIl[llIIIllIIl[3]] = IIlIlIIllll("9ZO1aB0tgBCe7oIQqHP9xA==", "eFcWu");
  }
  
  @Subscribe
  public void onTick(EventTick IllIlIIlIIlll) {
    double lIlIlIIlIIlll = getSetting(llIIIllIIl[0]).asSlider().getValue() / 3.0D;
    double IIlIlIIlIIlll = this.mc.field_1724.field_6250;
    double llIIlIIlIIlll = this.mc.field_1724.field_6212;
    float IlIIlIIlIIlll = this.mc.field_1724.field_6031;
    if (IlIllIIllll(this.mc.field_1724.method_5681()) && llIllIIllll(ModuleManager.getModule(Speed.class).isToggled()))
      if (llIllIIllll(lllIlIIllll(IIlIlIIlIIlll, 0.0D)) && llIllIIllll(lllIlIIllll(llIIlIIlIIlll, 0.0D))) {
        this.mc.field_1724.method_18800(0.0D, (this.mc.field_1724.method_18798()).field_1351, 0.0D);
        "".length();
        if (-" ".length() != -" ".length())
          return; 
      } else {
        if (IlIllIIllll(lllIlIIllll(IIlIlIIlIIlll, 0.0D))) {
          if (IIlllIIllll(lllIlIIllll(llIIlIIlIIlll, 0.0D))) {
            if (IIlllIIllll(lllIlIIllll(IIlIlIIlIIlll, 0.0D))) {
              "".length();
              if (" ".length() <= -" ".length())
                return; 
            } else {
            
            } 
            IlIIlIIlIIlll += llIIIllIIl[5];
            "".length();
            if ((0x4B ^ 0x4E) <= 0)
              return; 
          } else if (lIlllIIllll(lIIllIIllll(llIIlIIlIIlll, 0.0D))) {
            if (IIlllIIllll(lllIlIIllll(IIlIlIIlIIlll, 0.0D))) {
              "".length();
              if ("  ".length() < 0)
                return; 
            } else {
            
            } 
            IlIIlIIlIIlll += llIIIllIIl[4];
          } 
          llIIlIIlIIlll = 0.0D;
          if (IIlllIIllll(lllIlIIllll(IIlIlIIlIIlll, 0.0D))) {
            IIlIlIIlIIlll = 1.0D;
            "".length();
            if (((85 + 24 - -51 + 33 ^ 47 + 36 - 62 + 133) & (0xC0 ^ 0xA6 ^ 0xA0 ^ 0x9D ^ -" ".length())) >= (0x93 ^ 0x85 ^ 0x70 ^ 0x62))
              return; 
          } else if (lIlllIIllll(lIIllIIllll(IIlIlIIlIIlll, 0.0D))) {
            IIlIlIIlIIlll = -1.0D;
          } 
        } 
        this.mc.field_1724.method_18800(IIlIlIIlIIlll * lIlIlIIlIIlll * Math.cos(Math.toRadians((IlIIlIIlIIlll + 90.0F))) + llIIlIIlIIlll * lIlIlIIlIIlll * Math.sin(Math.toRadians((IlIIlIIlIIlll + 90.0F))), (this.mc.field_1724.method_18798()).field_1351, IIlIlIIlIIlll * lIlIlIIlIIlll * Math.sin(Math.toRadians((IlIIlIIlIIlll + 90.0F))) - llIIlIIlIIlll * lIlIlIIlIIlll * Math.cos(Math.toRadians((IlIIlIIlIIlll + 90.0F))));
      }  
  }
  
  private static boolean IIlllIIllll(int IlIIIIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 > null);
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\CompatibilitySwim.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */