package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.event.events.EventEntityRender;
import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.module.ModuleManager;
import com.exploiters.xploitclient.utils.ExploitLogger;
import com.google.common.eventbus.Subscribe;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Iterator;
import java.util.List;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import net.minecraft.class_1297;

public class DonkeyAlert extends Module {
  static {
    lIllIl();
    lllIIl();
  }
  
  private static String IIlIIl(String llIlIlIIlIlllll, float lIIlIlIIlIlllll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   51: iconst_4
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   68: iconst_5
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   83: iconst_5
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	0	lIIIllIIlIlllll	J
    //   0	125	2	lIllIlIIlIlllll	C
    //   0	125	1	IlIIllIIlIlllll	F
    //   0	125	3	lllIIlIIlIlllll	F
    //   0	125	0	llIlIlIIlIlllll	Ljava/lang/String;
    //   0	125	0	IlIlIlIIlIlllll	B
    //   0	125	1	lIIlIlIIlIlllll	F
    //   119	4	2	llllIlIIlIlllll	Ljava/lang/Exception;
    //   0	125	3	llIIllIIlIlllll	I
    //   0	125	1	IlllIlIIlIlllll	Ljava/lang/String;
    //   0	125	2	IIIlIlIIlIlllll	I
    //   59	59	2	IIIIllIIlIlllll	Ljavax/crypto/spec/SecretKeySpec;
    //   76	42	3	IIllIlIIlIlllll	Ljavax/crypto/Cipher;
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static void lllIIl() {
    lIIIl = new String[llIIl[18]];
    lIIIl[llIIl[0]] = IIlIIl("OMwQAyswNyz1z+CFqZv/SA==", "IytWe");
    lIIIl[llIIl[2]] = lIlIIl("LRYnMBcfWjstFkwTJGICTB4tLAgJA2IjExwfIzAQTBMsYhoDDzBiEQkUJicRTB4rMRcNFCEn", "lzBBc");
    lIIIl[llIIl[4]] = IllIIl("4OvLk9t4oTk=", "uVFWM");
    lIIIl[llIIl[5]] = lIlIIl("", "rOwQH");
    lIIIl[llIIl[6]] = IIlIIl("n0kEZTiAIyM=", "WcaaW");
    lIIIl[llIIl[7]] = IllIIl("WMyRCkni5HA=", "SsNGQ");
    lIIIl[llIIl[8]] = lIlIIl("US19ag==", "qwGJY");
    lIIIl[llIIl[9]] = lIlIIl("w6kT", "NubrR");
    lIIIl[llIIl[10]] = IIlIIl("2DcsQ8Hn65I=", "UhsCJ");
    lIIIl[llIIl[12]] = IIlIIl("QFAYPlbIhc8nx8xKO8xvtyvxzDfzGjiO", "EhnSC");
    lIIIl[llIIl[13]] = IllIIl("fdER3m5wvF83ZPRPbe/BYfkKBUmFSTuj", "BZbJL");
    lIIIl[llIIl[14]] = IIlIIl("2b62hIQr6h+LAHkuxPjTR9o2MgewMMl4", "eXOxU");
    lIIIl[llIIl[15]] = IIlIIl("8v9WeMNVLUSxIH/XVWzAqAJUhJvKj6G1", "eSvtX");
    lIIIl[llIIl[16]] = lIlIIl("LBwiIyVKPzssLAtSdxV7Sg==", "jsWMA");
    lIIIl[llIIl[17]] = lIlIIl("DR0WJSxrPxYnLWpSO3Fo", "KrcKH");
  }
  
  private static void lIllIl() {
    llIIl = new int[30];
    llIIl[0] = (134 + 29 - 58 + 46 ^ 44 + 180 - 59 + 18) & (28 + 127 - 29 + 55 ^ 54 + 22 - 32 + 105 ^ -" ".length());
    llIIl[1] = -"  ".length();
    llIIl[2] = " ".length();
    llIIl[3] = 0xAD ^ 0xB5;
    llIIl[4] = "  ".length();
    llIIl[5] = "   ".length();
    llIIl[6] = 0x9A ^ 0x9E;
    llIIl[7] = 0x20 ^ 0x4E ^ 0x52 ^ 0x39;
    llIIl[8] = 0x14 ^ 0x66 ^ 0x14 ^ 0x60;
    llIIl[9] = 0x24 ^ 0x5D ^ 0xBA ^ 0xC4;
    llIIl[10] = 0x30 ^ 0x38;
    llIIl[11] = -" ".length();
    llIIl[12] = 0xCE ^ 0xC7;
    llIIl[13] = 0x3 ^ 0x9;
    llIIl[14] = 0x9A ^ 0x91;
    llIIl[15] = 95 + 84 - 131 + 140 ^ 81 + 0 - -27 + 68;
    llIIl[16] = 0xB2 ^ 0x91 ^ 0xB7 ^ 0x99;
    llIIl[17] = 0x5B ^ 0x55;
    llIIl[18] = 0xA6 ^ 0xA9;
    llIIl[19] = 0xEE ^ 0xBD;
    llIIl[20] = -(0x1B ^ 0x30 ^ 0x9E ^ 0xAA);
    llIIl[21] = (0xAC ^ 0xA7) + 19 + 110 - 57 + 71 - (0xBB ^ 0x91) + (0x58 ^ 0xC);
    llIIl[22] = 125 + 1 - 34 + 63;
    llIIl[23] = 29 + 0 - -91 + 31;
    llIIl[24] = 78 + 22 - 53 + 153 ^ 80 + 90 - 133 + 96;
    llIIl[25] = (0x42 ^ 0x5D) + (0xAB ^ 0x90) - -(0x50 ^ 0x30) + (0x53 ^ 0x44);
    llIIl[26] = (0x31 ^ 0x4) + (0xAB ^ 0xB9) - (0x64 ^ 0x57) + 117 + 133 - 204 + 93;
    llIIl[27] = 0xE9 ^ 0x87;
    llIIl[28] = 0x19 ^ 0x24 ^ 0x21 ^ 0x5F;
    llIIl[29] = 227 + 31 - 197 + 173 ^ 133 + 97 - 198 + 148;
  }
  
  @Subscribe
  public void onLivingRender(EventEntityRender.Render IIlIlllIlIlllll) {
    if (IlllIl(this.mc.field_1687))
      return; 
    Iterator<class_1297> iterator = this.mc.field_1687.method_18112().iterator();
    while (llllIl(iterator.hasNext())) {
      class_1297 IllIlllIlIlllll = iterator.next();
      if (llllIl(IllIlllIlIlllll instanceof net.minecraft.class_1492) && IIIIll(this.mob_uuids.toString().contains(IllIlllIlIlllll.method_5845()))) {
        boolean IIIllllIlIlllll = (ModuleManager.getModule(UI.class).getSetting(llIIl[3]).asToggle()).state;
        if (llllIl(IIIllllIlIlllll)) {
          "".length();
          if (null != null)
            return; 
        } else {
        
        } 
        if (llllIl(IIIllllIlIlllll)) {
          "".length();
          if (null != null)
            return; 
        } else {
        
        } 
        if (llllIl(IIIllllIlIlllll)) {
          "".length();
          if (null != null)
            return; 
        } else {
        
        } 
        String lllIlllIlIlllll = String.valueOf((new StringBuilder()).append(lIIIl[llIIl[5]]).append((int)IllIlllIlIlllll.method_23317()).append(lIIIl[llIIl[7]]).append(lIIIl[llIIl[8]]).append(lIIIl[llIIl[10]]).append((int)IllIlllIlIlllll.method_23321()));
        String str1 = IllIlllIlIlllll.method_5864().toString();
        int i = llIIl[11];
        switch (str1.hashCode()) {
          case -1636028344:
            if (llllIl(str1.equals(lIIIl[llIIl[12]]))) {
              i = llIIl[0];
              "".length();
              if (null != null)
                return; 
            } 
            break;
          case 785795241:
            if (llllIl(str1.equals(lIIIl[llIIl[13]]))) {
              i = llIIl[2];
              "".length();
              if (null != null)
                return; 
            } 
            break;
          case 1687954989:
            if (llllIl(str1.equals(lIIIl[llIIl[14]])))
              i = llIIl[4]; 
            break;
        } 
        switch (i) {
          case 0:
            ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(lIIIl[llIIl[15]]).append(lllIlllIlIlllll)));
            "".length();
            if (" ".length() > " ".length())
              return; 
            break;
          case 1:
            ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(lIIIl[llIIl[16]]).append(lllIlllIlIlllll)));
            "".length();
            if (" ".length() < 0)
              return; 
            break;
          case 2:
            ExploitLogger.infoMessage(String.valueOf((new StringBuilder()).append(lIIIl[llIIl[17]]).append(lllIlllIlIlllll)));
            break;
        } 
        "".length();
      } 
      "".length();
      if (-(0x4F ^ 0x4A) >= 0)
        return; 
    } 
  }
  
  private static String lIlIIl(float IIIIIIlIlIlllll, String IIlIIIlIlIlllll) {
    // Byte code:
    //   0: new java/lang/String
    //   3: dup
    //   4: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   7: aload_0
    //   8: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   11: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   14: invokevirtual decode : ([B)[B
    //   17: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   20: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   23: astore_0
    //   24: new java/lang/StringBuilder
    //   27: dup
    //   28: invokespecial <init> : ()V
    //   31: astore_2
    //   32: aload_1
    //   33: invokevirtual toCharArray : ()[C
    //   36: astore_3
    //   37: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   40: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   43: iconst_0
    //   44: iaload
    //   45: iaload
    //   46: istore #4
    //   48: aload_0
    //   49: invokevirtual toCharArray : ()[C
    //   52: astore #5
    //   54: aload #5
    //   56: arraylength
    //   57: istore #6
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   62: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   65: iconst_0
    //   66: iaload
    //   67: iaload
    //   68: istore #7
    //   70: iload #7
    //   72: iload #6
    //   74: invokestatic lIlIlIIlIlIlII : (II)Z
    //   77: invokestatic llllIl : (I)Z
    //   80: ifeq -> 239
    //   83: aload #5
    //   85: iload #7
    //   87: caload
    //   88: istore #8
    //   90: aload_2
    //   91: iload #8
    //   93: aload_3
    //   94: iload #4
    //   96: aload_3
    //   97: arraylength
    //   98: irem
    //   99: caload
    //   100: ixor
    //   101: i2c
    //   102: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   105: ldc ''
    //   107: invokevirtual length : ()I
    //   110: pop2
    //   111: iinc #4, 1
    //   114: iinc #7, 1
    //   117: ldc ''
    //   119: invokevirtual length : ()I
    //   122: ldc ''
    //   124: invokevirtual length : ()I
    //   127: pop2
    //   128: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   131: iconst_0
    //   132: iaload
    //   133: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   136: bipush #19
    //   138: iaload
    //   139: iadd
    //   140: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   143: bipush #20
    //   145: iaload
    //   146: isub
    //   147: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   150: bipush #16
    //   152: iaload
    //   153: iadd
    //   154: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   157: bipush #21
    //   159: iaload
    //   160: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   163: bipush #22
    //   165: iaload
    //   166: ixor
    //   167: ixor
    //   168: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   171: bipush #23
    //   173: iaload
    //   174: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   177: bipush #24
    //   179: iaload
    //   180: iadd
    //   181: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   184: bipush #25
    //   186: iaload
    //   187: isub
    //   188: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   191: bipush #26
    //   193: iaload
    //   194: iadd
    //   195: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   198: bipush #12
    //   200: iaload
    //   201: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   204: bipush #27
    //   206: iaload
    //   207: iadd
    //   208: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   211: bipush #28
    //   213: iaload
    //   214: isub
    //   215: getstatic com/exploiters/xploitclient/module/mods/DonkeyAlert.llIIl : [I
    //   218: bipush #29
    //   220: iaload
    //   221: iadd
    //   222: ixor
    //   223: ldc ' '
    //   225: invokevirtual length : ()I
    //   228: ineg
    //   229: ixor
    //   230: iand
    //   231: invokestatic llllIl : (I)Z
    //   234: ifeq -> 70
    //   237: aconst_null
    //   238: areturn
    //   239: aload_2
    //   240: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   243: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	244	5	llIlllIIlIlllll	J
    //   0	244	1	llIIIIlIlIlllll	Ljava/lang/String;
    //   0	244	8	llllIIlIlIlllll	S
    //   0	244	0	IlIIIIlIlIlllll	Ljava/lang/String;
    //   0	244	4	IIllllIIlIlllll	S
    //   0	244	1	IIlIIIlIlIlllll	Ljava/lang/String;
    //   0	244	3	lIllIIlIlIlllll	J
    //   0	244	7	lIlIIIlIlIlllll	D
    //   0	244	8	IIIlllIIlIlllll	S
    //   0	244	2	IlllllIIlIlllll	F
    //   48	196	4	IllIIIlIlIlllll	I
    //   90	24	8	IlIlIIlIlIlllll	C
    //   0	244	3	lIllllIIlIlllll	Ljava/lang/Exception;
    //   32	212	2	IlllIIlIlIlllll	Ljava/lang/StringBuilder;
    //   0	244	0	IIIIIIlIlIlllll	F
    //   0	244	1	llllllIIlIlllll	I
    //   0	244	6	lIIlIIlIlIlllll	S
    //   0	244	6	IlIlllIIlIlllll	I
    //   0	244	7	lIIlllIIlIlllll	I
    //   0	244	0	lIIIIIlIlIlllll	Ljava/lang/String;
    //   0	244	5	IIIlIIlIlIlllll	F
    //   37	207	3	lllIIIlIlIlllll	[C
    //   0	244	4	llIlIIlIlIlllll	S
    //   0	244	2	IIllIIlIlIlllll	F
  }
  
  private static String IllIIl(String IlIIIllIlIlllll, String IIlIIllIlIlllll) {
    try {
      SecretKeySpec IllllIlIlIlllll = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIl[0]]]).digest(IIlIIllIlIlllll.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIl[2]]]);
      Cipher lllllIlIlIlllll = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIl[4]]]);
      lllllIlIlIlllll.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[llIIl[4]], IllllIlIlIlllll);
      return new String(lllllIlIlIlllll.doFinal(Base64.getDecoder().decode(IlIIIllIlIlllll.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception lIIIIllIlIlllll) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
  
  private static boolean llllIl(Exception llIIIlIIlIlllll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public DonkeyAlert() {
    super(lIIIl[llIIl[0]], llIIl[1], Category.CHAT, lIIIl[llIIl[2]], new com.exploiters.xploitclient.setting.base.SettingBase[llIIl[0]]);
  }
  
  private static boolean IIIIll(Exception lIIIIlIIlIlllll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static boolean IlllIl(char lIlIIlIIlIlllll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  public void onDisable() {
    super.onDisable();
    this.mob_uuids.clear();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\DonkeyAlert.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */