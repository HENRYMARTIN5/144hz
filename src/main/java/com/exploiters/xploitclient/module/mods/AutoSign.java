package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.event.events.EventOpenScreen;
import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.utils.FabricReflect;
import com.google.common.eventbus.Subscribe;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import net.minecraft.class_2596;
import net.minecraft.class_2625;
import net.minecraft.class_2877;
import net.minecraft.class_498;

public class AutoSign extends Module {
  private static boolean IlIIllIIlll(float IllIlllIlIIIIl, int lIlIlllIlIIIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 < SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  private static boolean lIIIllIIlll(byte llIIlllIlIIIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public void onDisable() {
    ((AutoSign)super).text = new String[IIllIIlIIl[0]];
    super.onDisable();
  }
  
  @Subscribe
  public void onOpenScreen(EventOpenScreen IlIIIlIllIIIIl) {
    if (IlIIllIIlll(this.text.length, IIllIIlIIl[4]))
      return; 
    if (lIIIllIIlll(IlIIIlIllIIIIl.getScreen() instanceof class_498)) {
      IlIIIlIllIIIIl.setCancelled(IIllIIlIIl[2]);
      if (lIIIllIIlll((getSetting(IIllIIlIIl[0]).asToggle()).state)) {
        this.text = new String[IIllIIlIIl[0]];
        while (IlIIllIIlll(this.text.length, IIllIIlIIl[5])) {
          IntStream IllIIlIllIIIIl = (new Random()).ints(IIllIIlIIl[0], IIllIIlIIl[6]);
          this.text = ((String)IllIIlIllIIIIl.limit(1000L).<CharSequence>mapToObj(llIllIIllIIIIl -> String.valueOf((char)llIllIIllIIIIl)).collect(Collectors.joining())).split(llIlllIIIl[IIllIIlIIl[4]]);
          "".length();
          if (" ".length() >= "   ".length())
            return; 
        } 
      } 
      class_498 lIlIIlIllIIIIl = (class_498)IlIIIlIllIIIIl.getScreen();
      class_2625 IIlIIlIllIIIIl = (class_2625)FabricReflect.getFieldValue(lIlIIlIllIIIIl, llIlllIIIl[IIllIIlIIl[5]], llIlllIIIl[IIllIIlIIl[7]]);
      this.mc.field_1724.field_3944.method_2883((class_2596)new class_2877(IIlIIlIllIIIIl.method_11016(), this.text[IIllIIlIIl[0]], this.text[IIllIIlIIl[2]], this.text[IIllIIlIIl[3]], this.text[IIllIIlIIl[4]]));
    } 
  }
  
  private static void IlIIlIIIlll() {
    llIlllIIIl = new String[IIllIIlIIl[8]];
    llIlllIIIl[IIllIIlIIl[0]] = IlllIIIIlll("k/9kqpBUJYwSYohiV0JG1Q==", "QOyRP");
    llIlllIIIl[IIllIIlIIl[2]] = IlllIIIIlll("bGDZkagOn97SRETzosyuTHwQx8TkeOnnGpJ4hSPMi/w=", "BAqwe");
    llIlllIIIl[IIllIIlIIl[3]] = IlllIIIIlll("EZRL7fIHv5A=", "xGRVt");
    llIlllIIIl[IIllIIlIIl[4]] = llllIIIIlll("C6wFK7SVfwtSDWXjcAVkNw==", "idrOt");
    llIlllIIIl[IIllIIlIIl[5]] = llllIIIIlll("o4mZ1ltCW6kBCK0u+5uZvA==", "oeIcm");
    llIlllIIIl[IIllIIlIIl[7]] = llllIIIIlll("Pt6pBbn84YY=", "sWmtM");
  }
  
  @Subscribe
  public void sendPacket(float llIlIlIllIIIIl) {
    if (lIIIllIIlll(llIlIlIllIIIIl.getPacket() instanceof class_2877) && IlIIllIIlll(this.text.length, IIllIIlIIl[4]))
      this.text = ((class_2877)llIlIlIllIIIIl.getPacket()).method_12508(); 
  }
  
  private static String IlllIIIIlll(String IlllIIIllIIIIl, float lIlIlIIllIIIIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   51: iconst_3
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   68: iconst_4
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   83: iconst_4
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	1	lIIIlIIllIIIIl	Ljava/lang/String;
    //   119	4	2	IlIIlIIllIIIIl	Ljava/lang/Exception;
    //   0	125	2	llIlIIIllIIIIl	F
    //   0	125	0	IIlIlIIllIIIIl	J
    //   59	59	2	llIIlIIllIIIIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	3	IlIlIIIllIIIIl	F
    //   0	125	2	IIIIlIIllIIIIl	C
    //   0	125	3	IllIlIIllIIIIl	I
    //   0	125	1	lIlIlIIllIIIIl	F
    //   76	42	3	llllIIIllIIIIl	Ljavax/crypto/Cipher;
    //   0	125	0	IlllIIIllIIIIl	Ljava/lang/String;
    //   0	125	0	lIllIIIllIIIIl	J
    //   0	125	1	IIllIIIllIIIIl	B
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  public AutoSign() {
    // Byte code:
    //   0: aload_0
    //   1: getstatic com/exploiters/xploitclient/module/mods/AutoSign.llIlllIIIl : [Ljava/lang/String;
    //   4: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   7: iconst_0
    //   8: iaload
    //   9: aaload
    //   10: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   13: iconst_1
    //   14: iaload
    //   15: getstatic com/exploiters/xploitclient/module/Category.PLAYER : Lcom/exploiters/xploitclient/module/Category;
    //   18: getstatic com/exploiters/xploitclient/module/mods/AutoSign.llIlllIIIl : [Ljava/lang/String;
    //   21: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   24: iconst_2
    //   25: iaload
    //   26: aaload
    //   27: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   30: iconst_2
    //   31: iaload
    //   32: anewarray com/exploiters/xploitclient/setting/base/SettingBase
    //   35: dup
    //   36: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   39: iconst_0
    //   40: iaload
    //   41: new com/exploiters/xploitclient/setting/base/SettingToggle
    //   44: dup
    //   45: getstatic com/exploiters/xploitclient/module/mods/AutoSign.llIlllIIIl : [Ljava/lang/String;
    //   48: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   51: iconst_3
    //   52: iaload
    //   53: aaload
    //   54: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   57: iconst_0
    //   58: iaload
    //   59: invokespecial <init> : (Ljava/lang/String;Z)V
    //   62: aastore
    //   63: invokespecial <init> : (Ljava/lang/String;ILcom/exploiters/xploitclient/module/Category;Ljava/lang/String;[Lcom/exploiters/xploitclient/setting/base/SettingBase;)V
    //   66: aload_0
    //   67: getstatic com/exploiters/xploitclient/module/mods/AutoSign.IIllIIlIIl : [I
    //   70: iconst_0
    //   71: iaload
    //   72: anewarray java/lang/String
    //   75: putfield text : [Ljava/lang/String;
    //   78: return
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	79	0	lIlIllIllIIIIl	Lcom/exploiters/xploitclient/module/mods/AutoSign;
    //   0	79	0	IIlIllIllIIIIl	F
  }
  
  static {
    llllIlIIlll();
    IlIIlIIIlll();
  }
  
  private static void llllIlIIlll() {
    IIllIIlIIl = new int[9];
    IIllIIlIIl[0] = (0x7C ^ 0x4E ^ 0x5F ^ 0x77) & (68 + 114 - 16 + 9 ^ 45 + 178 - 137 + 95 ^ -" ".length());
    IIllIIlIIl[1] = -"  ".length();
    IIllIIlIIl[2] = " ".length();
    IIllIIlIIl[3] = "  ".length();
    IIllIIlIIl[4] = "   ".length();
    IIllIIlIIl[5] = 0x68 ^ 0x44 ^ 0x4B ^ 0x63;
    IIllIIlIIl[6] = 0xFFFFFFFF & 0x10FFFF;
    IIllIIlIIl[7] = 0x53 ^ 0x56;
    IIllIIlIIl[8] = 0x58 ^ 0x5E;
  }
  
  private static String llllIIIIlll(String IlIIIIIllIIIIl, Exception lIlllllIlIIIIl) {
    try {
      SecretKeySpec IllllllIlIIIIl = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IIllIIlIIl[0]]]).digest(lIlllllIlIIIIl.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IIllIIlIIl[2]]]);
      Cipher lllllllIlIIIIl = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IIllIIlIIl[3]]]);
      lllllllIlIIIIl.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[IIllIIlIIl[3]], IllllllIlIIIIl);
      return new String(lllllllIlIIIIl.doFinal(Base64.getDecoder().decode(IlIIIIIllIIIIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception lIIIIIIllIIIIl) {
      IlIllllIlIIIIl.printStackTrace();
      return null;
    } 
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\AutoSign.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */