package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.XploitClient;
import com.exploiters.xploitclient.event.events.EventTick;
import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import com.google.common.eventbus.Subscribe;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.Iterator;
import java.util.Objects;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;
import net.minecraft.class_2561;
import net.minecraft.class_640;

public class TablistTweaks extends Module {
  private static boolean lIIIllIl(byte lllllllIIlIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String IlIlIlIl(long IllllIIlIlIIlll, char IlIllIIlIlIIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   51: iconst_3
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   68: iconst_4
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   83: iconst_4
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	0	IIIllIIlIlIIlll	Ljava/lang/String;
    //   119	4	2	IIlllIIlIlIIlll	Ljava/lang/Exception;
    //   59	59	2	lIlllIIlIlIIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	1	llIllIIlIlIIlll	Ljava/lang/String;
    //   0	125	0	IllllIIlIlIIlll	J
    //   0	125	2	IlIllIIlIlIIlll	C
    //   76	42	3	lIIllIIlIlIIlll	Ljavax/crypto/Cipher;
    //   0	125	2	lIlIlIIlIlIIlll	I
    //   0	125	0	lllIlIIlIlIIlll	C
    //   0	125	1	lllllIIlIlIIlll	F
    //   0	125	1	IllIlIIlIlIIlll	B
    //   0	125	3	IIlIlIIlIlIIlll	B
    //   0	125	3	IIIIIlIlIlIIlll	I
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static boolean IIIIllIl(boolean lIIIIIIlIlIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  @Subscribe
  public void tick(EventTick lIIlIIllIlIIlll) {
    assert !IIIIllIl(this.mc.field_1724);
    if (llllIlIl(this.mc.field_1724.field_6012 % Illlll[7])) {
      Iterator<class_640> iterator = this.mc.field_1724.field_3944.method_2880().iterator();
      while (lIIIllIl(iterator.hasNext())) {
        class_640 llIlIIllIlIIlll = iterator.next();
        if (lIIIllIl(XploitClient.friendMang.has(llIlIIllIlIIlll.method_2966().getName())) && lIIIllIl((getSetting(Illlll[0]).asToggle()).state)) {
          if (lIIIllIl((getSetting(Illlll[2]).asToggle()).state)) {
            "".length();
            if ((0xBD ^ 0xB9) <= 0)
              return; 
          } else {
          
          } 
          ((class_640)Objects.<class_640>requireNonNull(this.mc.field_1724.field_3944.method_2874(llIlIIllIlIIlll.method_2966().getName()))).method_2962(class_2561.method_30163(String.valueOf((new StringBuilder()).append(lIllll[Illlll[8]]).append(llIlIIllIlIIlll.method_2966().getName()).append(lIllll[Illlll[11]]))));
          "".length();
          if ((" ".length() ^ 0x63 ^ 0x67) <= 0)
            return; 
        } else {
          if (lIIIllIl((getSetting(Illlll[2]).asToggle()).state)) {
            "".length();
            if (null != null)
              return; 
          } else {
          
          } 
          ((class_640)Objects.<class_640>requireNonNull(this.mc.field_1724.field_3944.method_2874(llIlIIllIlIIlll.method_2966().getName()))).method_2962(class_2561.method_30163(String.valueOf((new StringBuilder()).append(lIllll[Illlll[7]]).append(llIlIIllIlIIlll.method_2966().getName()).append(lIllll[Illlll[14]]))));
        } 
        "".length();
        if (((0x7D ^ 0x45) & (0x39 ^ 0x1 ^ 0xFFFFFFFF)) < 0)
          return; 
      } 
    } 
  }
  
  public TablistTweaks() {
    super(lIllll[Illlll[0]], Illlll[1], Category.RENDER, lIllll[Illlll[2]], new com.exploiters.xploitclient.setting.base.SettingBase[Illlll[3]]);
  }
  
  private static void lIllIlIl() {
    lIllll = new String[Illlll[15]];
    lIllll[Illlll[0]] = IlIlIlIl("NPYjck3Pf2GZTrSmOGY5OQ==", "yguKa");
    lIllll[Illlll[2]] = llIlIlIl("FyIIITgwN0oAPicqDCQyIjcDIj8w", "CCjMQ");
    lIllll[Illlll[3]] = IlIlIlIl("iiwbyO8nzcxsJqSkS/Ie6Q==", "pjUru");
    lIllll[Illlll[4]] = IlIlIlIl("63i1xRcgdnOMi+9ubb7S73YCOS6ygZp9HinUZEV6I2TYN41drmfGtQ==", "DmHxm");
    lIllll[Illlll[5]] = IlIlIlIl("+QcsVZ5ukgc=", "LbUQA");
    lIllll[Illlll[6]] = IIllIlIl("8sZNDbIljf1AOUhiYHsBgjYGIqXiBL3NyRkQ/ugBJWs=", "asoDI");
    lIllll[Illlll[8]] = llIlIlIl("w4Ya", "axuEl");
    lIllll[Illlll[9]] = llIlIlIl("QcO0VhDDlQc=", "aSaKr");
    lIllll[Illlll[10]] = IIllIlIl("gND8TNtE7K0=", "ImEQU");
    lIllll[Illlll[11]] = llIlIlIl("", "TacMH");
    lIllll[Illlll[7]] = IIllIlIl("9wFm5cWfqWk=", "GOEgv");
    lIllll[Illlll[12]] = IIllIlIl("1Zqq/V3jbi0A4kMYqz2y5A==", "spojm");
    lIllll[Illlll[13]] = llIlIlIl("FzTDv0Uq", "zGXrw");
    lIllll[Illlll[14]] = llIlIlIl("", "AJbCW");
  }
  
  private static String llIlIlIl(String IlllIlIlIlIIlll, String IIIIllIlIlIIlll) {
    llllIlIlIlIIlll = new String(Base64.getDecoder().decode(IlllIlIlIlIIlll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder llIlllIlIlIIlll = new StringBuilder();
    char[] IIlIllIlIlIIlll = IIIIllIlIlIIlll.toCharArray();
    int llIIllIlIlIIlll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[Illlll[0]];
    char[] arrayOfChar1 = llllIlIlIlIIlll.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[Illlll[0]];
    while (lIIIllIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lllIllIlIlIIlll = arrayOfChar1[j];
      "".length();
      llIIllIlIlIIlll++;
      j++;
      "".length();
      if (lIIIllIl((Illlll[0] + Illlll[16] - Illlll[17] + Illlll[14] ^ Illlll[18] ^ Illlll[19]) & (Illlll[20] + Illlll[21] - Illlll[22] + Illlll[23] ^ Illlll[11] + Illlll[24] - Illlll[25] + Illlll[26] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(llIlllIlIlIIlll);
  }
  
  private static String IIllIlIl(boolean IllIIIIlIlIIlll, byte lIlIIIIlIlIIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   39: iconst_2
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   56: iconst_3
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/module/mods/TablistTweaks.Illlll : [I
    //   71: iconst_3
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   64	42	3	lIIlIIIlIlIIlll	Ljavax/crypto/Cipher;
    //   0	113	0	IIllIIIlIlIIlll	Ljava/lang/String;
    //   47	59	2	IIIlIIIlIlIIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	2	IIlIIIIlIlIIlll	F
    //   0	113	0	IllIIIIlIlIIlll	Z
    //   0	113	0	llllIIIlIlIIlll	S
    //   107	4	2	llIlIIIlIlIIlll	Ljava/lang/Exception;
    //   0	113	1	lllIIIIlIlIIlll	Ljava/lang/Exception;
    //   0	113	3	llIIIIIlIlIIlll	S
    //   0	113	2	IlIlIIIlIlIIlll	Ljava/lang/Exception;
    //   0	113	1	lIlIIIIlIlIIlll	B
    //   0	113	3	lIllIIIlIlIIlll	I
    //   0	113	1	IlllIIIlIlIIlll	Ljava/lang/String;
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static boolean llllIlIl(char lIlllllIIlIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static void IlllIlIl() {
    Illlll = new int[27];
    Illlll[0] = (51 + 50 - 56 + 113 ^ 36 + 161 - 157 + 129) & (0x6C ^ 0x29 ^ 0xB6 ^ 0xC4 ^ -" ".length());
    Illlll[1] = -"  ".length();
    Illlll[2] = " ".length();
    Illlll[3] = "  ".length();
    Illlll[4] = "   ".length();
    Illlll[5] = 0x8E ^ 0x8A;
    Illlll[6] = 0x8 ^ 0x35 ^ 0x1C ^ 0x24;
    Illlll[7] = 139 + 108 - 128 + 66 ^ 144 + 58 - 155 + 132;
    Illlll[8] = 0xC4 ^ 0xC2;
    Illlll[9] = 139 + 48 - 113 + 106 ^ 130 + 87 - 141 + 103;
    Illlll[10] = 1 + 13 - -42 + 89 ^ 121 + 13 - -9 + 10;
    Illlll[11] = 0xC1 ^ 0x88 ^ 0x46 ^ 0x6;
    Illlll[12] = 0x36 ^ 0x3D;
    Illlll[13] = 0x6C ^ 0x21 ^ 0x5C ^ 0x1D;
    Illlll[14] = 48 + 117 - 146 + 165 ^ 155 + 84 - 128 + 70;
    Illlll[15] = 121 + 40 - 102 + 86 ^ 21 + 48 - 50 + 140;
    Illlll[16] = 0x3E ^ 0x69 ^ 0x4E ^ 0x4A;
    Illlll[17] = -(0x35 ^ 0x2F ^ 0x20 ^ 0x25);
    Illlll[18] = 136 + 28 - 145 + 177;
    Illlll[19] = 73 + 108 - 114 + 88;
    Illlll[20] = 11 + 19 - -88 + 33;
    Illlll[21] = 0x1C ^ 0x51;
    Illlll[22] = 21 + 194 - 152 + 146;
    Illlll[23] = 76 + 45 - -14 + 24;
    Illlll[24] = 0x1E ^ 0x70;
    Illlll[25] = 0x67 ^ 0x24;
    Illlll[26] = 0xD3 ^ 0x8D;
  }
  
  static {
    IlllIlIl();
    lIllIlIl();
    if (llllIlIl(TablistTweaks.class.desiredAssertionStatus())) {
      "".length();
      if (-" ".length() >= (0x1F ^ 0x1B))
        return; 
    } else {
    
    } 
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\TablistTweaks.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */