package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.module.ModuleManager;
import com.exploiters.xploitclient.utils.ExploitLogger;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;
import net.minecraft.class_1657;
import net.minecraft.class_310;
import net.minecraft.class_746;

public class AutoAlign extends Module {
  private static int lIlIIIll(double paramDouble1, double paramDouble2) {
    return paramDouble1 cmp paramDouble2;
  }
  
  public AutoAlign() {
    super(llIIIIl[IIlIIIl[0]], IIlIIIl[1], Category.MISC, llIIIIl[IIlIIIl[2]], new com.exploiters.xploitclient.setting.base.SettingBase[IIlIIIl[3]]);
  }
  
  private static boolean lIIIIIll(float IllllllIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static boolean llIIIIll(long IlIllllIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static String IlllllIl(short IIIIlIIllIIIlll, String llllIIIllIIIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   39: iconst_2
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   56: iconst_3
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   71: iconst_3
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	2	llIlIIIllIIIlll	Ljava/lang/Exception;
    //   0	113	1	IIIlIIIllIIIlll	Ljava/lang/Exception;
    //   0	113	1	llllIIIllIIIlll	Ljava/lang/String;
    //   107	4	2	IIllIIIllIIIlll	Ljava/lang/Exception;
    //   0	113	0	lIllIIIllIIIlll	Ljava/lang/String;
    //   0	113	1	IllIIIIllIIIlll	D
    //   0	113	0	IIIIlIIllIIIlll	S
    //   64	42	3	IlIlIIIllIIIlll	Ljavax/crypto/Cipher;
    //   0	113	3	IlllIIIllIIIlll	I
    //   0	113	3	IIlIIIIllIIIlll	B
    //   0	113	2	lIlIIIIllIIIlll	D
    //   47	59	2	lIIlIIIllIIIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	0	lllIIIIllIIIlll	Ljava/lang/String;
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static String IIllllIl(String IlIlllIllIIIlll, float lIIIIIlllIIIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   51: iconst_3
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   68: iconst_4
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/module/mods/AutoAlign.IIlIIIl : [I
    //   83: iconst_4
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	3	IllIllIllIIIlll	C
    //   0	125	0	lIIlllIllIIIlll	J
    //   0	125	1	lIllllIllIIIlll	Ljava/lang/String;
    //   0	125	1	lIIIIIlllIIIlll	F
    //   0	125	0	IlIlllIllIIIlll	Ljava/lang/String;
    //   0	125	2	IIllllIllIIIlll	C
    //   0	125	3	IlIIIIlllIIIlll	I
    //   76	42	3	llIlllIllIIIlll	Ljavax/crypto/Cipher;
    //   0	125	0	IIIIIIlllIIIlll	J
    //   0	125	1	IIIlllIllIIIlll	J
    //   59	59	2	llllllIllIIIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   119	4	2	IlllllIllIIIlll	Ljava/lang/Exception;
    //   0	125	2	lllIllIllIIIlll	I
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static void llllllIl() {
    llIIIIl = new String[IIlIIIl[11]];
    llIIIIl[IIlIIIl[0]] = IIllllIl("x8CpnW2LbibZ6GoSwgEqRA==", "xbyIm");
    llIIIIl[IIlIIIl[2]] = lIllllIl("ABYmIBUhUywqFCBTLCQWchI7IUEmGzArQTYaJiQDPhYmaw==", "RsUEa");
    llIIIIl[IIlIIIl[3]] = lIllllIl("KB4BLU4=", "eqeHn");
    llIIIIl[IIlIIIl[4]] = lIllllIl("JgY5GA==", "gsMwk");
    llIIIIl[IIlIIIl[5]] = IlllllIl("JBMf7ry1Qdo=", "YdFAC");
    llIIIIl[IIlIIIl[6]] = IlllllIl("NADkNTQ4ZTg=", "YLGPi");
    llIIIIl[IIlIIIl[7]] = IIllllIl("CiyCiqsFQJL+D0U7oub8pbMjFfV0iGfvhh0BjrnKtm9eGj+NIK6Zthqjlux1YYGBCYrwZmU/P7wbA1qfr/xh/Q==", "PAmlh");
    llIIIIl[IIlIIIl[8]] = IIllllIl("yw7nKozWERMeSzlS2V4BMt6WcbjD5KSrd8LpFLgSfKE4DEOQ1QD6PSImQ8r6dDfnmUXFhoF6io0dsQat/rt6Pw==", "NerCw");
    llIIIIl[IIlIIIl[9]] = IIllllIl("VRHg3mfyWSwfiO+L/o9JGmcQrCMFCriomGRy+UU4dmxLt8+wqY3FmDrXQekdq6n+fwd5VUecT4i5uT/WOP15FQ==", "gFPHy");
    llIIIIl[IIlIIIl[10]] = lIllllIl("BUM+BDopQzgKbCUHMwRsOwszFylsGjkQbC0RM0lsLhYiRSU4QyYXIy4CNAk1bAolC2s4QzdFJCUEPhItNU0=", "LcVeL");
  }
  
  static {
    IIIIIIll();
    llllllIl();
  }
  
  private static int IIlIIIll(double paramDouble1, double paramDouble2) {
    return paramDouble1 cmp paramDouble2;
  }
  
  private static boolean IllIIIll(short IIIllllIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 >= null);
  }
  
  public void onEnable() {
    class_310 lIlIlIlllIIIlll = class_310.method_1551();
    class_746 class_746 = lIlIlIlllIIIlll.field_1724;
    if (lIIIIIll(lIlIlIlllIIIlll.field_1687))
      return; 
    if (IlIIIIll((getSetting(IIlIIIl[0]).asMode()).mode, IIlIIIl[2])) {
      ((class_1657)class_746).field_6031 = (float)getSetting(IIlIIIl[2]).asSlider().getValue();
      "".length();
      if (" ".length() < 0)
        return; 
    } else if (llIIIIll((getSetting(IIlIIIl[0]).asMode()).mode)) {
      switch (determineHighway()) {
        case 1:
          ((class_1657)class_746).field_6031 = -90.0F;
          "".length();
          if (-" ".length() > 0)
            return; 
          break;
        case 2:
          ((class_1657)class_746).field_6031 = -45.0F;
          "".length();
          if ((0x1E ^ 0x1A) <= "  ".length())
            return; 
          break;
        case 3:
          ((class_1657)class_746).field_6031 = -135.0F;
          "".length();
          if ("  ".length() == 0)
            return; 
          break;
        case 4:
          ((class_1657)class_746).field_6031 = 90.0F;
          "".length();
          if ("   ".length() < 0)
            return; 
          break;
        case 5:
          ((class_1657)class_746).field_6031 = 45.0F;
          "".length();
          if ("  ".length() > "   ".length())
            return; 
          break;
        case 6:
          ((class_1657)class_746).field_6031 = 135.0F;
          "".length();
          if ((0x22 ^ 0x27) <= 0)
            return; 
          break;
        case 7:
          ((class_1657)class_746).field_6031 = 0.0F;
          "".length();
          if (-(0xA9 ^ 0xAC) >= 0)
            return; 
          break;
        case 8:
          ((class_1657)class_746).field_6031 = 180.0F;
          break;
      } 
    } 
    ModuleManager.getModule(AutoAlign.class).toggle();
  }
  
  public int determineHighway() {
    class_310 IIllIIlllIIIlll = class_310.method_1551();
    class_746 class_746 = IIllIIlllIIIlll.field_1724;
    int IlIlIIlllIIIlll = IIlIIIl[0];
    if (IllIIIll(IIlIIIll(class_746.method_23317(), 100.0D))) {
      if (IllIIIll(IIlIIIll(class_746.method_23321(), -5.0D)) && lllIIIll(lIlIIIll(class_746.method_23321(), 5.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[2];
        "".length();
        if (-" ".length() >= " ".length())
          return ((0x72 ^ 0x39) & (0x10 ^ 0x5B ^ 0xFFFFFFFF) ^ 0xCA ^ 0x98) & (0x4E ^ 0x1F ^ "   ".length() ^ -" ".length()); 
      } else if (IllIIIll(IIlIIIll(class_746.method_23321() - class_746.method_23317(), -50.0D)) && lllIIIll(lIlIIIll(class_746.method_23321() - class_746.method_23317(), 50.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[3];
        "".length();
        if (" ".length() >= (113 + 92 - 75 + 16 ^ 73 + 92 - 154 + 139))
          return (0xBF ^ 0xAC ^ 0x53 ^ 0x63) & (12 + 130 - 49 + 43 ^ 23 + 148 - 8 + 8 ^ -" ".length()); 
      } else if (IllIIIll(IIlIIIll(class_746.method_23321() + class_746.method_23317(), -50.0D)) && lllIIIll(lIlIIIll(class_746.method_23321() + class_746.method_23317(), 50.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[4];
        "".length();
        if (-" ".length() != -" ".length())
          return (0x25 ^ 0x78 ^ 0xA9 ^ 0xC1) & (0x85 ^ 0xA2 ^ 0x5A ^ 0x48 ^ -" ".length()); 
      } else {
        ExploitLogger.errorMessage(llIIIIl[IIlIIIl[7]]);
        "".length();
        if ((0x21 ^ 0x59 ^ 0x3E ^ 0x42) != (9 + 146 - 14 + 9 ^ 68 + 93 - 134 + 119))
          return (0xAE ^ 0xA1 ^ "  ".length()) & (0xEF ^ 0xB6 ^ 0x57 ^ 0x3 ^ -" ".length()); 
      } 
    } else if (lllIIIll(lIlIIIll(class_746.method_23317(), -100.0D))) {
      if (IllIIIll(IIlIIIll(class_746.method_23321(), -5.0D)) && lllIIIll(lIlIIIll(class_746.method_23321(), 5.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[5];
        "".length();
        if (-(12 + 28 - -80 + 64 ^ 167 + 34 - 67 + 54) >= 0)
          return (0x1D ^ 0x4C ^ 0x5C ^ 0x17) & (0x52 ^ 0x59 ^ 0x7B ^ 0x6A ^ -" ".length()); 
      } else if (IllIIIll(IIlIIIll(class_746.method_23317() + class_746.method_23321(), -50.0D)) && lllIIIll(lIlIIIll(class_746.method_23317() + class_746.method_23321(), 50.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[6];
        "".length();
        if (" ".length() < 0)
          return (127 + 141 - 234 + 113 ^ 53 + 155 - 81 + 65) & (0xED ^ 0xC3 ^ 0xF6 ^ 0x8B ^ -" ".length()); 
      } else if (lllIIIll(lIlIIIll(class_746.method_23321(), class_746.method_23317() + 100.0D)) && IllIIIll(IIlIIIll(class_746.method_23321(), class_746.method_23317() - 100.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[7];
        "".length();
        if ((124 + 164 - 184 + 62 ^ 63 + 112 - 131 + 118) != (63 + 7 - -43 + 20 ^ 100 + 121 - 98 + 6))
          return (0x8C ^ 0x92 ^ 0x8C ^ 0x98) & (0xE9 ^ 0x90 ^ 0xFC ^ 0x8F ^ -" ".length()); 
      } else {
        ExploitLogger.errorMessage(llIIIIl[IIlIIIl[8]]);
        "".length();
        if (-" ".length() >= "  ".length())
          return (0xE3 ^ 0xA3 ^ 0xDA ^ 0x97) & (0xC ^ 0x5D ^ 0xCC ^ 0x90 ^ -" ".length()); 
      } 
    } else if (IllIIIll(IIlIIIll(class_746.method_23321(), 100.0D))) {
      if (IllIIIll(IIlIIIll(class_746.method_23317(), -5.0D)) && lllIIIll(lIlIIIll(class_746.method_23317(), 5.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[8];
        "".length();
        if (((0x2D ^ 0x13) & (0x6E ^ 0x50 ^ 0xFFFFFFFF)) != 0)
          return (0x6D ^ 0x2F) & (0x2D ^ 0x6F ^ 0xFFFFFFFF); 
      } else {
        ExploitLogger.errorMessage(llIIIIl[IIlIIIl[9]]);
        "".length();
        if (" ".length() == 0)
          return (0xD ^ 0x37 ^ 0xD0 ^ 0xB5) & (16 + 38 - 13 + 162 ^ 111 + 60 - 69 + 46 ^ -" ".length()); 
      } 
    } else if (lllIIIll(lIlIIIll(class_746.method_23321(), -100.0D))) {
      if (IllIIIll(IIlIIIll(class_746.method_23317(), -5.0D)) && lllIIIll(lIlIIIll(class_746.method_23317(), 5.0D))) {
        IlIlIIlllIIIlll = IIlIIIl[9];
        "".length();
        if (((0x4C ^ 0x0 ^ 43 + 56 - 10 + 38) & (0x9 ^ 0x62 ^ 0x13 ^ 0x4B ^ -" ".length())) != 0)
          return (0xAE ^ 0x88 ^ 0x21 ^ 0x27) & (0xE0 ^ 0xB2 ^ 0x33 ^ 0x41 ^ -" ".length()); 
      } else {
        ExploitLogger.errorMessage(llIIIIl[IIlIIIl[10]]);
      } 
    } 
    return IlIlIIlllIIIlll;
  }
  
  private static void IIIIIIll() {
    IIlIIIl = new int[24];
    IIlIIIl[0] = (171 + 64 - 162 + 153 ^ 144 + 125 - 126 + 21) & (0x33 ^ 0xE ^ 0xDA ^ 0xA1 ^ -" ".length());
    IIlIIIl[1] = -"  ".length();
    IIlIIIl[2] = " ".length();
    IIlIIIl[3] = "  ".length();
    IIlIIIl[4] = "   ".length();
    IIlIIIl[5] = 0xBD ^ 0xB9;
    IIlIIIl[6] = 0xB2 ^ 0xB7;
    IIlIIIl[7] = 0xA7 ^ 0xA1;
    IIlIIIl[8] = 0xB ^ 0xC;
    IIlIIIl[9] = 0x18 ^ 0x10;
    IIlIIIl[10] = 0xCA ^ 0xC3;
    IIlIIIl[11] = 54 + 19 - -107 + 6 ^ 44 + 101 - 105 + 136;
    IIlIIIl[12] = 0x8C ^ 0x99 ^ 0x29 ^ 0x6F;
    IIlIIIl[13] = -(0xA1 ^ 0xBE);
    IIlIIIl[14] = 0x92 ^ 0x9F;
    IIlIIIl[15] = 66 + 167 - 189 + 129 + (0x38 ^ 0x25) - (0xDB ^ 0x8E) + (0x8D ^ 0xC2);
    IIlIIIl[16] = (0x92 ^ 0xC1) + (0x80 ^ 0x91) - (0x1D ^ 0x4C) + 21 + 1 - -73 + 41;
    IIlIIIl[17] = 103 + 38 - 111 + 121;
    IIlIIIl[18] = "  ".length() ^ 0xC3 ^ 0x8C;
    IIlIIIl[19] = 26 + 105 - 111 + 113 + 70 + 85 - 36 + 77 - 105 + 26 - 129 + 136 + (0x7F ^ 0x6D);
    IIlIIIl[20] = 7 + 46 - -42 + 54 + (0xDF ^ 0xB6) - 120 + 172 - 209 + 111 + (0x4 ^ 0x67);
    IIlIIIl[21] = 70 + 59 - -58 + 26 ^ 30 + 121 - -12 + 24;
    IIlIIIl[22] = 0xAD ^ 0xB3 ^ 0xC3 ^ 0x9E;
    IIlIIIl[23] = 183 + 170 - 139 + 41 ^ 83 + 60 - 67 + 85;
  }
  
  private static boolean IlIIIIll(boolean lIIIIIIllIIIlll, long IIIIIIIllIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  private static boolean IIIlIIll(long IIlllllIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static boolean lllIIIll(float IllIlllIlIIIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 <= null);
  }
  
  private static String lIllllIl(String IllllIIllIIIlll, String lIIIIlIllIIIlll) {
    lllllIIllIIIlll = new String(Base64.getDecoder().decode(IllllIIllIIIlll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder llIlIlIllIIIlll = new StringBuilder();
    char[] IIlIIlIllIIIlll = lIIIIlIllIIIlll.toCharArray();
    int llIIIlIllIIIlll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IIlIIIl[0]];
    char[] arrayOfChar1 = lllllIIllIIIlll.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IIlIIIl[0]];
    while (IIIlIIll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lllIIlIllIIIlll = arrayOfChar1[j];
      "".length();
      llIIIlIllIIIlll++;
      j++;
      "".length();
      if (IIIlIIll((IIlIIIl[0] + IIlIIIl[12] - IIlIIIl[13] + IIlIIIl[14] ^ IIlIIIl[15] ^ IIlIIIl[16]) & (IIlIIIl[17] + IIlIIIl[18] - IIlIIIl[19] + IIlIIIl[20] ^ IIlIIIl[10] + IIlIIIl[21] - IIlIIIl[22] + IIlIIIl[23] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(llIlIlIllIIIlll);
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\AutoAlign.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */