package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.event.events.EventTick;
import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import com.google.common.eventbus.Subscribe;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class Speed extends Module {
  static {
    IllIlIlIIll();
    lIlIlIlIIll();
  }
  
  public Speed() {
    super(IIIIIIIIIl[lIIIIIIIIl[0]], lIIIIIIIIl[1], Category.MOVEMENT, IIIIIIIIIl[lIIIIIIIIl[2]], new com.exploiters.xploitclient.setting.base.SettingBase[lIIIIIIIIl[3]]);
  }
  
  private static String IlIIlIlIIll(String llIlllIIIIllIl, float IlIIIIlIIIllIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   51: iconst_3
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   68: iconst_5
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   83: iconst_5
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   59	59	2	IIIIIIlIIIllIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	2	lIllllIIIIllIl	C
    //   0	125	1	lIIlllIIIIllIl	Ljava/lang/Exception;
    //   0	125	1	IlIIIIlIIIllIl	F
    //   76	42	3	IIllllIIIIllIl	Ljavax/crypto/Cipher;
    //   119	4	2	llllllIIIIllIl	Ljava/lang/Exception;
    //   0	125	3	llIIIIlIIIllIl	I
    //   0	125	0	lIIIIIlIIIllIl	J
    //   0	125	2	IIIlllIIIIllIl	F
    //   0	125	0	llIlllIIIIllIl	Ljava/lang/String;
    //   0	125	3	lllIllIIIIllIl	F
    //   0	125	1	IlllllIIIIllIl	Ljava/lang/String;
    //   0	125	0	IlIlllIIIIllIl	B
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static int IIIllIlIIll(float paramFloat1, float paramFloat2) {
    return paramFloat1 cmp paramFloat2;
  }
  
  private static String llIIlIlIIll(String lllllIIIIIllIl, String IlIIIlIIIIllIl) {
    String str = new String(Base64.getDecoder().decode(lllllIIIIIllIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder IIllIlIIIIllIl = new StringBuilder();
    char[] lIlIIlIIIIllIl = IlIIIlIIIIllIl.toCharArray();
    int IIlIIlIIIIllIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIIIIIIIIl[0]];
    char[] arrayOfChar1 = str.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIIIIIIIIl[0]];
    while (IlIllIlIIll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char IIIlIlIIIIllIl = arrayOfChar1[j];
      "".length();
      IIlIIlIIIIllIl++;
      j++;
      "".length();
      if (IlIllIlIIll((lIIIIIIIIl[0] + lIIIIIIIIl[12] - lIIIIIIIIl[13] + lIIIIIIIIl[14] ^ lIIIIIIIIl[15] ^ lIIIIIIIIl[16]) & (lIIIIIIIIl[17] + lIIIIIIIIl[18] - lIIIIIIIIl[19] + lIIIIIIIIl[20] ^ lIIIIIIIIl[21] + lIIIIIIIIl[22] - lIIIIIIIIl[23] + lIIIIIIIIl[24] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(IIllIlIIIIllIl);
  }
  
  private static boolean IIlllIlIIll(byte IlllIIIIIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static void lIlIlIlIIll() {
    IIIIIIIIIl = new String[lIIIIIIIIl[11]];
    IIIIIIIIIl[lIIIIIIIIl[0]] = IlIIlIlIIll("Qejrcc8CvhQ=", "HMSTj");
    IIIIIIIIIl[lIIIIIIIIl[2]] = llIIlIlIIll("OwsfAw0JRwoDD1oTHEwdFUcVDQkOAgFAWg0PEhhaHg4XTAMVElMJAgoCEBhF", "zgslz");
    IIIIIIIIIl[lIIIIIIIIl[3]] = IIlIlIlIIll("BeSzNUR3db4=", "YBgpM");
    IIIIIIIIIl[lIIIIIIIIl[5]] = llIIlIlIIll("AT01Mw==", "CUZCn");
    IIIIIIIIIl[lIIIIIIIIl[4]] = IlIIlIlIIll("zEMUsOt+B4w=", "PlQil");
    IIIIIIIIIl[lIIIIIIIIl[6]] = IlIIlIlIIll("pAf3M8yGLXJR7unYv6wwJQ==", "QCLZf");
    IIIIIIIIIl[lIIIIIIIIl[7]] = IIlIlIlIIll("WGOMInbwog8=", "tefba");
    IIIIIIIIIl[lIIIIIIIIl[8]] = llIIlIlIIll("Og01N0IkEiY3Bg==", "wbCRb");
  }
  
  private static void IllIlIlIIll() {
    lIIIIIIIIl = new int[25];
    lIIIIIIIIl[0] = (0x13 ^ 0x6) & (0xD ^ 0x18 ^ 0xFFFFFFFF);
    lIIIIIIIIl[1] = -"  ".length();
    lIIIIIIIIl[2] = " ".length();
    lIIIIIIIIl[3] = "  ".length();
    lIIIIIIIIl[4] = 0xAA ^ 0xB3 ^ 0xB ^ 0x16;
    lIIIIIIIIl[5] = "   ".length();
    lIIIIIIIIl[6] = 0xBE ^ 0x9E ^ 0x62 ^ 0x47;
    lIIIIIIIIl[7] = 0xB3 ^ 0xB5;
    lIIIIIIIIl[8] = 0x49 ^ 0x4E;
    lIIIIIIIIl[9] = -(0x82 ^ 0xAF);
    lIIIIIIIIl[10] = 0x4C ^ 0x54 ^ 0x1C ^ 0x29;
    lIIIIIIIIl[11] = 139 + 78 - 75 + 45 ^ 10 + 116 - 12 + 65;
    lIIIIIIIIl[12] = 0x14 ^ 0x47;
    lIIIIIIIIl[13] = -(0x66 ^ 0x27 ^ 0x8 ^ 0x56);
    lIIIIIIIIl[14] = 0xA3 ^ 0xAE;
    lIIIIIIIIl[15] = 90 + 49 - 77 + 109 + 14 + 109 - 79 + 127 - 120 + 146 - 119 + 27 + (0x50 ^ 0x4C);
    lIIIIIIIIl[16] = 99 + 53 - 46 + 49;
    lIIIIIIIIl[17] = (0x4D ^ 0x24) + (0x97 ^ 0xAF) - (0x45 ^ 0x19) + (0xF4 ^ 0xA6);
    lIIIIIIIIl[18] = 0xCC ^ 0x81;
    lIIIIIIIIl[19] = 83 + 63 - 25 + 39 + 167 + 132 - 214 + 103 - 40 + 175 - 68 + 53 + (0x14 ^ 0x29);
    lIIIIIIIIl[20] = 105 + 91 - 185 + 148;
    lIIIIIIIIl[21] = 0xAF ^ 0xA6;
    lIIIIIIIIl[22] = 0xD8 ^ 0x86 ^ 0xD ^ 0x3D;
    lIIIIIIIIl[23] = 0x37 ^ 0x74;
    lIIIIIIIIl[24] = 0x8 ^ 0x20 ^ 0x77 ^ 0x1;
  }
  
  private static boolean IlIllIlIIll(boolean IIIIlIIIIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String IIlIlIlIIll(short llIlIIlIIIllIl, Exception IIllIIlIIIllIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   39: iconst_2
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   56: iconst_3
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/module/mods/Speed.lIIIIIIIIl : [I
    //   71: iconst_3
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   107	4	2	IIIIlIlIIIllIl	Ljava/lang/Exception;
    //   0	113	0	lIIIlIlIIIllIl	Ljava/lang/String;
    //   0	113	1	llIIlIlIIIllIl	Ljava/lang/String;
    //   0	113	0	llIlIIlIIIllIl	S
    //   64	42	3	IlllIIlIIIllIl	Ljavax/crypto/Cipher;
    //   0	113	2	lIIlIIlIIIllIl	Z
    //   0	113	3	IIIlIIlIIIllIl	I
    //   0	113	0	IIlIlIlIIIllIl	S
    //   0	113	1	IIllIIlIIIllIl	Ljava/lang/Exception;
    //   0	113	1	IlIlIIlIIIllIl	I
    //   0	113	3	IlIIlIlIIIllIl	I
    //   0	113	2	llllIIlIIIllIl	Ljava/lang/Exception;
    //   47	59	2	lIllIIlIIIllIl	Ljavax/crypto/spec/SecretKeySpec;
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static int lIIllIlIIll(double paramDouble1, double paramDouble2) {
    return paramDouble1 cmp paramDouble2;
  }
  
  private static boolean llIllIlIIll(short llIIlIIIIIllIl, byte IlIIlIIIIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  private static boolean lllllIlIIll(float IlIlIIIIIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 < null);
  }
  
  private static boolean IllllIlIIll(double IIllIIIIIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 >= null);
  }
  
  private static int lllIlIlIIll(double paramDouble1, double paramDouble2) {
    return paramDouble1 cmp paramDouble2;
  }
  
  private static boolean lIlllIlIIll(long IIIlIIIIIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 > null);
  }
  
  @Subscribe
  public void onTick(EventTick IIlIIllIIIllIl) {
    if (IlIllIlIIll(((Speed)this).mc.field_1690.field_1832.method_1434()))
      return; 
    double llIIIllIIIllIl = getSetting(lIIIIIIIIl[2]).asSlider().getValue() / 30.0D;
    double IlIIIllIIIllIl = getSetting(lIIIIIIIIl[2]).asSlider().getValue() / 3.0D;
    if (llIllIlIIll((getSetting(lIIIIIIIIl[0]).asMode()).mode, lIIIIIIIIl[3])) {
      if (!IIlllIlIIll(((Speed)this).mc.field_1690.field_1903.method_1434()) || lIlllIlIIll(lllIlIlIIll(((Speed)this).mc.field_1724.field_6017, 0.25D)))
        return; 
      if (IlIllIlIIll(((Speed)super).jumping) && IllllIlIIll(lllIlIlIIll(((Speed)this).mc.field_1724.method_23318(), ((Speed)this).mc.field_1724.field_6036 + 0.399994D))) {
        ((Speed)this).mc.field_1724.method_18800((((Speed)this).mc.field_1724.method_18798()).field_1352, -0.9D, (((Speed)this).mc.field_1724.method_18798()).field_1350);
        ((Speed)this).mc.field_1724.method_23327(((Speed)this).mc.field_1724.method_23317(), ((Speed)this).mc.field_1724.field_6036, ((Speed)this).mc.field_1724.method_23321());
        ((Speed)super).jumping = lIIIIIIIIl[0];
      } 
      if (IlIllIlIIll(IIIllIlIIll(((Speed)this).mc.field_1724.field_6250, 0.0F)) && IIlllIlIIll(((Speed)this).mc.field_1724.field_5976)) {
        if (IlIllIlIIll(((Speed)this).mc.field_1724.field_5992)) {
          ((Speed)this).mc.field_1724.method_18800((((Speed)this).mc.field_1724.method_18798()).field_1352 * (0.85D + llIIIllIIIllIl), (((Speed)this).mc.field_1724.method_18798()).field_1351, (((Speed)this).mc.field_1724.method_18798()).field_1350 * (0.85D + llIIIllIIIllIl));
          ((Speed)super).jumping = lIIIIIIIIl[2];
          ((Speed)this).mc.field_1724.method_6043();
        } 
        if (IlIllIlIIll(((Speed)super).jumping) && IllllIlIIll(lllIlIlIIll(((Speed)this).mc.field_1724.method_23318(), ((Speed)this).mc.field_1724.field_6036 + 0.399994D))) {
          ((Speed)this).mc.field_1724.method_18800((((Speed)this).mc.field_1724.method_18798()).field_1352, -100.0D, (((Speed)this).mc.field_1724.method_18798()).field_1350);
          ((Speed)super).jumping = lIIIIIIIIl[0];
          "".length();
          if ("  ".length() >= (0xE ^ 0xA))
            return; 
        } 
      } 
    } else if (llIllIlIIll((getSetting(lIIIIIIIIl[0]).asMode()).mode, lIIIIIIIIl[2])) {
      if (!IIlllIlIIll(((Speed)this).mc.field_1724.field_5976) || !IIlllIlIIll(((Speed)this).mc.field_1690.field_1903.method_1434()) || IIlllIlIIll(IIIllIlIIll(((Speed)this).mc.field_1724.field_6250, 0.0F)))
        return; 
      if (IlIllIlIIll(((Speed)this).mc.field_1724.method_24828())) {
        ((Speed)this).mc.field_1724.method_6043();
        "".length();
        if (-"  ".length() >= 0)
          return; 
      } else if (lIlllIlIIll(lllIlIlIIll((((Speed)this).mc.field_1724.method_18798()).field_1351, 0.0D))) {
        ((Speed)this).mc.field_1724.method_18800((((Speed)this).mc.field_1724.method_18798()).field_1352 * (0.9D + llIIIllIIIllIl), -1.0D, (((Speed)this).mc.field_1724.method_18798()).field_1350 * (0.9D + llIIIllIIIllIl));
        ((Speed)this).mc.field_1724.field_3913.field_3907 += 1.5F;
        "".length();
        if (-" ".length() > "   ".length())
          return; 
      } 
    } else if (IIlllIlIIll((getSetting(lIIIIIIIIl[0]).asMode()).mode) && lIlllIlIIll(IIIllIlIIll(((Speed)this).mc.field_1724.field_6250, 0.0F)) && IlIllIlIIll(((Speed)this).mc.field_1724.method_24828())) {
      ((Speed)this).mc.field_1724.method_6043();
      ((Speed)this).mc.field_1724.method_18800((((Speed)this).mc.field_1724.method_18798()).field_1352 * (0.65D + llIIIllIIIllIl), 0.255556D, (((Speed)this).mc.field_1724.method_18798()).field_1350 * (0.65D + llIIIllIIIllIl));
      ((Speed)this).mc.field_1724.field_6212 += 3.0F;
      ((Speed)this).mc.field_1724.method_6043();
      ((Speed)this).mc.field_1724.method_5728(lIIIIIIIIl[2]);
    } 
    double lIIIIllIIIllIl = ((Speed)this).mc.field_1724.field_6250;
    double IIIIIllIIIllIl = ((Speed)this).mc.field_1724.field_6212;
    float lllllIlIIIllIl = ((Speed)this).mc.field_1724.field_6031;
    if (llIllIlIIll((getSetting(lIIIIIIIIl[0]).asMode()).mode, lIIIIIIIIl[5]) && IIlllIlIIll(((Speed)this).mc.field_1724.method_6128()))
      if (IIlllIlIIll(lllIlIlIIll(lIIIIllIIIllIl, 0.0D)) && IIlllIlIIll(lllIlIlIIll(IIIIIllIIIllIl, 0.0D))) {
        ((Speed)this).mc.field_1724.method_18800(0.0D, (((Speed)this).mc.field_1724.method_18798()).field_1351, 0.0D);
        "".length();
        if (-" ".length() > "   ".length())
          return; 
      } else {
        if (IlIllIlIIll(lllIlIlIIll(lIIIIllIIIllIl, 0.0D))) {
          if (lIlllIlIIll(lllIlIlIIll(IIIIIllIIIllIl, 0.0D))) {
            if (lIlllIlIIll(lllIlIlIIll(lIIIIllIIIllIl, 0.0D))) {
              "".length();
              if (null != null)
                return; 
            } else {
            
            } 
            lllllIlIIIllIl += lIIIIIIIIl[10];
            "".length();
            if ("   ".length() < ((0xC6 ^ 0xC0) & (0x94 ^ 0x92 ^ 0xFFFFFFFF)))
              return; 
          } else if (lllllIlIIll(lIIllIlIIll(IIIIIllIIIllIl, 0.0D))) {
            if (lIlllIlIIll(lllIlIlIIll(lIIIIllIIIllIl, 0.0D))) {
              "".length();
              if (-(0x4A ^ 0x7B ^ 0x69 ^ 0x5C) > 0)
                return; 
            } else {
            
            } 
            lllllIlIIIllIl += lIIIIIIIIl[9];
          } 
          IIIIIllIIIllIl = 0.0D;
          if (lIlllIlIIll(lllIlIlIIll(lIIIIllIIIllIl, 0.0D))) {
            lIIIIllIIIllIl = 1.0D;
            "".length();
            if ("  ".length() < -" ".length())
              return; 
          } else if (lllllIlIIll(lIIllIlIIll(lIIIIllIIIllIl, 0.0D))) {
            lIIIIllIIIllIl = -1.0D;
          } 
        } 
        ((Speed)this).mc.field_1724.method_18800(lIIIIllIIIllIl * IlIIIllIIIllIl * Math.cos(Math.toRadians((lllllIlIIIllIl + 90.0F))) + IIIIIllIIIllIl * IlIIIllIIIllIl * Math.sin(Math.toRadians((lllllIlIIIllIl + 90.0F))), (((Speed)this).mc.field_1724.method_18798()).field_1351, lIIIIllIIIllIl * IlIIIllIIIllIl * Math.sin(Math.toRadians((lllllIlIIIllIl + 90.0F))) - IIIIIllIIIllIl * IlIIIllIIIllIl * Math.cos(Math.toRadians((lllllIlIIIllIl + 90.0F))));
      }  
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\Speed.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */