package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.command.Command;
import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import com.google.common.eventbus.Subscribe;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.DESEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class CleanChat extends Module {
  private static String IIIllIIIIl(short lllIIIlllllllIl, byte lIllllIllllllIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   39: iconst_2
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   56: iconst_3
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   71: iconst_3
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	0	IIlIIIlllllllIl	Ljava/lang/String;
    //   0	113	2	IIllllIllllllIl	I
    //   0	113	1	IllIIIlllllllIl	Ljava/lang/String;
    //   0	113	3	lIlIIIlllllllIl	I
    //   0	113	1	lIllllIllllllIl	B
    //   0	113	3	llIlllIllllllIl	I
    //   47	59	2	IIIIIIlllllllIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	2	IlIIIIlllllllIl	Ljava/lang/Exception;
    //   0	113	1	llllllIllllllIl	Ljava/lang/Exception;
    //   107	4	2	llIIIIlllllllIl	Ljava/lang/Exception;
    //   64	42	3	lIIIIIlllllllIl	Ljavax/crypto/Cipher;
    //   0	113	0	lllIIIlllllllIl	S
    //   0	113	0	IlllllIllllllIl	B
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static void IlIllIIIIl() {
    lIIlllIl = new int[20];
    lIIlllIl[0] = (0xD0 ^ 0x8C) & (0xDD ^ 0x81 ^ 0xFFFFFFFF);
    lIIlllIl[1] = -"  ".length();
    lIIlllIl[2] = " ".length();
    lIIlllIl[3] = "  ".length();
    lIIlllIl[4] = "   ".length();
    lIIlllIl[5] = 0x19 ^ 0x1D ^ (0xAB ^ 0xB0) & (0x61 ^ 0x7A ^ 0xFFFFFFFF);
    lIIlllIl[6] = 0x8 ^ 0xD;
    lIIlllIl[7] = 0x58 ^ 0xB;
    lIIlllIl[8] = -(0x45 ^ 0x5A);
    lIIlllIl[9] = 0x9C ^ 0x8A ^ 0xE ^ 0x15;
    lIIlllIl[10] = (0x5E ^ 0x7F) + (0x6F ^ 0x3) - (0x1C ^ 0x41) + 5 + 102 - 43 + 84;
    lIIlllIl[11] = 86 + 47 - 110 + 132;
    lIIlllIl[12] = (0x27 ^ 0x15) + (0xE0 ^ 0x8F) - (0x75 ^ 0x19) + (0xC3 ^ 0xA1);
    lIIlllIl[13] = 0x6C ^ 0x21;
    lIIlllIl[14] = (0x24 ^ 0xB) + (0x5D ^ 0x25) - (0x1 ^ 0x3B) + (0xDC ^ 0xB8);
    lIIlllIl[15] = (0x26 ^ 0x10) + (0x7C ^ 0x26) - (0x10 ^ 0x1) + (0x98 ^ 0xB8);
    lIIlllIl[16] = 0x80 ^ 0x89;
    lIIlllIl[17] = 19 + 104 - -49 + 48 ^ 6 + 79 - 49 + 142;
    lIIlllIl[18] = 0x7A ^ 0x39;
    lIIlllIl[19] = 57 + 52 - -39 + 66 ^ 22 + 132 - 116 + 98;
  }
  
  static {
    IlIllIIIIl();
    lIIllIIIIl();
  }
  
  public void onEnable() {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial onEnable : ()V
    //   4: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   7: iconst_2
    //   8: iaload
    //   9: anewarray java/lang/String
    //   12: dup
    //   13: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   16: iconst_0
    //   17: iaload
    //   18: getstatic com/exploiters/xploitclient/module/mods/CleanChat.IIIlllIl : [Ljava/lang/String;
    //   21: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   24: iconst_4
    //   25: iaload
    //   26: aaload
    //   27: aastore
    //   28: invokestatic readFileLines : ([Ljava/lang/String;)Ljava/util/List;
    //   31: invokeinterface iterator : ()Ljava/util/Iterator;
    //   36: astore_1
    //   37: aload_1
    //   38: invokeinterface hasNext : ()Z
    //   43: invokestatic llIllIIIIl : (I)Z
    //   46: ifeq -> 93
    //   49: aload_1
    //   50: invokeinterface next : ()Ljava/lang/Object;
    //   55: checkcast java/lang/String
    //   58: astore_2
    //   59: aload_0
    //   60: getfield blacklistedWords : Ljava/util/ArrayList;
    //   63: aload_2
    //   64: invokevirtual add : (Ljava/lang/Object;)Z
    //   67: ldc ''
    //   69: invokevirtual length : ()I
    //   72: pop2
    //   73: ldc ''
    //   75: invokevirtual length : ()I
    //   78: pop
    //   79: ldc ' '
    //   81: invokevirtual length : ()I
    //   84: ldc ' '
    //   86: invokevirtual length : ()I
    //   89: if_icmpge -> 37
    //   92: return
    //   93: return
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	94	0	IlIlIllllllllIl	Lcom/exploiters/xploitclient/module/mods/CleanChat;
    //   0	94	0	lIIlIllllllllIl	F
    //   0	94	2	lllIIllllllllIl	J
    //   59	14	2	llIlIllllllllIl	Ljava/lang/String;
    //   0	94	1	IIIlIllllllllIl	Z
  }
  
  private static String IllIlIIIIl(String llIIlIIllllllIl, String lIlIlIIllllllIl) {
    String str = new String(Base64.getDecoder().decode(llIIlIIllllllIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder lllllIIllllllIl = new StringBuilder();
    char[] IIIllIIllllllIl = lIlIlIIllllllIl.toCharArray();
    int lllIlIIllllllIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIIlllIl[0]];
    char[] arrayOfChar1 = str.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIIlllIl[0]];
    while (llIllIIIIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char llIllIIllllllIl = arrayOfChar1[j];
      "".length();
      lllIlIIllllllIl++;
      j++;
      "".length();
      if (llIllIIIIl((lIIlllIl[0] + lIIlllIl[7] - lIIlllIl[8] + lIIlllIl[9] ^ lIIlllIl[10] ^ lIIlllIl[11]) & (lIIlllIl[12] + lIIlllIl[13] - lIIlllIl[14] + lIIlllIl[15] ^ lIIlllIl[16] + lIIlllIl[17] - lIIlllIl[18] + lIIlllIl[19] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(lllllIIllllllIl);
  }
  
  private static void lIIllIIIIl() {
    IIIlllIl = new String[lIIlllIl[6]];
    IIIlllIl[lIIlllIl[0]] = IllIlIIIIl("Cy4RAxgLKhUW", "HBtbv");
    IIIlllIl[lIIlllIl[2]] = lllIlIIIIl("hiA5MsQX/4apiEekDogur1tRwefnZQKTGV5ElZW0E/gloZUkW2iZmbf3dhNux2aBMViBnerTA2INpXIgoFijxJBVwNwGChMoagOaGeOaaA32DuMlUcTEqg==", "VIktz");
    IIIlllIl[lIIlllIl[3]] = IllIlIIIIl("GyUmIiIbISI3bBktJ2woHSVjGDsXOycebg==", "xICCL");
    IIIlllIl[lIIlllIl[4]] = lllIlIIIIl("T9HG80g0RM8e44uiQqMmOA==", "FQECf");
    IIIlllIl[lIIlllIl[5]] = IIIllIIIIl("Jv0ppwWpYUsdud8LWTNWKg==", "oReBh");
  }
  
  private static String lllIlIIIIl(String IlllIlIllllllIl, String lIIIllIllllllIl) {
    try {
      SecretKeySpec llIIllIllllllIl = new SecretKeySpec(Arrays.copyOf(MessageDigest.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIIlllIl[0]]]).digest(lIIIllIllllllIl.getBytes(StandardCharsets.UTF_8)), DESEncryptionAlgorithm.lIlllllIlllII[lIIlllIl[2]]), DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIIlllIl[3]]]);
      Cipher llllIlIllllllIl = Cipher.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIIlllIl[4]]]);
      llllIlIllllllIl.init(DESEncryptionAlgorithm.lIlllllIlllII[lIIlllIl[4]], llIIllIllllllIl);
      return new String(llllIlIllllllIl.doFinal(Base64.getDecoder().decode(IlllIlIllllllIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception IlIIllIllllllIl) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
  
  public CleanChat() {
    super(IIIlllIl[lIIlllIl[0]], lIIlllIl[1], Category.CHAT, String.valueOf((new StringBuilder()).append(IIIlllIl[lIIlllIl[2]]).append(Command.PREFIX).append(IIIlllIl[lIIlllIl[3]])), new com.exploiters.xploitclient.setting.base.SettingBase[lIIlllIl[0]]);
  }
  
  private static boolean llIllIIIIl(long lllIIIIllllllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  @Subscribe
  public void onPacketRead(char llIIlIlllllllIl) {
    // Byte code:
    //   0: aload_1
    //   1: invokevirtual getPacket : ()Lnet/minecraft/class_2596;
    //   4: instanceof net/minecraft/class_2635
    //   7: invokestatic llIllIIIIl : (I)Z
    //   10: ifeq -> 283
    //   13: new java/util/ArrayList
    //   16: dup
    //   17: invokespecial <init> : ()V
    //   20: astore_2
    //   21: aload_1
    //   22: invokevirtual getPacket : ()Lnet/minecraft/class_2596;
    //   25: checkcast net/minecraft/class_2635
    //   28: invokevirtual method_11388 : ()Lnet/minecraft/class_2561;
    //   31: invokevirtual toString : ()Ljava/lang/String;
    //   34: astore_3
    //   35: getstatic com/exploiters/xploitclient/module/mods/CleanChat.IIIlllIl : [Ljava/lang/String;
    //   38: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   41: iconst_5
    //   42: iaload
    //   43: aaload
    //   44: invokestatic compile : (Ljava/lang/String;)Ljava/util/regex/Pattern;
    //   47: astore #4
    //   49: aload #4
    //   51: aload_3
    //   52: invokevirtual matcher : (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
    //   55: astore #5
    //   57: aload #5
    //   59: invokevirtual find : ()Z
    //   62: invokestatic llIllIIIIl : (I)Z
    //   65: ifeq -> 122
    //   68: aload_2
    //   69: aload #5
    //   71: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   74: iconst_2
    //   75: iaload
    //   76: invokevirtual group : (I)Ljava/lang/String;
    //   79: invokeinterface add : (Ljava/lang/Object;)Z
    //   84: ldc ''
    //   86: invokevirtual length : ()I
    //   89: pop2
    //   90: ldc ''
    //   92: invokevirtual length : ()I
    //   95: pop
    //   96: bipush #105
    //   98: bipush #36
    //   100: ixor
    //   101: bipush #29
    //   103: bipush #84
    //   105: ixor
    //   106: ixor
    //   107: bipush #16
    //   109: bipush #106
    //   111: ixor
    //   112: bipush #24
    //   114: bipush #102
    //   116: ixor
    //   117: ixor
    //   118: if_icmpeq -> 57
    //   121: return
    //   122: new java/lang/StringBuilder
    //   125: dup
    //   126: invokespecial <init> : ()V
    //   129: astore #6
    //   131: aload_2
    //   132: invokeinterface iterator : ()Ljava/util/Iterator;
    //   137: astore #7
    //   139: aload #7
    //   141: invokeinterface hasNext : ()Z
    //   146: invokestatic llIllIIIIl : (I)Z
    //   149: ifeq -> 198
    //   152: aload #7
    //   154: invokeinterface next : ()Ljava/lang/Object;
    //   159: checkcast java/lang/String
    //   162: astore #8
    //   164: aload #6
    //   166: aload #8
    //   168: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   171: ldc ''
    //   173: invokevirtual length : ()I
    //   176: pop2
    //   177: ldc ''
    //   179: invokevirtual length : ()I
    //   182: pop
    //   183: ldc ' '
    //   185: invokevirtual length : ()I
    //   188: ineg
    //   189: ldc '   '
    //   191: invokevirtual length : ()I
    //   194: if_icmple -> 139
    //   197: return
    //   198: aload_0
    //   199: getfield blacklistedWords : Ljava/util/ArrayList;
    //   202: invokevirtual iterator : ()Ljava/util/Iterator;
    //   205: astore #7
    //   207: aload #7
    //   209: invokeinterface hasNext : ()Z
    //   214: invokestatic llIllIIIIl : (I)Z
    //   217: ifeq -> 283
    //   220: aload #7
    //   222: invokeinterface next : ()Ljava/lang/Object;
    //   227: astore #8
    //   229: aload #6
    //   231: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   234: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   237: aload #8
    //   239: invokevirtual toString : ()Ljava/lang/String;
    //   242: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   245: invokevirtual contains : (Ljava/lang/CharSequence;)Z
    //   248: invokestatic llIllIIIIl : (I)Z
    //   251: ifeq -> 263
    //   254: aload_1
    //   255: getstatic com/exploiters/xploitclient/module/mods/CleanChat.lIIlllIl : [I
    //   258: iconst_2
    //   259: iaload
    //   260: invokevirtual setCancelled : (Z)V
    //   263: ldc ''
    //   265: invokevirtual length : ()I
    //   268: pop
    //   269: ldc ' '
    //   271: invokevirtual length : ()I
    //   274: ldc ' '
    //   276: invokevirtual length : ()I
    //   279: if_icmpeq -> 207
    //   282: return
    //   283: return
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   21	262	2	llIllIlllllllIl	Ljava/util/List;
    //   0	284	7	lIllIIlllllllIl	F
    //   0	284	1	lIlIlIlllllllIl	Lcom/exploiters/xploitclient/event/events/EventReadPacket;
    //   0	284	5	llllIIlllllllIl	S
    //   0	284	0	IllIlIlllllllIl	Lcom/exploiters/xploitclient/module/mods/CleanChat;
    //   0	284	6	IlllIIlllllllIl	B
    //   0	284	8	IIllIIlllllllIl	B
    //   0	284	4	IIIIlIlllllllIl	C
    //   49	234	4	lIIllIlllllllIl	Ljava/util/regex/Pattern;
    //   0	284	2	IlIIlIlllllllIl	D
    //   35	248	3	IlIllIlllllllIl	Ljava/lang/String;
    //   0	284	0	IIlIlIlllllllIl	C
    //   0	284	3	lIIIlIlllllllIl	I
    //   164	13	8	lIlllIlllllllIl	Ljava/lang/String;
    //   57	226	5	IIIllIlllllllIl	Ljava/util/regex/Matcher;
    //   131	152	6	lllIlIlllllllIl	Ljava/lang/StringBuilder;
    //   229	34	8	IIlllIlllllllIl	Ljava/lang/Object;
    //   0	284	1	llIIlIlllllllIl	C
    // Local variable type table:
    //   start	length	slot	name	signature
    //   21	262	2	llIllIlllllllIl	Ljava/util/List<Ljava/lang/String;>;
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\CleanChat.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */