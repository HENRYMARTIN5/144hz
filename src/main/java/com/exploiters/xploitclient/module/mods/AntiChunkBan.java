package com.exploiters.xploitclient.module.mods;

import com.exploiters.xploitclient.module.Category;
import com.exploiters.xploitclient.module.Module;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class AntiChunkBan extends Module {
  private static String IlIllIlll(long lIIIIlIlIlIIIll, char IIlIIlIlIlIIIll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/module/mods/AntiChunkBan.lllllIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/module/mods/AntiChunkBan.lllllIIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/module/mods/AntiChunkBan.lllllIIl : [I
    //   51: iconst_3
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/module/mods/AntiChunkBan.lllllIIl : [I
    //   68: iconst_4
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/module/mods/AntiChunkBan.lllllIIl : [I
    //   83: iconst_4
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	1	lIIlIlIlIlIIIll	F
    //   59	59	2	lllIIlIlIlIIIll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	1	lIlIIlIlIlIIIll	Ljava/lang/String;
    //   0	125	2	IIlIIlIlIlIIIll	C
    //   0	125	2	lllllIIlIlIIIll	B
    //   0	125	0	IIIlIlIlIlIIIll	J
    //   119	4	2	IllIIlIlIlIIIll	Ljava/lang/Exception;
    //   76	42	3	llIIIlIlIlIIIll	Ljavax/crypto/Cipher;
    //   0	125	0	lIIIIlIlIlIIIll	J
    //   0	125	3	IllllIIlIlIIIll	B
    //   0	125	1	IIIIIlIlIlIIIll	B
    //   0	125	0	IlIIIlIlIlIIIll	Ljava/lang/String;
    //   0	125	3	IlIlIlIlIlIIIll	I
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static void IIlllIlll() {
    lllllIIl = new int[18];
    lllllIIl[0] = (0x18 ^ 0x25) & (0xA0 ^ 0x9D ^ 0xFFFFFFFF);
    lllllIIl[1] = -"  ".length();
    lllllIIl[2] = " ".length();
    lllllIIl[3] = "  ".length();
    lllllIIl[4] = "   ".length();
    lllllIIl[5] = 0xC8 ^ 0x9B;
    lllllIIl[6] = -(0xDB ^ 0xC4);
    lllllIIl[7] = 0xAE ^ 0xA3;
    lllllIIl[8] = 75 + 7 - 29 + 132 + (0x8 ^ 0x20) - 87 + 152 - 183 + 138 + 156 + 126 - 243 + 126;
    lllllIIl[9] = 96 + 53 - 74 + 80;
    lllllIIl[10] = 92 + 137 - 226 + 148;
    lllllIIl[11] = 0x4C ^ 0x3 ^ "  ".length();
    lllllIIl[12] = " ".length() + (0x7C ^ 0x22) - (0x81 ^ 0xA3) + 74 + 119 - 163 + 118;
    lllllIIl[13] = (0x6A ^ 0x50) + (0x9C ^ 0xB7) - -(0x8A ^ 0x9F) + (0xA7 ^ 0x82);
    lllllIIl[14] = 25 + 5 - -121 + 30 ^ 123 + 167 - 131 + 29;
    lllllIIl[15] = 0x19 ^ 0x77;
    lllllIIl[16] = 0x7E ^ 0x3D;
    lllllIIl[17] = 0xEC ^ 0xB2;
  }
  
  private static String lIIllIlll(String lllIIIIlIlIIIll, String IIIlIIIlIlIIIll) {
    IllIIIIlIlIIIll = new String(Base64.getDecoder().decode(lllIIIIlIlIIIll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder llIIlIIlIlIIIll = new StringBuilder();
    char[] IIllIIIlIlIIIll = IIIlIIIlIlIIIll.toCharArray();
    int llIlIIIlIlIIIll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllllIIl[0]];
    char[] arrayOfChar1 = IllIIIIlIlIIIll.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllllIIl[0]];
    while (lIlllIlll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char llllIIIlIlIIIll = arrayOfChar1[j];
      "".length();
      llIlIIIlIlIIIll++;
      j++;
      "".length();
      if (lIlllIlll((lllllIIl[0] + lllllIIl[5] - lllllIIl[6] + lllllIIl[7] ^ lllllIIl[8] ^ lllllIIl[9]) & (lllllIIl[10] + lllllIIl[11] - lllllIIl[12] + lllllIIl[13] ^ lllllIIl[14] + lllllIIl[15] - lllllIIl[16] + lllllIIl[17] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(llIIlIIlIlIIIll);
  }
  
  private static void llIllIlll() {
    IllllIIl = new String[lllllIIl[3]];
    IllllIIl[lllllIIl[0]] = lIIllIlll("CjQwAjYjLyoANyo0", "KZDku");
    IllllIIl[lllllIIl[2]] = IlIllIlll("c1ULmq3Px69ScCHYeEcDCKcEFHNVFElJ", "iJQkF");
  }
  
  public AntiChunkBan() {
    super(IllllIIl[lllllIIl[0]], lllllIIl[1], Category.EXPLOITS, IllllIIl[lllllIIl[2]], new com.exploiters.xploitclient.setting.base.SettingBase[lllllIIl[0]]);
  }
  
  private static boolean lIlllIlll(int llIllllIIlIIIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  static {
    IIlllIlll();
    llIllIlll();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\module\mods\AntiChunkBan.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */