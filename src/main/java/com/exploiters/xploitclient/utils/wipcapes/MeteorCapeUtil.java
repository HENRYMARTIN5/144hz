package com.exploiters.xploitclient.utils.wipcapes;

import com.google.gson.Gson;
import com.google.gson.annotations.SerializedName;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class MeteorCapeUtil {
  public MeteorCapeUtil(short lllIllIlllIlll) {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial <init> : ()V
    //   4: aload_0
    //   5: aload_1
    //   6: putfield url : Ljava/lang/String;
    //   9: return
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	10	1	lIIlllIlllIlll	Ljava/lang/String;
    //   0	10	0	IlIlllIlllIlll	Lcom/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil;
    //   0	10	1	lllIllIlllIlll	S
    //   0	10	0	IIIlllIlllIlll	F
  }
  
  private static boolean IlIIlIIIlIl(String llIllIlIllIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static void lIIIlIIIlIl() {
    lllIlIIll = new int[18];
    lllIlIIll[0] = (0x98 ^ 0xA7) & (0x74 ^ 0x4B ^ 0xFFFFFFFF);
    lllIlIIll[1] = " ".length();
    lllIlIIll[2] = "  ".length();
    lllIlIIll[3] = "   ".length();
    lllIlIIll[4] = 0x93 ^ 0xA8 ^ 0x3C ^ 0x3;
    lllIlIIll[5] = 0xEF ^ 0xBC;
    lllIlIIll[6] = -(106 + 42 - 120 + 102 ^ 49 + 114 - 115 + 109);
    lllIlIIll[7] = 0x95 ^ 0x98;
    lllIlIIll[8] = 165 + 154 - 269 + 146;
    lllIlIIll[9] = 118 + 60 - 60 + 37;
    lllIlIIll[10] = 106 + 79 - 147 + 113;
    lllIlIIll[11] = 0xE0 ^ 0xAD;
    lllIlIIll[12] = 13 + 132 - 82 + 146;
    lllIlIIll[13] = (0x0 ^ 0xB) + (0xE0 ^ 0x93) - -(0x90 ^ 0x94) + (0xBB ^ 0xA6);
    lllIlIIll[14] = 0x29 ^ 0x5B ^ 0xFA ^ 0x81;
    lllIlIIll[15] = 0x51 ^ 0x3D ^ "  ".length();
    lllIlIIll[16] = 0x6D ^ 0x2E;
    lllIlIIll[17] = 0x61 ^ 0x1F ^ 0x6 ^ 0x26;
  }
  
  private static String IIIlIIIIlIl(Exception llIIIIIlllIlll, Exception IIlIIIIlllIlll) {
    try {
      SecretKeySpec lIlIIIIlllIlll = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIIll[0]]]).digest(IIlIIIIlllIlll.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIIll[1]]]);
      Cipher IllIIIIlllIlll = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIIll[2]]]);
      IllIIIIlllIlll.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lllIlIIll[2]], lIlIIIIlllIlll);
      return new String(IllIIIIlllIlll.doFinal(Base64.getDecoder().decode(llIIIIIlllIlll.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception IIIlIIIlllIlll) {
      lllIIIIlllIlll.printStackTrace();
      return null;
    } 
  }
  
  private static String IllIIIIIlIl(int IIlIlIIlllIlll, String llIIlIIlllIlll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil.lllIlIIll : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil.lllIlIIll : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil.lllIlIIll : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil.lllIlIIll : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil.lllIlIIll : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	0	lIlIlIIlllIlll	Ljava/lang/String;
    //   0	125	0	IIlIlIIlllIlll	I
    //   119	4	2	lIIllIIlllIlll	Ljava/lang/Exception;
    //   59	59	2	IlIllIIlllIlll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	2	IlIIlIIlllIlll	I
    //   0	125	3	lIlllIIlllIlll	I
    //   0	125	1	IIIllIIlllIlll	Ljava/lang/String;
    //   76	42	3	IllIlIIlllIlll	Ljavax/crypto/Cipher;
    //   0	125	3	lIIIlIIlllIlll	Z
    //   0	125	2	lllIlIIlllIlll	C
    //   0	125	1	llIIlIIlllIlll	Ljava/lang/String;
    //   0	125	0	llIllIIlllIlll	J
    //   0	125	1	IIlllIIlllIlll	F
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  private static String lIIlIIIIlIl(String IIIlIllIllIlll, String llIlIllIllIlll) {
    String str = new String(Base64.getDecoder().decode(IIIlIllIllIlll.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder lIlIlllIllIlll = new StringBuilder();
    char[] IlllIllIllIlll = llIlIllIllIlll.toCharArray();
    int lIllIllIllIlll = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIlIIll[0]];
    char[] arrayOfChar1 = str.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[lllIlIIll[0]];
    while (llIIlIIIlIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lIIIlllIllIlll = arrayOfChar1[j];
      "".length();
      lIllIllIllIlll++;
      j++;
      "".length();
      if (llIIlIIIlIl((lllIlIIll[0] + lllIlIIll[5] - lllIlIIll[6] + lllIlIIll[7] ^ lllIlIIll[8] ^ lllIlIIll[9]) & (lllIlIIll[10] + lllIlIIll[11] - lllIlIIll[12] + lllIlIIll[13] ^ lllIlIIll[14] + lllIlIIll[15] - lllIlIIll[16] + lllIlIIll[17] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(lIlIlllIllIlll);
  }
  
  public void sendMessage(double lIIIllIlllIlll) {
    (new Thread(() -> {
          String lllIIlIlllIlll = MeteorCapeUUID.post(this.url).acceptJson().contentType(IIlIlIIll[lllIlIIll[0]]).header(IIlIlIIll[lllIlIIll[1]], IIlIlIIll[lllIlIIll[2]]).send(gson.toJson(lIlIIlIlllIlll)).body();
          if (IlIIlIIIlIl(lllIIlIlllIlll.isEmpty())) {
            CapeResponse IlIlIlIlllIlll = (CapeResponse)gson.fromJson(lllIIlIlllIlll, CapeResponse.class);
            try {
              if (llIIlIIIlIl(IlIlIlIlllIlll.getMessage().equals(IIlIlIIll[lllIlIIll[3]])))
                throw new CapeException(this, IlIlIlIlllIlll.getMessage()); 
              "".length();
              if ((63 + 94 - 128 + 142 ^ 36 + 43 - 43 + 139) < 0)
                return; 
            } catch (Exception llIlIlIlllIlll) {
              throw new CapeException(this, lllIIlIlllIlll);
            } 
          } 
        })).start();
  }
  
  private static boolean llIIlIIIlIl(String lIlllIlIllIlll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static void IlIlIIIIlIl() {
    IIlIlIIll = new String[lllIlIIll[4]];
    IIlIlIIll[lllIlIIll[0]] = IllIIIIIlIl("5+NvYuS1OIscLU5VN/TBgm+N/MaFdKYl", "dgirh");
    IIlIlIIll[lllIlIIll[1]] = IIIlIIIIlIl("vVzc0K0nep74Hop4yBkSnQ==", "DaHGq");
    IIlIlIIll[lllIlIIll[2]] = lIIlIIIIlIl("PSgbAgUcJk5eR0BnSTNYQXxBPlJQCwgFHAhnCF1RRm5BLAwTLA5EW0B3VlpYQnBBLQACIgcEEV91T1tHQGlQWg==", "pGaki");
    IIlIlIIll[lllIlIIll[3]] = IllIIIIIlIl("dS0DaDE9R75/YHZF1xnH9SlnBAMZeaz8POoPbAb4hgc=", "qNuYP");
  }
  
  static {
    lIIIlIIIlIl();
    IlIlIIIIlIl();
  }
  
  public class CapeException extends RuntimeException {
    public CapeException(Exception lIlllIIllIlIIll, String lllllIIllIlIIll) {
      // Byte code:
      //   0: aload_0
      //   1: aload_1
      //   2: putfield this$0 : Lcom/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil;
      //   5: aload_0
      //   6: aload_2
      //   7: invokespecial <init> : (Ljava/lang/String;)V
      //   10: return
      // Local variable table:
      //   start	length	slot	name	descriptor
      //   0	11	2	IIlllIIllIlIIll	S
      //   0	11	0	lIIIIlIllIlIIll	Lcom/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil$CapeException;
      //   0	11	0	IllllIIllIlIIll	D
      //   0	11	1	IIIIIlIllIlIIll	Lcom/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil;
      //   0	11	1	lIlllIIllIlIIll	Ljava/lang/Exception;
      //   0	11	2	lllllIIllIlIIll	Ljava/lang/String;
    }
  }
  
  public static class CapeResponse {
    public List<String> getConnection() {
      return ((CapeResponse)super).connection;
    }
    
    public String getMessage() {
      // Byte code:
      //   0: aload_0
      //   1: getfield message : Ljava/lang/String;
      //   4: areturn
      // Local variable table:
      //   start	length	slot	name	descriptor
      //   0	5	0	IIlIllIIIIIlIIl	Lcom/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil$CapeResponse;
      //   0	5	0	llIIllIIIIIlIIl	B
    }
    
    public List<String> getUsername() {
      // Byte code:
      //   0: aload_0
      //   1: getfield username : Ljava/util/List;
      //   4: areturn
      // Local variable table:
      //   start	length	slot	name	descriptor
      //   0	5	0	IlllIlIIIIIlIIl	Lcom/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil$CapeResponse;
      //   0	5	0	lIllIlIIIIIlIIl	F
    }
    
    public int getRetryAfter() {
      // Byte code:
      //   0: aload_0
      //   1: getfield retryAfter : I
      //   4: ireturn
      // Local variable table:
      //   start	length	slot	name	descriptor
      //   0	5	0	lIIIllIIIIIlIIl	Lcom/exploiters/xploitclient/utils/wipcapes/MeteorCapeUtil$CapeResponse;
      //   0	5	0	IIIIllIIIIIlIIl	B
    }
    
    public List<String> getEmbeds() {
      return this.embeds;
    }
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclien\\utils\wipcapes\MeteorCapeUtil.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */