package com.exploiters.xploitclient.utils.file;

import com.exploiters.xploitclient.XploitClient;
import com.exploiters.xploitclient.command.Command;
import com.exploiters.xploitclient.gui.window.Window;
import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.module.ModuleManager;
import com.exploiters.xploitclient.module.mods.ClickGui;
import com.exploiters.xploitclient.setting.base.SettingBase;
import com.exploiters.xploitclient.utils.FriendManager;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ExploitHackFileHelper {
  public static void saveClickGui() {
    SCHEDULE_SAVE_CLICKGUI = IllIlIl[0];
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[15]];
    ExploitHackFileMang.createEmptyFile(new String[IllIlIl[1]]);
    String IlIIIIIlIIllIll = IIlIlIl[IllIlIl[16]];
    Iterator<Window> iterator = ClickGui.clickGui.windows.iterator();
    while (llllIIIIl(iterator.hasNext())) {
      Window llIIIIIlIIllIll = iterator.next();
      IlIIIIIlIIllIll = String.valueOf((new StringBuilder()).append(IlIIIIIlIIllIll).append(llIIIIIlIIllIll.x1).append(IIlIlIl[IllIlIl[17]]).append(llIIIIIlIIllIll.y1).append(IIlIlIl[IllIlIl[18]]));
      "".length();
      if (((0x6F ^ 0x4E) & (0x52 ^ 0x73 ^ 0xFFFFFFFF)) > "  ".length())
        return; 
    } 
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[19]];
    ExploitHackFileMang.appendFile(IlIIIIIlIIllIll, new String[IllIlIl[1]]);
  }
  
  private static boolean IIIIlIIIl(byte IlIllIllllIlIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static boolean IlIIlIIIl(long lllIlIllllIlIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 >= null);
  }
  
  public static String readMiscSetting(String IlIIIllIIIllIll) {
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[29]];
    JsonElement llIIIllIIIllIll = ExploitHackJsonHelper.readJsonElement(IlIIIllIIIllIll, new String[IllIlIl[1]]);
    try {
      return llIIIllIIIllIll.getAsString();
    } catch (Exception lIlIIllIIIllIll) {
      return null;
    } 
  }
  
  private static boolean lIIIlIIIl(String IIIIlIllllIlIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 < null);
  }
  
  public static void readFriends() {
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[24]];
    XploitClient.friendMang = new FriendManager(ExploitHackFileMang.readFileLines(new String[IllIlIl[1]]));
  }
  
  private static boolean llIIlIIIl(byte IllllIllllIlIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static boolean llllIIIIl(long IIlllIllllIlIll) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  static {
    SCHEDULE_SAVE_FRIENDS = IllIlIl[0];
    SCHEDULE_SAVE_CLICKGUI = IllIlIl[0];
  }
  
  public static void saveFriends() {
    SCHEDULE_SAVE_FRIENDS = IllIlIl[0];
    String IIllIllIIIllIll = IIlIlIl[IllIlIl[25]];
    Iterator<String> iterator = XploitClient.friendMang.getFriends().iterator();
    while (llllIIIIl(iterator.hasNext())) {
      String lIllIllIIIllIll = iterator.next();
      IIllIllIIIllIll = String.valueOf((new StringBuilder()).append(IIllIllIIIllIll).append(lIllIllIIIllIll).append(IIlIlIl[IllIlIl[26]]));
      "".length();
      if (-(0xB1 ^ 0xB5) > 0)
        return; 
    } 
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[27]];
    ExploitHackFileMang.createEmptyFile(new String[IllIlIl[1]]);
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[28]];
    ExploitHackFileMang.appendFile(IIllIllIIIllIll, new String[IllIlIl[1]]);
  }
  
  public static void readPrefix() {
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[23]];
    List<String> IlIIlllIIIllIll = ExploitHackFileMang.readFileLines(new String[IllIlIl[1]]);
    if (IIIIlIIIl(IlIIlllIIIllIll.isEmpty()))
      Command.PREFIX = IlIIlllIIIllIll.get(IllIlIl[0]); 
  }
  
  private static String lllIIIIIl(byte IIllllIIIIllIll, String IIIIIIlIIIllIll) {
    // Byte code:
    //   0: new java/lang/String
    //   3: dup
    //   4: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   7: aload_0
    //   8: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   11: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   14: invokevirtual decode : ([B)[B
    //   17: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   20: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   23: astore_0
    //   24: new java/lang/StringBuilder
    //   27: dup
    //   28: invokespecial <init> : ()V
    //   31: astore_2
    //   32: aload_1
    //   33: invokevirtual toCharArray : ()[C
    //   36: astore_3
    //   37: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   40: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   43: iconst_0
    //   44: iaload
    //   45: iaload
    //   46: istore #4
    //   48: aload_0
    //   49: invokevirtual toCharArray : ()[C
    //   52: astore #5
    //   54: aload #5
    //   56: arraylength
    //   57: istore #6
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   62: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   65: iconst_0
    //   66: iaload
    //   67: iaload
    //   68: istore #7
    //   70: iload #7
    //   72: iload #6
    //   74: invokestatic lIlIlIIlIlIlII : (II)Z
    //   77: invokestatic llllIIIIl : (I)Z
    //   80: ifeq -> 240
    //   83: aload #5
    //   85: iload #7
    //   87: caload
    //   88: istore #8
    //   90: aload_2
    //   91: iload #8
    //   93: aload_3
    //   94: iload #4
    //   96: aload_3
    //   97: arraylength
    //   98: irem
    //   99: caload
    //   100: ixor
    //   101: i2c
    //   102: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   105: ldc ''
    //   107: invokevirtual length : ()I
    //   110: pop2
    //   111: iinc #4, 1
    //   114: iinc #7, 1
    //   117: ldc ''
    //   119: invokevirtual length : ()I
    //   122: ldc ''
    //   124: invokevirtual length : ()I
    //   127: pop2
    //   128: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   131: iconst_0
    //   132: iaload
    //   133: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   136: bipush #32
    //   138: iaload
    //   139: iadd
    //   140: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   143: bipush #33
    //   145: iaload
    //   146: isub
    //   147: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   150: bipush #13
    //   152: iaload
    //   153: iadd
    //   154: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   157: bipush #34
    //   159: iaload
    //   160: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   163: bipush #35
    //   165: iaload
    //   166: ixor
    //   167: ixor
    //   168: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   171: bipush #36
    //   173: iaload
    //   174: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   177: bipush #37
    //   179: iaload
    //   180: iadd
    //   181: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   184: bipush #38
    //   186: iaload
    //   187: isub
    //   188: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   191: bipush #39
    //   193: iaload
    //   194: iadd
    //   195: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   198: bipush #9
    //   200: iaload
    //   201: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   204: bipush #40
    //   206: iaload
    //   207: iadd
    //   208: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   211: bipush #41
    //   213: iaload
    //   214: isub
    //   215: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   218: bipush #42
    //   220: iaload
    //   221: iadd
    //   222: ixor
    //   223: ldc_w ' '
    //   226: invokevirtual length : ()I
    //   229: ineg
    //   230: ixor
    //   231: iand
    //   232: invokestatic llllIIIIl : (I)Z
    //   235: ifeq -> 70
    //   238: aconst_null
    //   239: areturn
    //   240: aload_2
    //   241: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   244: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   37	208	3	lIlIIIlIIIllIll	[C
    //   90	24	8	IIIlIIlIIIllIll	C
    //   48	197	4	IIlIIIlIIIllIll	I
    //   0	245	3	lIIlllIIIIllIll	J
    //   0	245	1	lIIIIIlIIIllIll	Ljava/lang/String;
    //   0	245	0	llllllIIIIllIll	Ljava/lang/String;
    //   0	245	6	lIlIllIIIIllIll	C
    //   0	245	1	IIIIIIlIIIllIll	Ljava/lang/String;
    //   0	245	2	IIllIIlIIIllIll	F
    //   0	245	7	IIlIllIIIIllIll	S
    //   0	245	8	llIIllIIIIllIll	D
    //   0	245	5	IllIIIlIIIllIll	F
    //   0	245	8	IIIIlIlIIIllIll	S
    //   0	245	4	lllIllIIIIllIll	C
    //   0	245	1	llIlllIIIIllIll	I
    //   0	245	2	IlIlllIIIIllIll	C
    //   32	213	2	IlllIIlIIIllIll	Ljava/lang/StringBuilder;
    //   0	245	6	lllIIIlIIIllIll	S
    //   0	245	0	IIllllIIIIllIll	B
    //   0	245	4	IlIlIIlIIIllIll	S
    //   0	245	7	llIIIIlIIIllIll	D
    //   0	245	5	IllIllIIIIllIll	B
    //   0	245	3	lIllIIlIIIllIll	J
    //   0	245	0	IlllllIIIIllIll	Ljava/lang/String;
  }
  
  private static String IIIlIIIIl(byte lIlIIlIIIIllIll, Exception IllIIlIIIIllIll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   39: iconst_1
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   56: iconst_2
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   71: iconst_2
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	0	llIlIlIIIIllIll	Ljava/lang/String;
    //   0	113	0	lIlIIlIIIIllIll	B
    //   47	59	2	lllIIlIIIIllIll	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	3	IlIIIlIIIIllIll	Z
    //   0	113	1	lIllIlIIIIllIll	Ljava/lang/String;
    //   0	113	3	IIllIlIIIIllIll	I
    //   107	4	2	IlIlIlIIIIllIll	Ljava/lang/Exception;
    //   0	113	2	lIIlIlIIIIllIll	Ljava/lang/Exception;
    //   0	113	1	IllIIlIIIIllIll	Ljava/lang/Exception;
    //   0	113	0	IlllIlIIIIllIll	S
    //   0	113	2	llIIIlIIIIllIll	D
    //   64	42	3	IIIlIlIIIIllIll	Ljavax/crypto/Cipher;
    //   0	113	1	IIlIIlIIIIllIll	S
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  public static void saveMiscSetting(Exception llIllIlIIIllIll, String IIlllIlIIIllIll) {
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[30]];
    ExploitHackJsonHelper.addJsonElement((String)llIllIlIIIllIll, (JsonElement)new JsonPrimitive(IIlllIlIIIllIll), new String[IllIlIl[1]]);
  }
  
  private static void lIllIIIIl() {
    IllIlIl = new int[43];
    IllIlIl[0] = (0x8C ^ 0xBD ^ 0x4B ^ 0x24) & (3 + 184 - 95 + 138 ^ 122 + 180 - 212 + 94 ^ -" ".length());
    IllIlIl[1] = " ".length();
    IllIlIl[2] = "  ".length();
    IllIlIl[3] = "   ".length();
    IllIlIl[4] = 60 + 9 - -83 + 7 ^ 142 + 36 - 127 + 104;
    IllIlIl[5] = 0x56 ^ 0x5D ^ 0xB2 ^ 0xBC;
    IllIlIl[6] = 0xE ^ 0x5 ^ 0x76 ^ 0x7B;
    IllIlIl[7] = 0x11 ^ 0x16;
    IllIlIl[8] = 0x2D ^ 0x25;
    IllIlIl[9] = 0xB8 ^ 0xB1;
    IllIlIl[10] = 0x41 ^ 0x34 ^ 95 + 13 - 104 + 123;
    IllIlIl[11] = 0xA1 ^ 0xAA;
    IllIlIl[12] = 66 + 93 - 55 + 35 ^ 98 + 94 - 180 + 123;
    IllIlIl[13] = 0x49 ^ 0x1B ^ 0x32 ^ 0x6D;
    IllIlIl[14] = 0xBB ^ 0xB5;
    IllIlIl[15] = 0x7F ^ 0x70;
    IllIlIl[16] = 161 + 59 - 54 + 1 ^ 82 + 51 - 8 + 58;
    IllIlIl[17] = 0x5F ^ 0x4E;
    IllIlIl[18] = 0xB0 ^ 0xA2;
    IllIlIl[19] = 0x70 ^ 0x63;
    IllIlIl[20] = 49 + 113 - 44 + 43 ^ 7 + 85 - -83 + 6;
    IllIlIl[21] = 0x2C ^ 0x39;
    IllIlIl[22] = 0xAB ^ 0xBD;
    IllIlIl[23] = 0xB8 ^ 0xAF;
    IllIlIl[24] = 0x64 ^ 0x7C;
    IllIlIl[25] = 0x21 ^ 0x17 ^ 0x38 ^ 0x17;
    IllIlIl[26] = 0xD9 ^ 0xC3;
    IllIlIl[27] = 0x12 ^ 0x9;
    IllIlIl[28] = 0x60 ^ 0x7C;
    IllIlIl[29] = 0xAB ^ 0xB6;
    IllIlIl[30] = 0xB5 ^ 0xAB;
    IllIlIl[31] = 0xBB ^ 0xA4;
    IllIlIl[32] = 0x1E ^ 0x4D;
    IllIlIl[33] = -(3 + 136 - 111 + 119 ^ 41 + 49 - 89 + 139);
    IllIlIl[34] = (0x9 ^ 0x24) + (0x71 ^ 0x24) - -" ".length() + (0x66 ^ 0x27);
    IllIlIl[35] = 73 + 85 - 15 + 0 + (0x7A ^ 0x2F) - (0xF6 ^ 0xAC) + (0x38 ^ 0x29);
    IllIlIl[36] = 93 + 13 - 24 + 49 + (0x7B ^ 0x37) - (0xE8 ^ 0xB5) + (0x88 ^ 0xAD);
    IllIlIl[37] = 0x2D ^ 0x60;
    IllIlIl[38] = 128 + 145 - 128 + 64;
    IllIlIl[39] = (0x9F ^ 0x8B) + (0xF ^ 0x35) - (0x22 ^ 0xA) + (0x1D ^ 0x64);
    IllIlIl[40] = 0x6D ^ 0x3;
    IllIlIl[41] = 0xF5 ^ 0xB6;
    IllIlIl[42] = 0xC6 ^ 0x84 ^ 0x35 ^ 0x29;
  }
  
  public static void saveModules() {
    SCHEDULE_SAVE_MODULES = IllIlIl[0];
    JsonObject llllIlIlIIllIll = new JsonObject();
    Iterator<Module> iterator = ModuleManager.getModules().iterator();
    while (llllIIIIl(iterator.hasNext())) {
      Module IIIIllIlIIllIll = iterator.next();
      JsonObject lIIIllIlIIllIll = new JsonObject();
      if (llllIIIIl(IIIIllIlIIllIll.isToggled()) && IIIIlIIIl(IIIIllIlIIllIll.getName().equals(IIlIlIl[IllIlIl[0]])) && IIIIlIIIl(IIIIllIlIIllIll.getName().equals(IIlIlIl[IllIlIl[1]])))
        lIIIllIlIIllIll.add(IIlIlIl[IllIlIl[2]], (JsonElement)new JsonPrimitive(Boolean.valueOf(IllIlIl[1]))); 
      if (!lIIIlIIIl(IIIIllIlIIllIll.getKey()) || IlIIlIIIl(IIIIllIlIIllIll.getDefaultKey()))
        lIIIllIlIIllIll.add(IIlIlIl[IllIlIl[3]], (JsonElement)new JsonPrimitive(Integer.valueOf(IIIIllIlIIllIll.getKey()))); 
      if (IIIIlIIIl(IIIIllIlIIllIll.getSettings().isEmpty())) {
        JsonObject llIIllIlIIllIll = new JsonObject();
        JsonObject IlIIllIlIIllIll = new JsonObject();
        Iterator<SettingBase> iterator1 = IIIIllIlIIllIll.getSettings().iterator();
        while (llllIIIIl(iterator1.hasNext())) {
          SettingBase IIlIllIlIIllIll = iterator1.next();
          String IllIllIlIIllIll = IIlIllIlIIllIll.getName();
          int lIlIllIlIIllIll = IllIlIl[0];
          while (llllIIIIl(IlIIllIlIIllIll.has(IllIllIlIIllIll))) {
            IllIllIlIIllIll = String.valueOf((new StringBuilder()).append(IIlIllIlIIllIll.getName()).append(++lIlIllIlIIllIll));
            "".length();
            if (((0x79 ^ 0x61) & (0x81 ^ 0x99 ^ 0xFFFFFFFF)) != 0)
              return; 
          } 
          IlIIllIlIIllIll.add(IllIllIlIIllIll, IIlIllIlIIllIll.saveSettings());
          if (IIIIlIIIl(IIlIllIlIIllIll.isDefault()))
            llIIllIlIIllIll.add(IllIllIlIIllIll, IIlIllIlIIllIll.saveSettings()); 
          "".length();
          if (-(0xD5 ^ 0xAE ^ 23 + 39 - 5 + 70) >= 0)
            return; 
        } 
        if (llllIIIIl(llIIllIlIIllIll.size()))
          lIIIllIlIIllIll.add(IIlIlIl[IllIlIl[4]], (JsonElement)llIIllIlIIllIll); 
      } 
      if (llllIIIIl(lIIIllIlIIllIll.size()))
        llllIlIlIIllIll.add(IIIIllIlIIllIll.getName(), (JsonElement)lIIIllIlIIllIll); 
      "".length();
      if (-" ".length() > 0)
        return; 
    } 
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[5]];
    ExploitHackJsonHelper.setJsonFile(llllIlIlIIllIll, new String[IllIlIl[1]]);
  }
  
  public static void readModules() {
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[6]];
    JsonObject IlIIlIIlIIllIll = ExploitHackJsonHelper.readJsonFile(new String[IllIlIl[1]]);
    if (llIIlIIIl(IlIIlIIlIIllIll))
      return; 
    Iterator<Map.Entry<String, JsonElement>> iterator = IlIIlIIlIIllIll.entrySet().iterator();
    while (llllIIIIl(iterator.hasNext())) {
      Map.Entry<String, JsonElement> llIIlIIlIIllIll = iterator.next();
      Module IIlIlIIlIIllIll = ModuleManager.getModuleByName(llIIlIIlIIllIll.getKey());
      if (llIIlIIIl(IIlIlIIlIIllIll)) {
        "".length();
        if (null != null)
          return; 
        continue;
      } 
      if (llllIIIIl(((JsonElement)llIIlIIlIIllIll.getValue()).isJsonObject())) {
        JsonObject lIlIlIIlIIllIll = ((JsonElement)llIIlIIlIIllIll.getValue()).getAsJsonObject();
        if (llllIIIIl(lIlIlIIlIIllIll.has(IIlIlIl[IllIlIl[7]])))
          IIlIlIIlIIllIll.setToggled(IllIlIl[1]); 
        if (llllIIIIl(lIlIlIIlIIllIll.has(IIlIlIl[IllIlIl[8]])) && llllIIIIl(lIlIlIIlIIllIll.get(IIlIlIl[IllIlIl[9]]).isJsonPrimitive()) && llllIIIIl(lIlIlIIlIIllIll.get(IIlIlIl[IllIlIl[10]]).getAsJsonPrimitive().isNumber()))
          IIlIlIIlIIllIll.setKey(lIlIlIIlIIllIll.get(IIlIlIl[IllIlIl[11]]).getAsInt()); 
        if (llllIIIIl(lIlIlIIlIIllIll.has(IIlIlIl[IllIlIl[12]])) && llllIIIIl(lIlIlIIlIIllIll.get(IIlIlIl[IllIlIl[13]]).isJsonObject())) {
          Iterator<Map.Entry<String, JsonElement>> iterator1 = lIlIlIIlIIllIll.get(IIlIlIl[IllIlIl[14]]).getAsJsonObject().entrySet().iterator();
          while (llllIIIIl(iterator1.hasNext())) {
            Map.Entry<String, JsonElement> IllIlIIlIIllIll = iterator1.next();
            HashMap<String, Integer> lllIlIIlIIllIll = new HashMap<>();
            Iterator<SettingBase> iterator2 = IIlIlIIlIIllIll.getSettings().iterator();
            while (llllIIIIl(iterator2.hasNext())) {
              SettingBase IIIllIIlIIllIll = iterator2.next();
              if (llllIIIIl(lllIlIIlIIllIll.containsKey(IIIllIIlIIllIll.getName()))) {
                "".length();
                if (((0x94 ^ 0x9F) & (0x46 ^ 0x4D ^ 0xFFFFFFFF)) != 0)
                  return; 
              } else {
              
              } 
              String lIIllIIlIIllIll = IIIllIIlIIllIll.getName();
              if (llllIIIIl(lIIllIIlIIllIll.equals(IllIlIIlIIllIll.getKey()))) {
                IIIllIIlIIllIll.readSettings(IllIlIIlIIllIll.getValue());
                "".length();
                if (null != null)
                  return; 
                break;
              } 
              if (llllIIIIl(lllIlIIlIIllIll.containsKey(IIIllIIlIIllIll.getName()))) {
                "".length();
                if ("  ".length() <= 0)
                  return; 
              } else {
              
              } 
              "".length();
              "".length();
              if (((0x71 ^ 0x65) & (0x8D ^ 0x99 ^ 0xFFFFFFFF) ^ 0x39 ^ 0x3D) == 0)
                return; 
            } 
            "".length();
            if ((0x69 ^ 0x4C ^ 0x33 ^ 0x12) != (0xB ^ 0x63 ^ 0x4F ^ 0x23))
              return; 
          } 
        } 
      } 
      "".length();
      if (-"  ".length() >= 0)
        return; 
    } 
  }
  
  public static void readClickGui() {
    (new String[IllIlIl[1]])[IllIlIl[0]] = IIlIlIl[IllIlIl[20]];
    List<String> IIIllllIIIllIll = ExploitHackFileMang.readFileLines(new String[IllIlIl[1]]);
    try {
      int lIIllllIIIllIll = IllIlIl[0];
      Iterator<Window> iterator = ClickGui.clickGui.windows.iterator();
      while (llllIIIIl(iterator.hasNext())) {
        Window IlIllllIIIllIll = iterator.next();
        IlIllllIIIllIll.x1 = Integer.parseInt(((String)IIIllllIIIllIll.get(lIIllllIIIllIll)).split(IIlIlIl[IllIlIl[21]])[IllIlIl[0]]);
        IlIllllIIIllIll.y1 = Integer.parseInt(((String)IIIllllIIIllIll.get(lIIllllIIIllIll)).split(IIlIlIl[IllIlIl[22]])[IllIlIl[1]]);
        lIIllllIIIllIll++;
        "".length();
        if (" ".length() < 0)
          return; 
      } 
      "".length();
      if ((68 + 120 - 143 + 103 ^ 26 + 91 - 13 + 40) != (0xA5 ^ 0x95 ^ 0x41 ^ 0x75))
        return; 
    } catch (Exception exception) {}
  }
  
  private static void lIIlIIIIl() {
    IIlIlIl = new String[IllIlIl[31]];
    IIlIlIl[IllIlIl[0]] = IllIIIIIl("9/PoSMgPjHCQ4nvB/MpMww==", "wJqdj");
    IIlIlIl[IllIlIl[1]] = lllIIIIIl("PBA3BDQbDw==", "zbRaW");
    IIlIlIl[IllIlIl[2]] = IIIlIIIIl("YEsEbdlecdA=", "Mnqop");
    IIlIlIl[IllIlIl[3]] = IIIlIIIIl("gIZjUYfWe/4=", "EhvfF");
    IIlIlIl[IllIlIl[4]] = IllIIIIIl("QAsZcJlv0nt6eH4vXvmL2w==", "iCjmx");
    IIlIlIl[IllIlIl[5]] = IIIlIIIIl("QBjlYypE0Lfyrk5mDATgTQ==", "fFNQR");
    IIlIlIl[IllIlIl[6]] = IIIlIIIIl("69A0YYQvkXj14V3SqWbYtQ==", "uzTOZ");
    IIlIlIl[IllIlIl[7]] = lllIIIIIl("PRsfIQMsEA==", "ItxFo");
    IIlIlIl[IllIlIl[8]] = IIIlIIIIl("Mt/KNSW//G8=", "YvJBH");
    IIlIlIl[IllIlIl[9]] = lllIIIIIl("FC0eEw==", "vDpwg");
    IIlIlIl[IllIlIl[10]] = IllIIIIIl("qUdN2o6tAq4=", "jGQfA");
    IIlIlIl[IllIlIl[11]] = IIIlIIIIl("v+AG0EmR86k=", "hCXXg");
    IIlIlIl[IllIlIl[12]] = lllIIIIIl("NgQgASIrBic=", "EaTuK");
    IIlIlIl[IllIlIl[13]] = IIIlIIIIl("HWtg4roESncpj8C0Y9iiDg==", "dyhTP");
    IIlIlIl[IllIlIl[14]] = lllIIIIIl("MA8ZBTotDR4=", "CjmqS");
    IIlIlIl[IllIlIl[15]] = IIIlIIIIl("GnK7u7AyjHfuh5vt0pMKqw==", "OMMon");
    IIlIlIl[IllIlIl[16]] = IllIIIIIl("fF0FcgAFBF8=", "jmiem");
    IIlIlIl[IllIlIl[17]] = IIIlIIIIl("v+esujQF7SM=", "HBNyU");
    IIlIlIl[IllIlIl[18]] = lllIIIIIl("Yw==", "ierfF");
    IIlIlIl[IllIlIl[19]] = IllIIIIIl("lwZpsZ9SeNuSWIMnKZqvww==", "Xsmdl");
    IIlIlIl[IllIlIl[20]] = IllIIIIIl("aFxhuO+iR9g44QZeng4ShQ==", "YeeZo");
    IIlIlIl[IllIlIl[21]] = IIIlIIIIl("9k/fcg+Nj14=", "yFkFi");
    IIlIlIl[IllIlIl[22]] = IIIlIIIIl("JMP7csv0+Iw=", "JJgEX");
    IIlIlIl[IllIlIl[23]] = IllIIIIIl("n538gvRakaDhsAPYS19elQ==", "VHGYm");
    IIlIlIl[IllIlIl[24]] = IIIlIIIIl("BbLQtjPw3LMOgVgICH/3hg==", "baDBI");
    IIlIlIl[IllIlIl[25]] = IIIlIIIIl("5jqwuJEiokg=", "sqncO");
    IIlIlIl[IllIlIl[26]] = lllIIIIIl("fA==", "vroiM");
    IIlIlIl[IllIlIl[27]] = IIIlIIIIl("vS4t7kHJUEx353tMsSgw3g==", "imMAE");
    IIlIlIl[IllIlIl[28]] = lllIIIIIl("BDY/HywGN3gOOhY=", "bDVzB");
    IIlIlIl[IllIlIl[29]] = IIIlIIIIl("pQhmHkC/fEusU/vyLVNNYQ==", "Xrawg");
    IIlIlIl[IllIlIl[30]] = IllIIIIIl("2BYeb7NolVXJwe0KetZ/8w==", "jszSd");
  }
  
  private static String IllIIIIIl(long IIIIlIIIIIllIll, char IIIlIIIIIIllIll) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/utils/file/ExploitHackFileHelper.IllIlIl : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	3	IIlIlIIIIIllIll	I
    //   119	4	2	IIllIIIIIIllIll	Ljava/lang/Exception;
    //   76	42	3	lllIIIIIIIllIll	Ljavax/crypto/Cipher;
    //   0	125	0	IllIIIIIIIllIll	Ljava/lang/String;
    //   0	125	1	IlIIlIIIIIllIll	F
    //   0	125	1	IlIlIIIIIIllIll	Ljava/lang/String;
    //   0	125	1	IIlIIIIIIIllIll	I
    //   0	125	0	IIIIlIIIIIllIll	J
    //   0	125	3	IlIIIIIIIIllIll	J
    //   0	125	2	IIIlIIIIIIllIll	C
    //   0	125	0	lIlIIIIIIIllIll	J
    //   0	125	2	llIIIIIIIIllIll	Ljava/lang/String;
    //   59	59	2	IlllIIIIIIllIll	Ljavax/crypto/spec/SecretKeySpec;
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  static {
    lIllIIIIl();
    lIIlIIIIl();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclien\\utils\file\ExploitHackFileHelper.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */