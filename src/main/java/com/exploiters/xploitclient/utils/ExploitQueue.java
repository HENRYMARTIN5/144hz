package com.exploiters.xploitclient.utils;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.commons.lang3.tuple.MutablePair;

public class ExploitQueue {
  public static void add(boolean IIIIIlIlIIIlIl, Runnable lIIIIlIlIIIlIl) {
    add(IIIIIlIlIIIlIl, lIIIIlIlIIIlIl, IlIllIIIIl[0]);
  }
  
  public static boolean isEmpty(Exception lIllIIIlIIIlIl) {
    if (llIIllIlIll(queues.containsKey(lIllIIIlIIIlIl))) {
      "".length();
      if ("  ".length() == 0)
        return (131 + 31 - 136 + 136 ^ 87 + 36 - -17 + 45) & (0xF9 ^ 0xAB ^ 0x77 ^ 0x3E ^ -" ".length()); 
    } else {
    
    } 
    return IlIllIIIIl[0];
  }
  
  public static void add(long lIlIIlIlIIIlIl) {
    add(lIIllIIIIl[IlIllIIIIl[0]], lIlIIlIlIIIlIl);
  }
  
  private static boolean IIlIllIlIll(boolean lIIlIllIIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public static void nextQueue() {
    Iterator<Map.Entry<String, Deque<MutablePair<Runnable, Integer>>>> iterator = (new HashMap<>(queues)).entrySet().iterator();
    while (IIlIllIlIll(iterator.hasNext())) {
      Map.Entry<String, Deque<MutablePair<Runnable, Integer>>> llIIIIIlIIIlIl = iterator.next();
      Deque<MutablePair<Runnable, Integer>> lIlIIIIlIIIlIl = llIIIIIlIIIlIl.getValue();
      MutablePair<Runnable, Integer> IIlIIIIlIIIlIl = lIlIIIIlIIIlIl.peek();
      if (lIlIllIlIll(((Integer)IIlIIIIlIIIlIl.right).intValue())) {
        MutablePair<Runnable, Integer> mutablePair = IIlIIIIlIIIlIl;
        Integer integer = (Integer)mutablePair.right;
        Object object = mutablePair.right = Integer.valueOf(((Integer)mutablePair.right).intValue() - IlIllIIIIl[1]);
        "".length();
        "".length();
        if (-" ".length() > (0x3E ^ 0x5C ^ 0x16 ^ 0x70))
          return; 
      } else {
        ((Runnable)IIlIIIIlIIIlIl.left).run();
        "".length();
      } 
      if (IIlIllIlIll(lIlIIIIlIIIlIl.isEmpty()))
        "".length(); 
      "".length();
      if ("  ".length() != "  ".length())
        return; 
    } 
  }
  
  private static boolean llIIllIlIll(Exception lllIIllIIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static boolean lIlIllIlIll(String lIlIIllIIIIlIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 > null);
  }
  
  private static void IlIIllIlIll() {
    IlIllIIIIl = new int[3];
    IlIllIIIIl[0] = (46 + 94 - -83 + 2 ^ 92 + 138 - 97 + 46) & (0x64 ^ 0x63 ^ 0x74 ^ 0x21 ^ -" ".length());
    IlIllIIIIl[1] = " ".length();
    IlIllIIIIl[2] = "  ".length();
  }
  
  private static String IIIIllIlIll(double IlllIllIIIIlIl, byte IIllIllIIIIlIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/utils/ExploitQueue.IlIllIIIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/utils/ExploitQueue.IlIllIIIIl : [I
    //   39: iconst_1
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/utils/ExploitQueue.IlIllIIIIl : [I
    //   56: iconst_2
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/utils/ExploitQueue.IlIllIIIIl : [I
    //   71: iconst_2
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	2	IlIIlllIIIIlIl	Ljava/lang/Exception;
    //   64	42	3	lIIIlllIIIIlIl	Ljavax/crypto/Cipher;
    //   0	113	0	IIlIlllIIIIlIl	Ljava/lang/String;
    //   0	113	3	lIlIlllIIIIlIl	I
    //   0	113	2	IIllIllIIIIlIl	B
    //   0	113	0	IlllIllIIIIlIl	D
    //   107	4	2	llIIlllIIIIlIl	Ljava/lang/Exception;
    //   0	113	1	llllIllIIIIlIl	Ljava/lang/Exception;
    //   0	113	3	llIlIllIIIIlIl	Ljava/lang/String;
    //   0	113	1	IllIlllIIIIlIl	Ljava/lang/String;
    //   0	113	1	lIllIllIIIIlIl	Z
    //   0	113	0	lllIlllIIIIlIl	S
    //   47	59	2	IIIIlllIIIIlIl	Ljavax/crypto/spec/SecretKeySpec;
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static void lIIIllIlIll() {
    lIIllIIIIl = new String[IlIllIIIIl[1]];
    lIIllIIIIl[IlIllIIIIl[0]] = IIIIllIlIll("qPQrNuj9hLA=", "GarWu");
  }
  
  public static void add(Exception IllIlIIlIIIlIl, boolean lIlIlIIlIIIlIl, long IIlIlIIlIIIlIl) {
    if (llIIllIlIll(queues.containsKey(IllIlIIlIIIlIl))) {
      Deque<MutablePair<Runnable, Integer>> IlIllIIlIIIlIl = new ArrayDeque<>();
      "".length();
      "".length();
    } 
    "".length();
  }
  
  public static void cancelQueue(Exception IIIIlIIlIIIlIl) {
    "".length();
  }
  
  static {
    IlIIllIlIll();
    lIIIllIlIll();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclien\\utils\ExploitQueue.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */