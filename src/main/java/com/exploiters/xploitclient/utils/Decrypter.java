package com.exploiters.xploitclient.utils;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class Decrypter {
  private static String IIllIlllll(Exception lIIIlIlIIIIlIIl, float lIIllIlIIIIlIIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   36: iconst_2
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   51: iconst_3
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   68: iconst_4
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   83: iconst_4
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	3	IlIllIlIIIIlIIl	I
    //   76	42	3	llIIlIlIIIIlIIl	Ljavax/crypto/Cipher;
    //   0	125	1	lIlIlIlIIIIlIIl	Ljava/lang/String;
    //   59	59	2	lllIlIlIIIIlIIl	Ljavax/crypto/spec/SecretKeySpec;
    //   119	4	2	IllIlIlIIIIlIIl	Ljava/lang/Exception;
    //   0	125	1	lIIllIlIIIIlIIl	F
    //   0	125	3	IlllIIlIIIIlIIl	B
    //   0	125	0	IIIllIlIIIIlIIl	J
    //   0	125	1	IIIIlIlIIIIlIIl	Ljava/lang/String;
    //   0	125	2	llllIIlIIIIlIIl	B
    //   0	125	0	lIIIlIlIIIIlIIl	Ljava/lang/Exception;
    //   0	125	0	IlIIlIlIIIIlIIl	Ljava/lang/String;
    //   0	125	2	IIlIlIlIIIIlIIl	C
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  public Decrypter(String lIIIIlIlIIIlIIl) throws Exception {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial <init> : ()V
    //   4: aload_1
    //   5: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   8: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   11: astore_2
    //   12: getstatic com/exploiters/xploitclient/utils/Decrypter.lllIIIlIl : [Ljava/lang/String;
    //   15: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   18: iconst_0
    //   19: iaload
    //   20: aaload
    //   21: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   24: astore_3
    //   25: aload_3
    //   26: aload_2
    //   27: invokevirtual digest : ([B)[B
    //   30: astore_2
    //   31: aload_2
    //   32: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   35: iconst_1
    //   36: iaload
    //   37: invokestatic copyOf : ([BI)[B
    //   40: astore_2
    //   41: aload_0
    //   42: new javax/crypto/spec/SecretKeySpec
    //   45: dup
    //   46: aload_2
    //   47: getstatic com/exploiters/xploitclient/utils/Decrypter.lllIIIlIl : [Ljava/lang/String;
    //   50: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   53: iconst_2
    //   54: iaload
    //   55: aaload
    //   56: invokespecial <init> : ([BLjava/lang/String;)V
    //   59: putfield key : Ljavax/crypto/SecretKey;
    //   62: aload_0
    //   63: getstatic com/exploiters/xploitclient/utils/Decrypter.lllIIIlIl : [Ljava/lang/String;
    //   66: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   69: iconst_3
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: putfield dcipher : Ljavax/crypto/Cipher;
    //   78: return
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   12	67	2	IIIIIlIlIIIlIIl	[B
    //   0	79	3	llIllIIlIIIlIIl	C
    //   25	54	3	lllllIIlIIIlIIl	Ljava/security/MessageDigest;
    //   0	79	0	IlIIIlIlIIIlIIl	Lcom/exploiters/xploitclient/utils/Decrypter;
    //   0	79	1	lIlllIIlIIIlIIl	I
    //   0	79	2	IIlllIIlIIIlIIl	Ljava/lang/Exception;
    //   0	79	1	lIIIIlIlIIIlIIl	Ljava/lang/String;
    //   0	79	0	IllllIIlIIIlIIl	C
  }
  
  public String decrypt(String IllIIIIlIIIlIIl) throws Exception {
    this.dcipher.init(IIIlIIlIl[3], this.key);
    byte[] lIlIIIIlIIIlIIl = Base64.getDecoder().decode(IllIIIIlIIIlIIl);
    byte[] IIlIIIIlIIIlIIl = this.dcipher.doFinal(lIlIIIIlIIIlIIl);
    return new String(IIlIIIIlIIIlIIl, StandardCharsets.UTF_8);
  }
  
  public static String getPassPhrase() {
    if (IIIIllllll(passPhrase)) {
      String lIIllIIlIIIlIIl = lllIIIlIl[IIIlIIlIl[4]];
      lIIllIIlIIIlIIl = String.valueOf((new StringBuilder()).append(lIIllIIlIIIlIIl).append(System.getProperty(lllIIIlIl[IIIlIIlIl[5]])));
      lIIllIIlIIIlIIl = String.valueOf((new StringBuilder()).append(lIIllIIlIIIlIIl).append(System.getProperty(lllIIIlIl[IIIlIIlIl[6]])));
      lIIllIIlIIIlIIl = String.valueOf((new StringBuilder()).append(lIIllIIlIIIlIIl).append(System.getProperty(lllIIIlIl[IIIlIIlIl[7]])));
      lIIllIIlIIIlIIl = String.valueOf((new StringBuilder()).append(lIIllIIlIIIlIIl).append(String.valueOf(Runtime.getRuntime().availableProcessors())));
      lIIllIIlIIIlIIl = String.valueOf((new StringBuilder()).append(lIIllIIlIIIlIIl).append(System.getProperty(lllIIIlIl[IIIlIIlIl[8]])));
      lIIllIIlIIIlIIl = String.valueOf((new StringBuilder()).append(lIIllIIlIIIlIIl).append(System.getProperty(lllIIIlIl[IIIlIIlIl[9]])));
      passPhrase = lIIllIIlIIIlIIl;
    } 
    return passPhrase;
  }
  
  private static boolean IIIIllllll(Exception llIlllIIIIIlIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  private static boolean lIIIllllll(String lIIlllIIIIIlIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static void llllIlllll() {
    IIIlIIlIl = new int[23];
    IIIlIIlIl[0] = (0xF4 ^ 0xA7) & (0x5E ^ 0xD ^ 0xFFFFFFFF);
    IIIlIIlIl[1] = 111 + 83 - 127 + 84 ^ 125 + 87 - 163 + 86;
    IIIlIIlIl[2] = " ".length();
    IIIlIIlIl[3] = "  ".length();
    IIIlIIlIl[4] = "   ".length();
    IIIlIIlIl[5] = 0x26 ^ 0x22;
    IIIlIIlIl[6] = 0x79 ^ 0x7C;
    IIIlIIlIl[7] = 46 + 119 - 120 + 127 ^ 50 + 57 - -21 + 42;
    IIIlIIlIl[8] = 0x6C ^ 0x6B;
    IIIlIIlIl[9] = 0xBF ^ 0xA3 ^ 0x7B ^ 0x6F;
    IIIlIIlIl[10] = 0x6 ^ 0x37 ^ 0x67 ^ 0x5F;
    IIIlIIlIl[11] = 0xF9 ^ 0xAA;
    IIIlIIlIl[12] = -(0x97 ^ 0x88);
    IIIlIIlIl[13] = 0x3D ^ 0x30;
    IIIlIIlIl[14] = (0x31 ^ 0x3C) + 82 + 26 - 92 + 125 - (0xA9 ^ 0xA2) + (0xAB ^ 0x9E);
    IIIlIIlIl[15] = (0x67 ^ 0x56) + 44 + 110 - 47 + 26 - (0x19 ^ 0x67) + (0xC5 ^ 0xA6);
    IIIlIIlIl[16] = 38 + 105 - 62 + 70;
    IIIlIIlIl[17] = 0x12 ^ 0x5F;
    IIIlIIlIl[18] = (0x71 ^ 0x63) + (0x1B ^ 0x55) - (0x93 ^ 0xA5) + 114 + 7 - -28 + 18;
    IIIlIIlIl[19] = 114 + 110 - 135 + 70;
    IIIlIIlIl[20] = 0xFE ^ 0x90;
    IIIlIIlIl[21] = 0x62 ^ 0x21;
    IIIlIIlIl[22] = 44 + 203 - 51 + 44 ^ 0 + 6 - -51 + 117;
  }
  
  public String encrypt(String IlIIlIIlIIIlIIl) throws Exception {
    // Byte code:
    //   0: aload_0
    //   1: getfield dcipher : Ljavax/crypto/Cipher;
    //   4: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   7: iconst_2
    //   8: iaload
    //   9: aload_0
    //   10: getfield key : Ljavax/crypto/SecretKey;
    //   13: invokevirtual init : (ILjava/security/Key;)V
    //   16: aload_0
    //   17: getfield dcipher : Ljavax/crypto/Cipher;
    //   20: aload_1
    //   21: invokevirtual getBytes : ()[B
    //   24: invokevirtual doFinal : ([B)[B
    //   27: astore_2
    //   28: new java/lang/String
    //   31: dup
    //   32: invokestatic getEncoder : ()Ljava/util/Base64$Encoder;
    //   35: aload_2
    //   36: invokevirtual encode : ([B)[B
    //   39: invokespecial <init> : ([B)V
    //   42: astore_3
    //   43: aload_3
    //   44: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   43	2	3	IIIIlIIlIIIlIIl	Ljava/lang/String;
    //   0	45	0	llIIlIIlIIIlIIl	Lcom/exploiters/xploitclient/utils/Decrypter;
    //   0	45	1	IlllIIIlIIIlIIl	B
    //   0	45	0	llllIIIlIIIlIIl	C
    //   28	17	2	lIIIlIIlIIIlIIl	[B
    //   0	45	3	IIllIIIlIIIlIIl	B
    //   0	45	2	lIllIIIlIIIlIIl	B
    //   0	45	1	IlIIlIIlIIIlIIl	Ljava/lang/String;
  }
  
  private static void IlllIlllll() {
    lllIIIlIl = new String[IIIlIIlIl[10]];
    lllIIIlIl[IIIlIIlIl[0]] = llIlIlllll("MRg3aVU=", "bPvDd");
    lllIIIlIl[IIIlIIlIl[2]] = IIllIlllll("jvNr2xarKZA=", "AfbAu");
    lllIIIlIl[IIIlIIlIl[3]] = IIllIlllll("9wu6FewZ0Vk=", "lDYqw");
    lllIIIlIl[IIIlIIlIl[4]] = lIllIlllll("AsLjLyQI2yI=", "GaVDu");
    lllIIIlIl[IIIlIIlIl[5]] = lIllIlllll("J1fbp/oz45Bzd8lCz2hfxg==", "FuLaH");
    lllIIIlIl[IIIlIIlIl[6]] = IIllIlllll("G21/bm3G4iU=", "qGRWr");
    lllIIIlIl[IIIlIIlIl[7]] = llIlIlllll("DgRsBC8TBCsdJA==", "awBrJ");
    lllIIIlIl[IIIlIIlIl[8]] = lIllIlllll("WRZgX12GnEo=", "HwMhu");
    lllIIIlIl[IIIlIIlIl[9]] = lIllIlllll("OkpPQXKMd/wkA2CnJVc5BA==", "jOybM");
  }
  
  private static String lIllIlllll(boolean IIIIIIlIIIIlIIl, float llllllIIIIIlIIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   39: iconst_2
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   56: iconst_3
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/utils/Decrypter.IIIlIIlIl : [I
    //   71: iconst_3
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	1	IIIlIIlIIIIlIIl	Ljava/lang/String;
    //   0	113	2	IIlIIIlIIIIlIIl	Ljava/lang/Exception;
    //   0	113	1	llllllIIIIIlIIl	F
    //   0	113	2	IlllllIIIIIlIIl	I
    //   0	113	0	IllIIIlIIIIlIIl	Ljava/lang/String;
    //   0	113	3	lIllllIIIIIlIIl	C
    //   0	113	3	lllIIIlIIIIlIIl	I
    //   107	4	2	lIlIIIlIIIIlIIl	Ljava/lang/Exception;
    //   0	113	1	lIIIIIlIIIIlIIl	Ljava/lang/Exception;
    //   0	113	0	IIIIIIlIIIIlIIl	Z
    //   0	113	0	lIIlIIlIIIIlIIl	S
    //   47	59	2	IlIIIIlIIIIlIIl	Ljavax/crypto/spec/SecretKeySpec;
    //   64	42	3	llIIIIlIIIIlIIl	Ljavax/crypto/Cipher;
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  private static String llIlIlllll(String lIIlIllIIIIlIIl, String llIlIllIIIIlIIl) {
    String str = new String(Base64.getDecoder().decode(lIIlIllIIIIlIIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder lIlIlllIIIIlIIl = new StringBuilder();
    char[] IlllIllIIIIlIIl = llIlIllIIIIlIIl.toCharArray();
    int lIllIllIIIIlIIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IIIlIIlIl[0]];
    char[] arrayOfChar1 = str.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[IIIlIIlIl[0]];
    while (lIIIllllll(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char lIIIlllIIIIlIIl = arrayOfChar1[j];
      "".length();
      lIllIllIIIIlIIl++;
      j++;
      "".length();
      if (lIIIllllll((IIIlIIlIl[0] + IIIlIIlIl[11] - IIIlIIlIl[12] + IIIlIIlIl[13] ^ IIIlIIlIl[14] ^ IIIlIIlIl[15]) & (IIIlIIlIl[16] + IIIlIIlIl[17] - IIIlIIlIl[18] + IIIlIIlIl[19] ^ IIIlIIlIl[10] + IIIlIIlIl[20] - IIIlIIlIl[21] + IIIlIIlIl[22] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(lIlIlllIIIIlIIl);
  }
  
  static {
    llllIlllll();
    IlllIlllll();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclien\\utils\Decrypter.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */