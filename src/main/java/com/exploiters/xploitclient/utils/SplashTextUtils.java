package com.exploiters.xploitclient.utils;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Random;
import me.superblaubeere27.jobf.processors.encryption.string.XOREncryptionAlgorithm;

public class SplashTextUtils {
  public static String getRandomSplash() {
    Random IlIllIIIIIIlIIl = new Random();
    int lIIllIIIIIIlIIl = IlIllIIIIIIlIIl.nextInt(splashNum);
    String IIIllIIIIIIlIIl = splashTexts.get(lIIllIIIIIIlIIl);
    return IIIIIIIIIIl(IIIllIIIIIIlIIl) ? IIIllIIIIIIlIIl : llIIIIlIl[llllIIlIl[1]];
  }
  
  private static boolean lIIIIIIIIIl(boolean IIlllIlllllIIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String llIIIlllll(short IIllIllllllIIIl, String llIlIllllllIIIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/utils/SplashTextUtils.llllIIlIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/utils/SplashTextUtils.llllIIlIl : [I
    //   39: iconst_1
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/utils/SplashTextUtils.llllIIlIl : [I
    //   56: iconst_2
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/utils/SplashTextUtils.llllIIlIl : [I
    //   71: iconst_2
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	0	llIIIllllllIIIl	Ljava/lang/Exception;
    //   0	113	3	IlIlIllllllIIIl	I
    //   0	113	0	IIllIllllllIIIl	S
    //   64	42	3	IllIIllllllIIIl	Ljavax/crypto/Cipher;
    //   0	113	1	IlIIIllllllIIIl	Ljava/lang/Exception;
    //   0	113	2	lllIIllllllIIIl	Ljava/lang/Exception;
    //   47	59	2	lIlIIllllllIIIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	1	llIlIllllllIIIl	Ljava/lang/String;
    //   0	113	2	lIIIIllllllIIIl	I
    //   0	113	0	lIIlIllllllIIIl	Ljava/lang/String;
    //   0	113	1	IIlIIllllllIIIl	Ljava/lang/Exception;
    //   107	4	2	IIIlIllllllIIIl	Ljava/lang/Exception;
    //   0	113	3	IIIIIllllllIIIl	F
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  public static void initSplashes() {
    HttpUtils.getLines(llIIIIlIl[llllIIlIl[0]], llIIlIIIIIIlIIl -> {
          "".length();
          splashNum += llllIIlIl[1];
        });
  }
  
  private static void llllllllll() {
    llllIIlIl = new int[17];
    llllIIlIl[0] = (0xB8 ^ 0xA8 ^ 0x86 ^ 0x80) & (0x5E ^ 0x74 ^ 0x22 ^ 0x1E ^ -" ".length());
    llllIIlIl[1] = " ".length();
    llllIIlIl[2] = "  ".length();
    llllIIlIl[3] = "   ".length();
    llllIIlIl[4] = 0x32 ^ 0x2D ^ 0x4C ^ 0x0;
    llllIIlIl[5] = -(0xC5 ^ 0xB1 ^ 0x45 ^ 0x2E);
    llllIIlIl[6] = 0x9E ^ 0x93;
    llllIIlIl[7] = 24 + 181 - 148 + 139;
    llllIIlIl[8] = 1 + 93 - -47 + 14;
    llllIIlIl[9] = (0x57 ^ 0x70) + (0x45 ^ 0x1F) - (0xAC ^ 0x9D) + (0xC4 ^ 0x83);
    llllIIlIl[10] = 0xF2 ^ 0xB5 ^ 0x75 ^ 0x7F;
    llllIIlIl[11] = 81 + 41 - -29 + 58;
    llllIIlIl[12] = 77 + 145 - 118 + 55;
    llllIIlIl[13] = 0x99 ^ 0x90;
    llllIIlIl[14] = 56 + 126 - 32 + 46 ^ 165 + 130 - 262 + 137;
    llllIIlIl[15] = 0x1B ^ 0x58;
    llllIIlIl[16] = 0xBC ^ 0xA7 ^ 0x69 ^ 0x2C;
  }
  
  private static void IIlIIlllll() {
    llIIIIlIl = new String[llllIIlIl[3]];
    llIIIIlIl[llllIIlIl[0]] = IlIIIlllll("KSw/Fyt7d2QXOTIsLgUxL3YoCDVuKioQdypqJSodMT15", "AXKgX");
    llIIIIlIl[llllIIlIl[1]] = llIIIlllll("BiL0N66lA34=", "cEhGV");
    llIIIIlIl[llllIIlIl[2]] = IlIIIlllll("AScyHyNTfGkfMRonIw05B30lAD1GIScYfwJhKCIVGTZ0", "iSFoP");
  }
  
  private static boolean IIIIIIIIIIl(int IllllIlllllIIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String IlIIIlllll(String IlIllllllllIIIl, String lIlllllllllIIIl) {
    lIIllllllllIIIl = new String(Base64.getDecoder().decode(IlIllllllllIIIl.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);
    StringBuilder lllIIIIIIIIlIIl = new StringBuilder();
    char[] IIIIIIIIIIIlIIl = lIlllllllllIIIl.toCharArray();
    int lllllllllllIIIl = XOREncryptionAlgorithm.lIlIIlIlIIIlI[llllIIlIl[0]];
    char[] arrayOfChar1 = lIIllllllllIIIl.toCharArray();
    int i = arrayOfChar1.length;
    int j = XOREncryptionAlgorithm.lIlIIlIlIIIlI[llllIIlIl[0]];
    while (lIIIIIIIIIl(XOREncryptionAlgorithm.lIlIlIIlIlIlII(j, i))) {
      char llIIIIIIIIIlIIl = arrayOfChar1[j];
      "".length();
      lllllllllllIIIl++;
      j++;
      "".length();
      if (lIIIIIIIIIl((llllIIlIl[0] + llllIIlIl[4] - llllIIlIl[5] + llllIIlIl[6] ^ llllIIlIl[7] ^ llllIIlIl[8]) & (llllIIlIl[9] + llllIIlIl[10] - llllIIlIl[11] + llllIIlIl[12] ^ llllIIlIl[13] + llllIIlIl[14] - llllIIlIl[15] + llllIIlIl[16] ^ -" ".length())))
        return null; 
    } 
    return String.valueOf(lllIIIIIIIIlIIl);
  }
  
  static {
    llllllllll();
    IIlIIlllll();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclien\\utils\SplashTextUtils.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */