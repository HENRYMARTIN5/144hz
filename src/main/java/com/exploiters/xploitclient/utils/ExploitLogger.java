package com.exploiters.xploitclient.utils;

import net.minecraft.class_124;
import net.minecraft.class_2561;
import net.minecraft.class_2585;
import net.minecraft.class_310;

public class ExploitLogger {
  public static void noPrefixMessage(float IlllIIIlIlIIIl) {
    try {
      (class_310.method_1551()).field_1705.method_1743().method_1812((class_2561)new class_2585(IlllIIIlIlIIIl));
      "".length();
      if (((0x85 ^ 0xC6 ^ 0xDF ^ 0xB8) & (0x27 ^ 0x54 ^ 0x66 ^ 0x31 ^ -" ".length())) != 0)
        return; 
    } catch (Exception IIIIlIIlIlIIIl) {
      System.out.println(IlllIIIlIlIIIl);
    } 
  }
  
  public static void errorMessage(String lIlIlIIlIlIIIl) {
    try {
      (class_310.method_1551()).field_1705.method_1743().method_1812((class_2561)new class_2585(String.valueOf((new StringBuilder()).append(getBHText(class_124.field_1080)).append(llllllIIIl[lIIIIIlIIl[4]]).append(lIlIlIIlIlIIIl))));
      "".length();
      if (null != null)
        return; 
    } catch (Exception IllIlIIlIlIIIl) {
      System.out.println(String.valueOf((new StringBuilder()).append(llllllIIIl[lIIIIIlIIl[5]]).append(lIlIlIIlIlIIIl)));
    } 
  }
  
  static {
    llIIIlIIlll();
    lllllIIIlll();
  }
  
  private static String IIlllIIIlll(String lIllIllIIlIIIl, char IlIlIllIIlIIIl) {
    // Byte code:
    //   0: new java/lang/String
    //   3: dup
    //   4: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   7: aload_0
    //   8: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   11: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   14: invokevirtual decode : ([B)[B
    //   17: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   20: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   23: astore_0
    //   24: new java/lang/StringBuilder
    //   27: dup
    //   28: invokespecial <init> : ()V
    //   31: astore_2
    //   32: aload_1
    //   33: invokevirtual toCharArray : ()[C
    //   36: astore_3
    //   37: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   40: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   43: iconst_0
    //   44: iaload
    //   45: iaload
    //   46: istore #4
    //   48: aload_0
    //   49: invokevirtual toCharArray : ()[C
    //   52: astore #5
    //   54: aload #5
    //   56: arraylength
    //   57: istore #6
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   62: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   65: iconst_0
    //   66: iaload
    //   67: iaload
    //   68: istore #7
    //   70: iload #7
    //   72: iload #6
    //   74: invokestatic lIlIlIIlIlIlII : (II)Z
    //   77: invokestatic IIlIIlIIlll : (I)Z
    //   80: ifeq -> 239
    //   83: aload #5
    //   85: iload #7
    //   87: caload
    //   88: istore #8
    //   90: aload_2
    //   91: iload #8
    //   93: aload_3
    //   94: iload #4
    //   96: aload_3
    //   97: arraylength
    //   98: irem
    //   99: caload
    //   100: ixor
    //   101: i2c
    //   102: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   105: ldc ''
    //   107: invokevirtual length : ()I
    //   110: pop2
    //   111: iinc #4, 1
    //   114: iinc #7, 1
    //   117: ldc ''
    //   119: invokevirtual length : ()I
    //   122: ldc ''
    //   124: invokevirtual length : ()I
    //   127: pop2
    //   128: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   131: iconst_0
    //   132: iaload
    //   133: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   136: bipush #8
    //   138: iaload
    //   139: iadd
    //   140: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   143: bipush #9
    //   145: iaload
    //   146: isub
    //   147: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   150: bipush #10
    //   152: iaload
    //   153: iadd
    //   154: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   157: bipush #11
    //   159: iaload
    //   160: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   163: bipush #12
    //   165: iaload
    //   166: ixor
    //   167: ixor
    //   168: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   171: bipush #13
    //   173: iaload
    //   174: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   177: bipush #14
    //   179: iaload
    //   180: iadd
    //   181: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   184: bipush #15
    //   186: iaload
    //   187: isub
    //   188: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   191: bipush #16
    //   193: iaload
    //   194: iadd
    //   195: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   198: bipush #17
    //   200: iaload
    //   201: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   204: bipush #18
    //   206: iaload
    //   207: iadd
    //   208: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   211: bipush #19
    //   213: iaload
    //   214: isub
    //   215: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   218: bipush #20
    //   220: iaload
    //   221: iadd
    //   222: ixor
    //   223: ldc ' '
    //   225: invokevirtual length : ()I
    //   228: ineg
    //   229: ixor
    //   230: iand
    //   231: invokestatic IIlIIlIIlll : (I)Z
    //   234: ifeq -> 70
    //   237: aconst_null
    //   238: areturn
    //   239: aload_2
    //   240: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   243: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   32	212	2	lIIllllIIlIIIl	Ljava/lang/StringBuilder;
    //   48	196	4	lIIIlllIIlIIIl	I
    //   0	244	2	lIIlIllIIlIIIl	F
    //   0	244	3	IIIllllIIlIIIl	J
    //   90	24	8	lIlIlllIIlIIIl	C
    //   0	244	2	lllIlllIIlIIIl	F
    //   0	244	5	IllIIllIIlIIIl	Ljava/lang/Exception;
    //   0	244	5	llIIlllIIlIIIl	F
    //   0	244	8	IlIllllIIlIIIl	S
    //   0	244	0	llIlIllIIlIIIl	I
    //   0	244	7	IIIIlllIIlIIIl	D
    //   0	244	4	IllIlllIIlIIIl	S
    //   0	244	3	IIIlIllIIlIIIl	Ljava/lang/String;
    //   0	244	0	lIllIllIIlIIIl	Ljava/lang/String;
    //   0	244	6	IIlIlllIIlIIIl	S
    //   0	244	8	llIIIllIIlIIIl	F
    //   0	244	0	IIllIllIIlIIIl	Ljava/lang/String;
    //   0	244	1	llllIllIIlIIIl	Ljava/lang/String;
    //   0	244	1	IlIlIllIIlIIIl	C
    //   37	207	3	IlIIlllIIlIIIl	[C
    //   0	244	6	lIlIIllIIlIIIl	Ljava/lang/Exception;
    //   0	244	4	lllIIllIIlIIIl	S
    //   0	244	1	IlllIllIIlIIIl	Ljava/lang/String;
    //   0	244	7	IIlIIllIIlIIIl	D
  }
  
  private static boolean IIlIIlIIlll(boolean llllllIIIlIIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  private static String getBHText(boolean IIlIIIIlIlIIIl) {
    return String.valueOf((new StringBuilder()).append(IIlIIIIlIlIIIl).append(llllllIIIl[lIIIIIlIIl[6]]));
  }
  
  public static void infoMessage(double IIIIIlIlIlIIIl) {
    try {
      (class_310.method_1551()).field_1705.method_1743().method_1812((class_2561)new class_2585(String.valueOf((new StringBuilder()).append(getBHText(class_124.field_1080)).append(llllllIIIl[lIIIIIlIIl[0]]).append(IIIIIlIlIlIIIl))));
      "".length();
      if (-" ".length() > (30 + 102 - 29 + 37 ^ 75 + 2 - -1 + 58))
        return; 
    } catch (Exception IlIIIlIlIlIIIl) {
      System.out.println(String.valueOf((new StringBuilder()).append(llllllIIIl[lIIIIIlIIl[1]]).append(IIIIIlIlIlIIIl)));
    } 
  }
  
  private static String IllllIIIlll(short lIllIIlIIlIIIl, String IIllIIlIIlIIIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   10: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   33: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   36: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   39: iconst_1
    //   40: iaload
    //   41: iaload
    //   42: aaload
    //   43: invokespecial <init> : ([BLjava/lang/String;)V
    //   46: astore_2
    //   47: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIIlIlIlIl : [Ljava/lang/String;
    //   50: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   53: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   56: iconst_2
    //   57: iaload
    //   58: iaload
    //   59: aaload
    //   60: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   63: astore_3
    //   64: aload_3
    //   65: getstatic me/superblaubeere27/jobf/processors/encryption/string/BlowfishEncryptionAlgorithm.lllIIlIIllIlI : [I
    //   68: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   71: iconst_2
    //   72: iaload
    //   73: iaload
    //   74: aload_2
    //   75: invokevirtual init : (ILjava/security/Key;)V
    //   78: new java/lang/String
    //   81: dup
    //   82: aload_3
    //   83: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   86: aload_0
    //   87: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   90: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   93: invokevirtual decode : ([B)[B
    //   96: invokevirtual doFinal : ([B)[B
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   105: areturn
    //   106: astore_2
    //   107: aload_2
    //   108: invokevirtual printStackTrace : ()V
    //   111: aconst_null
    //   112: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	113	0	IIlIIIlIIlIIIl	J
    //   107	4	2	lIIlIIlIIlIIIl	Ljava/lang/Exception;
    //   0	113	2	IIIlIIlIIlIIIl	Ljava/lang/Exception;
    //   0	113	2	IlIIIIlIIlIIIl	D
    //   0	113	0	lIllIIlIIlIIIl	S
    //   0	113	0	IlIlIIlIIlIIIl	Ljava/lang/String;
    //   64	42	3	lllIIIlIIlIIIl	Ljavax/crypto/Cipher;
    //   0	113	1	lIlIIIlIIlIIIl	Ljava/lang/Exception;
    //   47	59	2	IllIIIlIIlIIIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	113	1	IIllIIlIIlIIIl	Ljava/lang/String;
    //   0	113	3	llIlIIlIIlIIIl	I
    //   0	113	3	lIIIIIlIIlIIIl	C
    //   0	113	1	llIIIIlIIlIIIl	I
    // Exception table:
    //   from	to	target	type
    //   0	105	106	java/lang/Exception
  }
  
  public static void noPrefixMessage(class_2561 lIIlIIIlIlIIIl) {
    try {
      (class_310.method_1551()).field_1705.method_1743().method_1812(lIIlIIIlIlIIIl);
      "".length();
      if (-" ".length() != -" ".length())
        return; 
    } catch (Exception IlIlIIIlIlIIIl) {
      System.out.println(lIIlIIIlIlIIIl.method_10851());
    } 
  }
  
  private static String lIlllIIIlll(byte lIlIlIlIIlIIIl, float lIlllIlIIlIIIl) {
    // Byte code:
    //   0: new javax/crypto/spec/SecretKeySpec
    //   3: dup
    //   4: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   7: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   10: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   13: iconst_0
    //   14: iaload
    //   15: iaload
    //   16: aaload
    //   17: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/MessageDigest;
    //   20: aload_1
    //   21: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   24: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   27: invokevirtual digest : ([B)[B
    //   30: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   33: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   36: iconst_1
    //   37: iaload
    //   38: iaload
    //   39: invokestatic copyOf : ([BI)[B
    //   42: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   45: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   48: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   51: iconst_2
    //   52: iaload
    //   53: iaload
    //   54: aaload
    //   55: invokespecial <init> : ([BLjava/lang/String;)V
    //   58: astore_2
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIllIll : [Ljava/lang/String;
    //   62: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   65: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   68: iconst_3
    //   69: iaload
    //   70: iaload
    //   71: aaload
    //   72: invokestatic getInstance : (Ljava/lang/String;)Ljavax/crypto/Cipher;
    //   75: astore_3
    //   76: aload_3
    //   77: getstatic me/superblaubeere27/jobf/processors/encryption/string/DESEncryptionAlgorithm.lIlllllIlllII : [I
    //   80: getstatic com/exploiters/xploitclient/utils/ExploitLogger.lIIIIIlIIl : [I
    //   83: iconst_3
    //   84: iaload
    //   85: iaload
    //   86: aload_2
    //   87: invokevirtual init : (ILjava/security/Key;)V
    //   90: new java/lang/String
    //   93: dup
    //   94: aload_3
    //   95: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   98: aload_0
    //   99: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   102: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   105: invokevirtual decode : ([B)[B
    //   108: invokevirtual doFinal : ([B)[B
    //   111: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   114: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   117: areturn
    //   118: astore_2
    //   119: aload_2
    //   120: invokevirtual printStackTrace : ()V
    //   123: aconst_null
    //   124: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	125	1	IIlIlIlIIlIIIl	I
    //   0	125	0	IllIlIlIIlIIIl	Ljava/lang/String;
    //   0	125	3	IlIIlIlIIlIIIl	Ljava/lang/String;
    //   0	125	2	llIIlIlIIlIIIl	I
    //   76	42	3	lllIlIlIIlIIIl	Ljavax/crypto/Cipher;
    //   0	125	1	lIlllIlIIlIIIl	F
    //   59	59	2	llIllIlIIlIIIl	Ljavax/crypto/spec/SecretKeySpec;
    //   0	125	2	IIIllIlIIlIIIl	C
    //   0	125	0	lIlIlIlIIlIIIl	B
    //   0	125	1	lIIllIlIIlIIIl	Ljava/lang/String;
    //   119	4	2	IlIllIlIIlIIIl	Ljava/lang/Exception;
    //   0	125	3	IllllIlIIlIIIl	I
    //   0	125	0	IIlllIlIIlIIIl	J
    // Exception table:
    //   from	to	target	type
    //   0	117	118	java/lang/Exception
  }
  
  public static void warningMessage(int IlIllIIlIlIIIl) {
    try {
      (class_310.method_1551()).field_1705.method_1743().method_1812((class_2561)new class_2585(String.valueOf((new StringBuilder()).append(getBHText(class_124.field_1080)).append(llllllIIIl[lIIIIIlIIl[2]]).append(IlIllIIlIlIIIl))));
      "".length();
      if ((152 + 55 - 126 + 86 ^ 82 + 113 - 47 + 15) != (0x8C ^ 0x84 ^ 0x2B ^ 0x27))
        return; 
    } catch (Exception IIlllIIlIlIIIl) {
      System.out.println(String.valueOf((new StringBuilder()).append(llllllIIIl[lIIIIIlIIl[3]]).append(IlIllIIlIlIIIl)));
    } 
  }
  
  private static void llIIIlIIlll() {
    lIIIIIlIIl = new int[21];
    lIIIIIlIIl[0] = (0x2D ^ 0x69) & (0x0 ^ 0x44 ^ 0xFFFFFFFF);
    lIIIIIlIIl[1] = " ".length();
    lIIIIIlIIl[2] = "  ".length();
    lIIIIIlIIl[3] = "   ".length();
    lIIIIIlIIl[4] = 124 + 126 - 249 + 152 ^ 63 + 60 - 9 + 43;
    lIIIIIlIIl[5] = 0x46 ^ 0x61 ^ 0x9A ^ 0xB8;
    lIIIIIlIIl[6] = 0x14 ^ 0x41 ^ 0x3 ^ 0x50;
    lIIIIIlIIl[7] = 0xB8 ^ 0xBF;
    lIIIIIlIIl[8] = 0xD1 ^ 0xB0 ^ 0xBE ^ 0x8C;
    lIIIIIlIIl[9] = -(0x99 ^ 0x86);
    lIIIIIlIIl[10] = 0xD1 ^ 0xBC ^ 0xC4 ^ 0xA4;
    lIIIIIlIIl[11] = 0 + 55 - -121 + 20;
    lIIIIIlIIl[12] = 124 + 54 - 37 + 14;
    lIIIIIlIIl[13] = 55 + 46 - 53 + 103;
    lIIIIIlIIl[14] = 0x13 ^ 0x5E;
    lIIIIIlIIl[15] = 208 + 6 - 105 + 100;
    lIIIIIlIIl[16] = 120 + 63 - 134 + 110;
    lIIIIIlIIl[17] = 0x31 ^ 0x38;
    lIIIIIlIIl[18] = 0xE8 ^ 0x8E ^ 0xCE ^ 0xC6;
    lIIIIIlIIl[19] = 0x13 ^ 0x50;
    lIIIIIlIIl[20] = 0x2A ^ 0x74;
  }
  
  private static void lllllIIIlll() {
    llllllIIIl = new String[lIIIIIlIIl[7]];
    llllllIIIl[lIIIIIlIIl[0]] = IIlllIIIlll("", "gOkqa");
    llllllIIIl[lIIIIIlIIl[1]] = lIlllIIIlll("0ski8JJeDzxGuIi4XgwKFofCGLf7ZvFu", "TYgIs");
    llllllIIIl[lIIIIIlIIl[2]] = IIlllIIIlll("", "pBJjt");
    llllllIIIl[lIIIIIlIIl[3]] = lIlllIIIlll("z1hEthsLgLqgC8XwZN7r3bDd6ksX0jv4", "kgtfj");
    llllllIIIl[lIIIIIlIIl[4]] = IllllIIIlll("ZDSF+TakTsg=", "iqiSZ");
    llllllIIIl[lIIIIIlIIl[5]] = IIlllIIIlll("LTM7AB4fHwgAGBMFPzFRMzkZIyNMSw==", "vkKlq");
    llllllIIIl[lIIIIIlIIl[6]] = IllllIIIlll("g2qGOsJQdxPEv3WmnpVNWK+uvaL6h+Yo7hXtwbxUGUk=", "guPMF");
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclien\\utils\ExploitLogger.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */