package com.exploiters.xploitclient;

import com.exploiters.xploitclient.module.Module;
import com.exploiters.xploitclient.module.ModuleManager;
import com.exploiters.xploitclient.module.mods.ClickGui;
import com.exploiters.xploitclient.utils.ExecutorUtils;
import com.exploiters.xploitclient.utils.ExploitHackVersionUtils;
import com.exploiters.xploitclient.utils.FriendManager;
import com.exploiters.xploitclient.utils.HWIDUtils;
import com.exploiters.xploitclient.utils.Rainbow;
import com.exploiters.xploitclient.utils.SplashTextUtils;
import com.exploiters.xploitclient.utils.capes.ExploitHackCapeUtils;
import com.exploiters.xploitclient.utils.file.ExploitHackFileHelper;
import com.exploiters.xploitclient.utils.file.ExploitHackFileMang;
import com.google.common.eventbus.EventBus;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.Base64;
import java.util.Iterator;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import me.superblaubeere27.jobf.processors.encryption.string.BlowfishEncryptionAlgorithm;
import me.superblaubeere27.jobf.processors.encryption.string.DESEncryptionAlgorithm;
import net.fabricmc.api.ModInitializer;
import net.minecraft.class_310;

public class XploitClient implements ModInitializer {
  private static String lIlIllllIl(String llIllIIlIlIlIIl, String lllllIIlIlIlIIl) {
    try {
      SecretKeySpec lIIIIlIlIlIlIIl = new SecretKeySpec(Arrays.copyOf(MessageDigest.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIlIllIIl[0]]]).digest(lllllIIlIlIlIIl.getBytes(StandardCharsets.UTF_8)), DESEncryptionAlgorithm.lIlllllIlllII[lIlIllIIl[1]]), DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIlIllIIl[2]]]);
      Cipher lIlllIIlIlIlIIl = Cipher.getInstance(DESEncryptionAlgorithm.lIlllllIllIll[DESEncryptionAlgorithm.lIlllllIlllII[lIlIllIIl[3]]]);
      lIlllIIlIlIlIIl.init(DESEncryptionAlgorithm.lIlllllIlllII[lIlIllIIl[3]], lIIIIlIlIlIlIIl);
      return new String(lIlllIIlIlIlIIl.doFinal(Base64.getDecoder().decode(llIllIIlIlIlIIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception IIIIIlIlIlIlIIl) {
      Exception exception1;
      exception1.printStackTrace();
      return null;
    } 
  }
  
  public static XploitClient get() {
    return INSTANCE;
  }
  
  private static boolean IIIlllIlll(String IIlIIllIIlIlIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 != null);
  }
  
  public void onInitialize() {
    HWIDUtils.init();
    System.out.println(String.valueOf((new StringBuilder()).append(IIlIllll[lIlIllIIl[0]]).append(HWIDUtils.getHWID())));
    if (lllIllIlll(HWIDUtils.isHWIDAllowed(HWIDUtils.getHWID()))) {
      System.out.println(IIlIllll[lIlIllIIl[1]]);
      class_310.method_1551().close();
      "".length();
      if (-"  ".length() >= 0)
        return; 
    } else {
      System.out.println(IIlIllll[lIlIllIIl[2]]);
    } 
    if (IIIlllIlll(ExploitHackVersionUtils.isLastVersion())) {
      System.out.println(IIlIllll[lIlIllIIl[3]]);
      "".length();
      if (((0xEE ^ 0x9F ^ 0x1F ^ 0x48) & (" ".length() ^ 0x1F ^ 0x38 ^ -" ".length())) != 0)
        return; 
    } else {
      System.out.println(IIlIllll[lIlIllIIl[4]]);
    } 
    SplashTextUtils.initSplashes();
    ExploitHackFileMang.init();
    ExploitHackFileHelper.readModules();
    ExecutorUtils.init();
    ExploitHackCapeUtils.init();
    ClickGui.clickGui.initWindows();
    ExploitHackFileHelper.readClickGui();
    ExploitHackFileHelper.readPrefix();
    ExploitHackFileHelper.readFriends();
    Iterator<Module> iterator = ModuleManager.getModules().iterator();
    while (IIIlllIlll(iterator.hasNext())) {
      Module IIIIllIlIlIlIIl = iterator.next();
      IIIIllIlIlIlIIl.init();
      "".length();
      if ("   ".length() < "  ".length())
        return; 
    } 
    eventBus.register(new Rainbow());
    eventBus.register(new ModuleManager());
    (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[5]];
    if (lllIllIlll(ExploitHackFileMang.fileExists(new String[lIlIllIIl[1]]))) {
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[6]];
      ExploitHackFileMang.createFile(new String[lIlIllIIl[1]]);
    } 
    (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[7]];
    iterator = ExploitHackFileMang.readFileLines(new String[lIlIllIIl[1]]).iterator();
    while (IIIlllIlll(iterator.hasNext())) {
      String IlllIlIlIlIlIIl = (String)iterator.next();
      Iterator<Module> iterator1 = ModuleManager.getModules().iterator();
      while (IIIlllIlll(iterator1.hasNext())) {
        Module llllIlIlIlIlIIl = iterator1.next();
        if (IIIlllIlll(llllIlIlIlIlIIl.getName().toLowerCase().equals(IlllIlIlIlIlIIl.toLowerCase())))
          llllIlIlIlIlIIl.setDrawn(lIlIllIIl[0]); 
        "".length();
        if (null != null)
          return; 
      } 
      "".length();
      if (" ".length() <= 0)
        return; 
    } 
    (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[8]];
    if (lllIllIlll(ExploitHackFileMang.fileExists(new String[lIlIllIIl[1]]))) {
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[9]];
      ExploitHackFileMang.createFile(new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[11]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[10]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[13]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[12]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[15]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[14]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[17]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[16]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[19]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[18]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[21]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[20]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[23]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[22]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[25]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[24]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[27]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[26]], new String[lIlIllIIl[1]]);
      (new String[lIlIllIIl[1]])[lIlIllIIl[0]] = IIlIllll[lIlIllIIl[29]];
      ExploitHackFileMang.appendFile(IIlIllll[lIlIllIIl[28]], new String[lIlIllIIl[1]]);
    } 
  }
  
  private static void IllIllIlll() {
    lIlIllIIl = new int[43];
    lIlIllIIl[0] = (0xD1 ^ 0x97 ^ 0x8A ^ 0xC2) & (0x70 ^ 0x2A ^ 0x25 ^ 0x71 ^ -" ".length()) & ((0xEF ^ 0xC2 ^ 0xFE ^ 0x93) & (34 + 104 - 48 + 145 ^ 153 + 119 - 116 + 15 ^ -" ".length()) ^ -" ".length());
    lIlIllIIl[1] = " ".length();
    lIlIllIIl[2] = "  ".length();
    lIlIllIIl[3] = "   ".length();
    lIlIllIIl[4] = 0x76 ^ 0x72;
    lIlIllIIl[5] = 0x4A ^ 0x4F;
    lIlIllIIl[6] = 0x57 ^ 0x51;
    lIlIllIIl[7] = 0x1A ^ 0x12 ^ 0x39 ^ 0x36;
    lIlIllIIl[8] = 137 + 119 - 100 + 0 ^ 103 + 129 - 103 + 19;
    lIlIllIIl[9] = 47 + 54 - 76 + 142 ^ 108 + 39 - -17 + 10;
    lIlIllIIl[10] = 0x86 ^ 0x8C;
    lIlIllIIl[11] = 0x8C ^ 0x87;
    lIlIllIIl[12] = 0x8E ^ 0xA4 ^ 0x4B ^ 0x6D;
    lIlIllIIl[13] = 16 + 121 - -30 + 14 ^ 49 + 136 - 71 + 70;
    lIlIllIIl[14] = 0x73 ^ 0x0 ^ 0xE ^ 0x73;
    lIlIllIIl[15] = 13 + 45 - -117 + 31 ^ 123 + 33 - 155 + 192;
    lIlIllIIl[16] = 0x4F ^ 0x6F ^ 0xA6 ^ 0x96;
    lIlIllIIl[17] = 0x2B ^ 0x3A;
    lIlIllIIl[18] = 155 + 95 - 197 + 108 ^ 13 + 41 - -19 + 106;
    lIlIllIIl[19] = 0x3A ^ 0x32 ^ 0xDF ^ 0xC4;
    lIlIllIIl[20] = 0x8C ^ 0x98;
    lIlIllIIl[21] = 0x8 ^ 0x1D;
    lIlIllIIl[22] = 0x1B ^ 0xD;
    lIlIllIIl[23] = 143 + 52 - 39 + 26 ^ 23 + 118 - 97 + 117;
    lIlIllIIl[24] = 0x43 ^ 0x49 ^ 0x78 ^ 0x6A;
    lIlIllIIl[25] = 0x88 ^ 0x91;
    lIlIllIIl[26] = 0x75 ^ 0x6F;
    lIlIllIIl[27] = 0x15 ^ 0x4D ^ 0x33 ^ 0x70;
    lIlIllIIl[28] = 0xAF ^ 0xB3;
    lIlIllIIl[29] = 0x3 ^ 0x56 ^ 0x73 ^ 0x3B;
    lIlIllIIl[30] = 0x2F ^ 0x31;
    lIlIllIIl[31] = 0xBD ^ 0x8A ^ 0x57 ^ 0x7F;
    lIlIllIIl[32] = 0xF1 ^ 0xA2;
    lIlIllIIl[33] = -(128 + 53 - 45 + 42 ^ 27 + 128 - 84 + 102);
    lIlIllIIl[34] = 157 + 166 - 316 + 189;
    lIlIllIIl[35] = (0x9C ^ 0xB0) + (0x48 ^ 0x71) - (0x55 ^ 0x47) + (0xDE ^ 0x96);
    lIlIllIIl[36] = (0x30 ^ 0x53) + 111 + 58 - 112 + 77 - 132 + 49 - 141 + 105 + (0xB6 ^ 0x89);
    lIlIllIIl[37] = 0x38 ^ 0x36 ^ 0x19 ^ 0x5A;
    lIlIllIIl[38] = 27 + 73 - -40 + 69;
    lIlIllIIl[39] = 17 + 9 - -126 + 7;
    lIlIllIIl[40] = 0x1D ^ 0x73;
    lIlIllIIl[41] = 23 + 18 - -95 + 109 ^ 120 + 44 - 134 + 152;
    lIlIllIIl[42] = 0x39 ^ 0x67;
  }
  
  private static void IIIIIIIIll() {
    IIlIllll = new String[lIlIllIIl[31]];
    IIlIllll[lIlIllIIl[0]] = llIIllllIl("PcZKCweUmGbsYjHK0mEF4Q==", "bHAhU");
    IIlIllll[lIlIllIIl[1]] = IIlIllllIl("IQY+IVYwPgIXVhEaaz0ZDEk8Ox8MDCc6BQwML31WOxsqIB4RByxzAhAMazQXFQxlfVg=", "xiKSv");
    IIlIllll[lIlIllIIl[2]] = lIlIllllIl("UiHgh9kNC9FgQBV4JjPff1QZaa3XLurZ", "eWTwc");
    IIlIllll[lIlIllIIl[3]] = lIlIllllIl("iI37G0N9pG2cJCztUgq1U93qkT6XNnQzO8GiOh65oDPrK1bvcZ3hFtCnDsSpVVS2", "ZoNGY");
    IIlIllll[lIlIllIIl[4]] = lIlIllllIl("ccJEtRQYw7yhFlpZwunLzsb1biJpBwH+zCrqIdlhaGhNklwVXGLZGTTix0lAVu0U", "IIbEZ");
    IIlIllll[lIlIllIIl[5]] = llIIllllIl("Ri6cZ6wkN2njFuv1cUbgLA==", "rBFtY");
    IIlIllll[lIlIllIIl[6]] = IIlIllllIl("CwYSLwRBAAss", "otsXj");
    IIlIllll[lIlIllIIl[7]] = IIlIllllIl("CwsmMhlBDT8x", "oyGEw");
    IIlIllll[lIlIllIIl[8]] = lIlIllllIl("nSRwTWT+DoZYIkJYDc264Q==", "VdDmC");
    IIlIllll[lIlIllIIl[9]] = lIlIllllIl("U+cvna3Ys06gQVIQAamUUg==", "hrPdM");
    IIlIllll[lIlIllIIl[10]] = llIIllllIl("hSh4yX29lcM=", "TSyUC");
    IIlIllll[lIlIllIIl[11]] = llIIllllIl("besaBT+CRV+dhfkn1YyQpw==", "iuBuI");
    IIlIllll[lIlIllIIl[12]] = llIIllllIl("9kP9ToF+8Ck=", "DRyEp");
    IIlIllll[lIlIllIIl[13]] = llIIllllIl("fmi1zXP69KHdb9biuNkzCQ==", "RBVfG");
    IIlIllll[lIlIllIIl[14]] = lIlIllllIl("CITLw5wrldn4Psvth8F1kA==", "bcqTl");
    IIlIllll[lIlIllIIl[15]] = IIlIllllIl("KT0PECcpOQsFZz4pHg==", "JQjqI");
    IIlIllll[lIlIllIIl[16]] = lIlIllllIl("QJF1ycDs+tA=", "AHxbp");
    IIlIllll[lIlIllIIl[17]] = lIlIllllIl("zDbF31jqXYGRKyoEHuxHtw==", "lQBqc");
    IIlIllll[lIlIllIIl[18]] = llIIllllIl("xYQygXmETtQ=", "KEmky");
    IIlIllll[lIlIllIIl[19]] = IIlIllllIl("JgEADhwmBQQbXDEVEQ==", "Emeor");
    IIlIllll[lIlIllIIl[20]] = lIlIllllIl("2b19joNBroA=", "Ndyan");
    IIlIllll[lIlIllIIl[21]] = lIlIllllIl("jdyitaQW4PNYbiwmmRZr/Q==", "JsShY");
    IIlIllll[lIlIllIIl[22]] = llIIllllIl("WI2IMkD8APQ=", "ghYbR");
    IIlIllll[lIlIllIIl[23]] = llIIllllIl("MNl5pyGXx97yG/HAaYXKfw==", "bsCnz");
    IIlIllll[lIlIllIIl[24]] = llIIllllIl("bPGlKYfHO0s=", "GmxdG");
    IIlIllll[lIlIllIIl[25]] = lIlIllllIl("J8DtjG2bGgZdx5OG1iOAyA==", "MAwMi");
    IIlIllll[lIlIllIIl[26]] = llIIllllIl("ac1u+GHWUG8=", "qbmvW");
    IIlIllll[lIlIllIIl[27]] = IIlIllllIl("CgskMxoKDyAmWh0fNQ==", "igARt");
    IIlIllll[lIlIllIIl[28]] = IIlIllllIl("JigCMDc=", "HAeWV");
    IIlIllll[lIlIllIIl[29]] = llIIllllIl("YCDQLyto11UTPZmfvV8KZQ==", "QpWqi");
    IIlIllll[lIlIllIIl[30]] = lIlIllllIl("qsnbVR3FQIc=", "AWNjy");
  }
  
  private static String IIlIllllIl(byte IlllIllIIlIlIIl, String IlIIlllIIlIlIIl) {
    // Byte code:
    //   0: new java/lang/String
    //   3: dup
    //   4: invokestatic getDecoder : ()Ljava/util/Base64$Decoder;
    //   7: aload_0
    //   8: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   11: invokevirtual getBytes : (Ljava/nio/charset/Charset;)[B
    //   14: invokevirtual decode : ([B)[B
    //   17: getstatic java/nio/charset/StandardCharsets.UTF_8 : Ljava/nio/charset/Charset;
    //   20: invokespecial <init> : ([BLjava/nio/charset/Charset;)V
    //   23: astore_0
    //   24: new java/lang/StringBuilder
    //   27: dup
    //   28: invokespecial <init> : ()V
    //   31: astore_2
    //   32: aload_1
    //   33: invokevirtual toCharArray : ()[C
    //   36: astore_3
    //   37: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   40: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   43: iconst_0
    //   44: iaload
    //   45: iaload
    //   46: istore #4
    //   48: aload_0
    //   49: invokevirtual toCharArray : ()[C
    //   52: astore #5
    //   54: aload #5
    //   56: arraylength
    //   57: istore #6
    //   59: getstatic me/superblaubeere27/jobf/processors/encryption/string/XOREncryptionAlgorithm.lIlIIlIlIIIlI : [I
    //   62: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   65: iconst_0
    //   66: iaload
    //   67: iaload
    //   68: istore #7
    //   70: iload #7
    //   72: iload #6
    //   74: invokestatic lIlIlIIlIlIlII : (II)Z
    //   77: invokestatic IIIlllIlll : (I)Z
    //   80: ifeq -> 239
    //   83: aload #5
    //   85: iload #7
    //   87: caload
    //   88: istore #8
    //   90: aload_2
    //   91: iload #8
    //   93: aload_3
    //   94: iload #4
    //   96: aload_3
    //   97: arraylength
    //   98: irem
    //   99: caload
    //   100: ixor
    //   101: i2c
    //   102: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   105: ldc ''
    //   107: invokevirtual length : ()I
    //   110: pop2
    //   111: iinc #4, 1
    //   114: iinc #7, 1
    //   117: ldc ''
    //   119: invokevirtual length : ()I
    //   122: ldc ''
    //   124: invokevirtual length : ()I
    //   127: pop2
    //   128: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   131: iconst_0
    //   132: iaload
    //   133: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   136: bipush #32
    //   138: iaload
    //   139: iadd
    //   140: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   143: bipush #33
    //   145: iaload
    //   146: isub
    //   147: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   150: bipush #13
    //   152: iaload
    //   153: iadd
    //   154: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   157: bipush #34
    //   159: iaload
    //   160: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   163: bipush #35
    //   165: iaload
    //   166: ixor
    //   167: ixor
    //   168: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   171: bipush #36
    //   173: iaload
    //   174: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   177: bipush #37
    //   179: iaload
    //   180: iadd
    //   181: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   184: bipush #38
    //   186: iaload
    //   187: isub
    //   188: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   191: bipush #39
    //   193: iaload
    //   194: iadd
    //   195: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   198: bipush #9
    //   200: iaload
    //   201: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   204: bipush #40
    //   206: iaload
    //   207: iadd
    //   208: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   211: bipush #41
    //   213: iaload
    //   214: isub
    //   215: getstatic com/exploiters/xploitclient/XploitClient.lIlIllIIl : [I
    //   218: bipush #42
    //   220: iaload
    //   221: iadd
    //   222: ixor
    //   223: ldc ' '
    //   225: invokevirtual length : ()I
    //   228: ineg
    //   229: ixor
    //   230: iand
    //   231: invokestatic IIIlllIlll : (I)Z
    //   234: ifeq -> 70
    //   237: aconst_null
    //   238: areturn
    //   239: aload_2
    //   240: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   243: areturn
    // Local variable table:
    //   start	length	slot	name	descriptor
    //   0	244	2	IIllIllIIlIlIIl	D
    //   0	244	6	lllIlllIIlIlIIl	S
    //   32	212	2	IIlllllIIlIlIIl	Ljava/lang/StringBuilder;
    //   0	244	1	lIllIllIIlIlIIl	J
    //   0	244	4	lIIllllIIlIlIIl	S
    //   0	244	1	IlIIlllIIlIlIIl	Ljava/lang/String;
    //   0	244	5	IllIlllIIlIlIIl	F
    //   0	244	7	lllIIllIIlIlIIl	C
    //   0	244	0	IIIIlllIIlIlIIl	Ljava/lang/String;
    //   0	244	8	lIlllllIIlIlIIl	S
    //   0	244	4	IlIlIllIIlIlIIl	C
    //   0	244	1	lIIIlllIIlIlIIl	Ljava/lang/String;
    //   37	207	3	lIlIlllIIlIlIIl	[C
    //   0	244	3	llIllllIIlIlIIl	J
    //   0	244	6	IIIlIllIIlIlIIl	Ljava/lang/String;
    //   0	244	8	IllIIllIIlIlIIl	D
    //   0	244	0	IlllIllIIlIlIIl	B
    //   0	244	7	llIIlllIIlIlIIl	D
    //   0	244	3	llIlIllIIlIlIIl	S
    //   0	244	5	lIIlIllIIlIlIIl	J
    //   48	196	4	IIlIlllIIlIlIIl	I
    //   0	244	2	IlIllllIIlIlIIl	F
    //   0	244	0	llllIllIIlIlIIl	Ljava/lang/String;
    //   90	24	8	IIIllllIIlIlIIl	C
  }
  
  private static boolean lllIllIlll(int IlIIIllIIlIlIIl) {
    return (SYNTHETIC_LOCAL_VARIABLE_0 == null);
  }
  
  static {
    VERSION = IIlIllll[lIlIllIIl[30]];
    eventBus = new EventBus();
  }
  
  private static String llIIllllIl(String IIIIlIIlIlIlIIl, Exception llIlIIIlIlIlIIl) {
    try {
      SecretKeySpec IIllIIIlIlIlIIl = new SecretKeySpec(MessageDigest.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIllIIl[0]]]).digest(llIlIIIlIlIlIIl.getBytes(StandardCharsets.UTF_8)), BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIllIIl[1]]]);
      Cipher lIllIIIlIlIlIIl = Cipher.getInstance(BlowfishEncryptionAlgorithm.lllIIIlIlIlIl[BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIllIIl[2]]]);
      lIllIIIlIlIlIIl.init(BlowfishEncryptionAlgorithm.lllIIlIIllIlI[lIlIllIIl[2]], IIllIIIlIlIlIIl);
      return new String(lIllIIIlIlIlIIl.doFinal(Base64.getDecoder().decode(IIIIlIIlIlIlIIl.getBytes(StandardCharsets.UTF_8))), StandardCharsets.UTF_8);
    } catch (Exception llllIIIlIlIlIIl) {
      IlllIIIlIlIlIIl.printStackTrace();
      return null;
    } 
  }
  
  static {
    IllIllIlll();
    IIIIIIIIll();
  }
}


/* Location:              D:\reversingPhobos\144hz_build28.jar!\com\exploiters\xploitclient\XploitClient.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */